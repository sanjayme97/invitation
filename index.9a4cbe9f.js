let e,t,i,n,r,a,s,o,l,h;function c(e){return e&&e.__esModule?e.default:e}var q=globalThis,u={},d={},m=q.parcelRequire94c2;null==m&&((m=function(e){if(e in u)return u[e].exports;if(e in d){var t=d[e];delete d[e];var i={id:e,exports:{}};return u[e]=i,t.call(i.exports,i,i.exports),i.exports}var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}).register=function(e,t){d[e]=t},q.parcelRequire94c2=m),(0,m.register)("27Lyk",function(e,t){Object.defineProperty(e.exports,"register",{get:()=>i,set:e=>i=e,enumerable:!0,configurable:!0});var i,n=new Map;i=function(e,t){for(var i=0;i<t.length-1;i+=2)n.set(t[i],{baseUrl:e,path:t[i+1]})}}),m("27Lyk").register(new URL("",import.meta.url).toString(),JSON.parse('["9vqfN","index.9a4cbe9f.js","9eFpI","earth_day_4096.4899a273.jpg","gBdlZ","earth_night_4096.b5559c8d.jpg","bW1OG","earth_bump_roughness_clouds_4096.afec421f.jpg"]'));const p={ROTATE:0,DOLLY:1,PAN:2},f={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},_="srgb",g="srgb-linear",x="linear",v="srgb",y="300 es";class M{addEventListener(e,t){void 0===this._listeners&&(this._listeners={});let i=this._listeners;void 0===i[e]&&(i[e]=[]),-1===i[e].indexOf(t)&&i[e].push(t)}hasEventListener(e,t){let i=this._listeners;return void 0!==i&&void 0!==i[e]&&-1!==i[e].indexOf(t)}removeEventListener(e,t){let i=this._listeners;if(void 0===i)return;let n=i[e];if(void 0!==n){let e=n.indexOf(t);-1!==e&&n.splice(e,1)}}dispatchEvent(e){let t=this._listeners;if(void 0===t)return;let i=t[e.type];if(void 0!==i){e.target=this;let t=i.slice(0);for(let i=0,n=t.length;i<n;i++)t[i].call(this,e);e.target=null}}}const S=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],E=Math.PI/180,T=180/Math.PI;function b(){let e=0xffffffff*Math.random()|0,t=0xffffffff*Math.random()|0,i=0xffffffff*Math.random()|0,n=0xffffffff*Math.random()|0;return(S[255&e]+S[e>>8&255]+S[e>>16&255]+S[e>>24&255]+"-"+S[255&t]+S[t>>8&255]+"-"+S[t>>16&15|64]+S[t>>24&255]+"-"+S[63&i|128]+S[i>>8&255]+"-"+S[i>>16&255]+S[i>>24&255]+S[255&n]+S[n>>8&255]+S[n>>16&255]+S[n>>24&255]).toLowerCase()}function w(e,t,i){return Math.max(t,Math.min(i,e))}function A(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return e/0xffffffff;case Uint16Array:return e/65535;case Uint8Array:return e/255;case Int32Array:return Math.max(e/0x7fffffff,-1);case Int16Array:return Math.max(e/32767,-1);case Int8Array:return Math.max(e/127,-1);default:throw Error("Invalid component type.")}}function R(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return Math.round(0xffffffff*e);case Uint16Array:return Math.round(65535*e);case Uint8Array:return Math.round(255*e);case Int32Array:return Math.round(0x7fffffff*e);case Int16Array:return Math.round(32767*e);case Int8Array:return Math.round(127*e);default:throw Error("Invalid component type.")}}class C{constructor(e=0,t=0){C.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){let t=this.x,i=this.y,n=e.elements;return this.x=n[0]*t+n[3]*i+n[6],this.y=n[1]*t+n[4]*i+n[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=w(this.x,e.x,t.x),this.y=w(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=w(this.x,e,t),this.y=w(this.y,e,t),this}clampLength(e,t){let i=this.length();return this.divideScalar(i||1).multiplyScalar(w(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){let t=Math.sqrt(this.lengthSq()*e.lengthSq());return 0===t?Math.PI/2:Math.acos(w(this.dot(e)/t,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){let t=this.x-e.x,i=this.y-e.y;return t*t+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){let i=Math.cos(t),n=Math.sin(t),r=this.x-e.x,a=this.y-e.y;return this.x=r*i-a*n+e.x,this.y=r*n+a*i+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class P{constructor(e,t,i,n,r,a,s,o,l){P.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==e&&this.set(e,t,i,n,r,a,s,o,l)}set(e,t,i,n,r,a,s,o,l){let h=this.elements;return h[0]=e,h[1]=n,h[2]=s,h[3]=t,h[4]=r,h[5]=o,h[6]=i,h[7]=a,h[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){let t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],this}extractBasis(e,t,i){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(e){let t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){let i=e.elements,n=t.elements,r=this.elements,a=i[0],s=i[3],o=i[6],l=i[1],h=i[4],c=i[7],q=i[2],u=i[5],d=i[8],m=n[0],p=n[3],f=n[6],_=n[1],g=n[4],x=n[7],v=n[2],y=n[5],M=n[8];return r[0]=a*m+s*_+o*v,r[3]=a*p+s*g+o*y,r[6]=a*f+s*x+o*M,r[1]=l*m+h*_+c*v,r[4]=l*p+h*g+c*y,r[7]=l*f+h*x+c*M,r[2]=q*m+u*_+d*v,r[5]=q*p+u*g+d*y,r[8]=q*f+u*x+d*M,this}multiplyScalar(e){let t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){let e=this.elements,t=e[0],i=e[1],n=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],h=e[8];return t*a*h-t*s*l-i*r*h+i*s*o+n*r*l-n*a*o}invert(){let e=this.elements,t=e[0],i=e[1],n=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],h=e[8],c=h*a-s*l,q=s*o-h*r,u=l*r-a*o,d=t*c+i*q+n*u;if(0===d)return this.set(0,0,0,0,0,0,0,0,0);let m=1/d;return e[0]=c*m,e[1]=(n*l-h*i)*m,e[2]=(s*i-n*a)*m,e[3]=q*m,e[4]=(h*t-n*o)*m,e[5]=(n*r-s*t)*m,e[6]=u*m,e[7]=(i*o-l*t)*m,e[8]=(a*t-i*r)*m,this}transpose(){let e;let t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){let t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,i,n,r,a,s){let o=Math.cos(r),l=Math.sin(r);return this.set(i*o,i*l,-i*(o*a+l*s)+a+e,-n*l,n*o,-n*(-l*a+o*s)+s+t,0,0,1),this}scale(e,t){return this.premultiply(L.makeScale(e,t)),this}rotate(e){return this.premultiply(L.makeRotation(-e)),this}translate(e,t){return this.premultiply(L.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){let t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,i,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){let t=this.elements,i=e.elements;for(let e=0;e<9;e++)if(t[e]!==i[e])return!1;return!0}fromArray(e,t=0){for(let i=0;i<9;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){let i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const L=new P;function D(e){for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;return!1}function U(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;const N={};function I(e){e in N||(N[e]=!0,console.warn(e))}const O=new P().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),z=new P().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715),F=function(){let e={enabled:!0,workingColorSpace:g,spaces:{},convert:function(e,t,i){return!1!==this.enabled&&t!==i&&t&&i&&(this.spaces[t].transfer===v&&(e.r=B(e.r),e.g=B(e.g),e.b=B(e.b)),this.spaces[t].primaries!==this.spaces[i].primaries&&(e.applyMatrix3(this.spaces[t].toXYZ),e.applyMatrix3(this.spaces[i].fromXYZ)),this.spaces[i].transfer===v&&(e.r=H(e.r),e.g=H(e.g),e.b=H(e.b))),e},fromWorkingColorSpace:function(e,t){return this.convert(e,this.workingColorSpace,t)},toWorkingColorSpace:function(e,t){return this.convert(e,t,this.workingColorSpace)},getPrimaries:function(e){return this.spaces[e].primaries},getTransfer:function(e){return""===e?x:this.spaces[e].transfer},getLuminanceCoefficients:function(e,t=this.workingColorSpace){return e.fromArray(this.spaces[t].luminanceCoefficients)},define:function(e){Object.assign(this.spaces,e)},_getMatrix:function(e,t,i){return e.copy(this.spaces[t].toXYZ).multiply(this.spaces[i].fromXYZ)},_getDrawingBufferColorSpace:function(e){return this.spaces[e].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(e=this.workingColorSpace){return this.spaces[e].workingColorSpaceConfig.unpackColorSpace}},t=[.64,.33,.3,.6,.15,.06],i=[.2126,.7152,.0722],n=[.3127,.329];return e.define({[g]:{primaries:t,whitePoint:n,transfer:x,toXYZ:O,fromXYZ:z,luminanceCoefficients:i,workingColorSpaceConfig:{unpackColorSpace:_},outputColorSpaceConfig:{drawingBufferColorSpace:_}},[_]:{primaries:t,whitePoint:n,transfer:v,toXYZ:O,fromXYZ:z,luminanceCoefficients:i,outputColorSpaceConfig:{drawingBufferColorSpace:_}}}),e}();function B(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function H(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}class V{static getDataURL(t){let i;if(/^data:/i.test(t.src)||"undefined"==typeof HTMLCanvasElement)return t.src;if(t instanceof HTMLCanvasElement)i=t;else{void 0===e&&(e=U("canvas")),e.width=t.width,e.height=t.height;let n=e.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),i=e}return i.toDataURL("image/png")}static sRGBToLinear(e){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){let t=U("canvas");t.width=e.width,t.height=e.height;let i=t.getContext("2d");i.drawImage(e,0,0,e.width,e.height);let n=i.getImageData(0,0,e.width,e.height),r=n.data;for(let e=0;e<r.length;e++)r[e]=255*B(r[e]/255);return i.putImageData(n,0,0),t}if(!e.data)return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e;{let t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(255*B(t[e]/255)):t[e]=B(t[e]);return{data:t,width:e.width,height:e.height}}}}let k=0;class G{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:k++}),this.uuid=b(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}toJSON(e){let t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.images[this.uuid])return e.images[this.uuid];let i={uuid:this.uuid,url:""},n=this.data;if(null!==n){let e;if(Array.isArray(n)){e=[];for(let t=0,i=n.length;t<i;t++)n[t].isDataTexture?e.push(W(n[t].image)):e.push(W(n[t]))}else e=W(n);i.url=e}return t||(e.images[this.uuid]=i),i}}function W(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap?V.getDataURL(e):e.data?{data:Array.from(e.data),width:e.width,height:e.height,type:e.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let X=0;class j extends M{constructor(e=j.DEFAULT_IMAGE,t=j.DEFAULT_MAPPING,i=1001,n=1001,r=1006,a=1008,s=1023,o=1009,l=j.DEFAULT_ANISOTROPY,h=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:X++}),this.uuid=b(),this.name="",this.source=new G(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=i,this.wrapT=n,this.magFilter=r,this.minFilter=a,this.anisotropy=l,this.format=s,this.internalFormat=null,this.type=o,this.offset=new C(0,0),this.repeat=new C(1,1),this.center=new C(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new P,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){let t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];let i={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),t||(e.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case 1e3:e.x=e.x-Math.floor(e.x);break;case 1001:e.x=e.x<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case 1e3:e.y=e.y-Math.floor(e.y);break;case 1001:e.y=e.y<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){!0===e&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){!0===e&&this.pmremVersion++}}j.DEFAULT_IMAGE=null,j.DEFAULT_MAPPING=300,j.DEFAULT_ANISOTROPY=1;class Y{constructor(e=0,t=0,i=0,n=1){Y.prototype.isVector4=!0,this.x=e,this.y=t,this.z=i,this.w=n}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,i,n){return this.x=e,this.y=t,this.z=i,this.w=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){let t=this.x,i=this.y,n=this.z,r=this.w,a=e.elements;return this.x=a[0]*t+a[4]*i+a[8]*n+a[12]*r,this.y=a[1]*t+a[5]*i+a[9]*n+a[13]*r,this.z=a[2]*t+a[6]*i+a[10]*n+a[14]*r,this.w=a[3]*t+a[7]*i+a[11]*n+a[15]*r,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);let t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,i,n,r;let a=e.elements,s=a[0],o=a[4],l=a[8],h=a[1],c=a[5],q=a[9],u=a[2],d=a[6],m=a[10];if(.01>Math.abs(o-h)&&.01>Math.abs(l-u)&&.01>Math.abs(q-d)){if(.1>Math.abs(o+h)&&.1>Math.abs(l+u)&&.1>Math.abs(q+d)&&.1>Math.abs(s+c+m-3))return this.set(1,0,0,0),this;t=Math.PI;let e=(s+1)/2,a=(c+1)/2,p=(m+1)/2,f=(o+h)/4,_=(l+u)/4,g=(q+d)/4;return e>a&&e>p?e<.01?(i=0,n=.707106781,r=.707106781):(n=f/(i=Math.sqrt(e)),r=_/i):a>p?a<.01?(i=.707106781,n=0,r=.707106781):(i=f/(n=Math.sqrt(a)),r=g/n):p<.01?(i=.707106781,n=.707106781,r=0):(i=_/(r=Math.sqrt(p)),n=g/r),this.set(i,n,r,t),this}let p=Math.sqrt((d-q)*(d-q)+(l-u)*(l-u)+(h-o)*(h-o));return .001>Math.abs(p)&&(p=1),this.x=(d-q)/p,this.y=(l-u)/p,this.z=(h-o)/p,this.w=Math.acos((s+c+m-1)/2),this}setFromMatrixPosition(e){let t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=w(this.x,e.x,t.x),this.y=w(this.y,e.y,t.y),this.z=w(this.z,e.z,t.z),this.w=w(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=w(this.x,e,t),this.y=w(this.y,e,t),this.z=w(this.z,e,t),this.w=w(this.w,e,t),this}clampLength(e,t){let i=this.length();return this.divideScalar(i||1).multiplyScalar(w(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this.w=e.w+(t.w-e.w)*i,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Z extends M{constructor(e=1,t=1,i={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new Y(0,0,e,t),this.scissorTest=!1,this.viewport=new Y(0,0,e,t);let n=new j({width:e,height:t,depth:1},(i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:1006,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},i)).mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace);n.flipY=!1,n.generateMipmaps=i.generateMipmaps,n.internalFormat=i.internalFormat,this.textures=[];let r=i.count;for(let e=0;e<r;e++)this.textures[e]=n.clone(),this.textures[e].isRenderTargetTexture=!0,this.textures[e].renderTarget=this;this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.resolveDepthBuffer=i.resolveDepthBuffer,this.resolveStencilBuffer=i.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=i.depthTexture,this.samples=i.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){null!==this._depthTexture&&(this._depthTexture.renderTarget=null),null!==e&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,i=1){if(this.width!==e||this.height!==t||this.depth!==i){this.width=e,this.height=t,this.depth=i;for(let n=0,r=this.textures.length;n<r;n++)this.textures[n].image.width=e,this.textures[n].image.height=t,this.textures[n].image.depth=i;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let t=0,i=e.textures.length;t<i;t++)this.textures[t]=e.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;let t=Object.assign({},e.texture.image);return this.texture.source=new G(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,null!==e.depthTexture&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class K extends Z{constructor(e=1,t=1,i={}){super(e,t,i),this.isWebGLRenderTarget=!0}}class J extends j{constructor(e=null,t=1,i=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:i,depth:n},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class ${constructor(e=0,t=0,i=0,n=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=i,this._w=n}static slerpFlat(e,t,i,n,r,a,s){let o=i[n+0],l=i[n+1],h=i[n+2],c=i[n+3],q=r[a+0],u=r[a+1],d=r[a+2],m=r[a+3];if(0===s){e[t+0]=o,e[t+1]=l,e[t+2]=h,e[t+3]=c;return}if(1===s){e[t+0]=q,e[t+1]=u,e[t+2]=d,e[t+3]=m;return}if(c!==m||o!==q||l!==u||h!==d){let e=1-s,t=o*q+l*u+h*d+c*m,i=t>=0?1:-1,n=1-t*t;if(n>Number.EPSILON){let r=Math.sqrt(n),a=Math.atan2(r,t*i);e=Math.sin(e*a)/r,s=Math.sin(s*a)/r}let r=s*i;if(o=o*e+q*r,l=l*e+u*r,h=h*e+d*r,c=c*e+m*r,e===1-s){let e=1/Math.sqrt(o*o+l*l+h*h+c*c);o*=e,l*=e,h*=e,c*=e}}e[t]=o,e[t+1]=l,e[t+2]=h,e[t+3]=c}static multiplyQuaternionsFlat(e,t,i,n,r,a){let s=i[n],o=i[n+1],l=i[n+2],h=i[n+3],c=r[a],q=r[a+1],u=r[a+2],d=r[a+3];return e[t]=s*d+h*c+o*u-l*q,e[t+1]=o*d+h*q+l*c-s*u,e[t+2]=l*d+h*u+s*q-o*c,e[t+3]=h*d-s*c-o*q-l*u,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,i,n){return this._x=e,this._y=t,this._z=i,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){let i=e._x,n=e._y,r=e._z,a=e._order,s=Math.cos,o=Math.sin,l=s(i/2),h=s(n/2),c=s(r/2),q=o(i/2),u=o(n/2),d=o(r/2);switch(a){case"XYZ":this._x=q*h*c+l*u*d,this._y=l*u*c-q*h*d,this._z=l*h*d+q*u*c,this._w=l*h*c-q*u*d;break;case"YXZ":this._x=q*h*c+l*u*d,this._y=l*u*c-q*h*d,this._z=l*h*d-q*u*c,this._w=l*h*c+q*u*d;break;case"ZXY":this._x=q*h*c-l*u*d,this._y=l*u*c+q*h*d,this._z=l*h*d+q*u*c,this._w=l*h*c-q*u*d;break;case"ZYX":this._x=q*h*c-l*u*d,this._y=l*u*c+q*h*d,this._z=l*h*d-q*u*c,this._w=l*h*c+q*u*d;break;case"YZX":this._x=q*h*c+l*u*d,this._y=l*u*c+q*h*d,this._z=l*h*d-q*u*c,this._w=l*h*c-q*u*d;break;case"XZY":this._x=q*h*c-l*u*d,this._y=l*u*c-q*h*d,this._z=l*h*d+q*u*c,this._w=l*h*c+q*u*d;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return!0===t&&this._onChangeCallback(),this}setFromAxisAngle(e,t){let i=t/2,n=Math.sin(i);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(e){let t=e.elements,i=t[0],n=t[4],r=t[8],a=t[1],s=t[5],o=t[9],l=t[2],h=t[6],c=t[10],q=i+s+c;if(q>0){let e=.5/Math.sqrt(q+1);this._w=.25/e,this._x=(h-o)*e,this._y=(r-l)*e,this._z=(a-n)*e}else if(i>s&&i>c){let e=2*Math.sqrt(1+i-s-c);this._w=(h-o)/e,this._x=.25*e,this._y=(n+a)/e,this._z=(r+l)/e}else if(s>c){let e=2*Math.sqrt(1+s-i-c);this._w=(r-l)/e,this._x=(n+a)/e,this._y=.25*e,this._z=(o+h)/e}else{let e=2*Math.sqrt(1+c-i-s);this._w=(a-n)/e,this._x=(r+l)/e,this._y=(o+h)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let i=e.dot(t)+1;return i<Number.EPSILON?(i=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0):(this._x=0,this._y=-e.z,this._z=e.y)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x),this._w=i,this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(w(this.dot(e),-1,1)))}rotateTowards(e,t){let i=this.angleTo(e);if(0===i)return this;let n=Math.min(1,t/i);return this.slerp(e,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){let i=e._x,n=e._y,r=e._z,a=e._w,s=t._x,o=t._y,l=t._z,h=t._w;return this._x=i*h+a*s+n*l-r*o,this._y=n*h+a*o+r*s-i*l,this._z=r*h+a*l+i*o-n*s,this._w=a*h-i*s-n*o-r*l,this._onChangeCallback(),this}slerp(e,t){if(0===t)return this;if(1===t)return this.copy(e);let i=this._x,n=this._y,r=this._z,a=this._w,s=a*e._w+i*e._x+n*e._y+r*e._z;if(s<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,s=-s):this.copy(e),s>=1)return this._w=a,this._x=i,this._y=n,this._z=r,this;let o=1-s*s;if(o<=Number.EPSILON){let e=1-t;return this._w=e*a+t*this._w,this._x=e*i+t*this._x,this._y=e*n+t*this._y,this._z=e*r+t*this._z,this.normalize(),this}let l=Math.sqrt(o),h=Math.atan2(l,s),c=Math.sin((1-t)*h)/l,q=Math.sin(t*h)/l;return this._w=a*c+this._w*q,this._x=i*c+this._x*q,this._y=n*c+this._y*q,this._z=r*c+this._z*q,this._onChangeCallback(),this}slerpQuaternions(e,t,i){return this.copy(e).slerp(t,i)}random(){let e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),i=Math.random(),n=Math.sqrt(1-i),r=Math.sqrt(i);return this.set(n*Math.sin(e),n*Math.cos(e),r*Math.sin(t),r*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Q{constructor(e=0,t=0,i=0){Q.prototype.isVector3=!0,this.x=e,this.y=t,this.z=i}set(e,t,i){return void 0===i&&(i=this.z),this.x=e,this.y=t,this.z=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(et.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(et.setFromAxisAngle(e,t))}applyMatrix3(e){let t=this.x,i=this.y,n=this.z,r=e.elements;return this.x=r[0]*t+r[3]*i+r[6]*n,this.y=r[1]*t+r[4]*i+r[7]*n,this.z=r[2]*t+r[5]*i+r[8]*n,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){let t=this.x,i=this.y,n=this.z,r=e.elements,a=1/(r[3]*t+r[7]*i+r[11]*n+r[15]);return this.x=(r[0]*t+r[4]*i+r[8]*n+r[12])*a,this.y=(r[1]*t+r[5]*i+r[9]*n+r[13])*a,this.z=(r[2]*t+r[6]*i+r[10]*n+r[14])*a,this}applyQuaternion(e){let t=this.x,i=this.y,n=this.z,r=e.x,a=e.y,s=e.z,o=e.w,l=2*(a*n-s*i),h=2*(s*t-r*n),c=2*(r*i-a*t);return this.x=t+o*l+a*c-s*h,this.y=i+o*h+s*l-r*c,this.z=n+o*c+r*h-a*l,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){let t=this.x,i=this.y,n=this.z,r=e.elements;return this.x=r[0]*t+r[4]*i+r[8]*n,this.y=r[1]*t+r[5]*i+r[9]*n,this.z=r[2]*t+r[6]*i+r[10]*n,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=w(this.x,e.x,t.x),this.y=w(this.y,e.y,t.y),this.z=w(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=w(this.x,e,t),this.y=w(this.y,e,t),this.z=w(this.z,e,t),this}clampLength(e,t){let i=this.length();return this.divideScalar(i||1).multiplyScalar(w(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){let i=e.x,n=e.y,r=e.z,a=t.x,s=t.y,o=t.z;return this.x=n*o-r*s,this.y=r*a-i*o,this.z=i*s-n*a,this}projectOnVector(e){let t=e.lengthSq();if(0===t)return this.set(0,0,0);let i=e.dot(this)/t;return this.copy(e).multiplyScalar(i)}projectOnPlane(e){return ee.copy(this).projectOnVector(e),this.sub(ee)}reflect(e){return this.sub(ee.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){let t=Math.sqrt(this.lengthSq()*e.lengthSq());return 0===t?Math.PI/2:Math.acos(w(this.dot(e)/t,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){let t=this.x-e.x,i=this.y-e.y,n=this.z-e.z;return t*t+i*i+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,i){let n=Math.sin(t)*e;return this.x=n*Math.sin(i),this.y=Math.cos(t)*e,this.z=n*Math.cos(i),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,i){return this.x=e*Math.sin(t),this.y=i,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){let t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){let t=this.setFromMatrixColumn(e,0).length(),i=this.setFromMatrixColumn(e,1).length(),n=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=i,this.z=n,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,4*t)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,3*t)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){let e=Math.random()*Math.PI*2,t=2*Math.random()-1,i=Math.sqrt(1-t*t);return this.x=i*Math.cos(e),this.y=t,this.z=i*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const ee=new Q,et=new $;class ei{constructor(e=new Q(1/0,1/0,1/0),t=new Q(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t+=3)this.expandByPoint(er.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,i=e.count;t<i;t++)this.expandByPoint(er.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){let i=er.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);let i=e.geometry;if(void 0!==i){let n=i.getAttribute("position");if(!0===t&&void 0!==n&&!0!==e.isInstancedMesh)for(let t=0,i=n.count;t<i;t++)!0===e.isMesh?e.getVertexPosition(t,er):er.fromBufferAttribute(n,t),er.applyMatrix4(e.matrixWorld),this.expandByPoint(er);else void 0!==e.boundingBox?(null===e.boundingBox&&e.computeBoundingBox(),ea.copy(e.boundingBox)):(null===i.boundingBox&&i.computeBoundingBox(),ea.copy(i.boundingBox)),ea.applyMatrix4(e.matrixWorld),this.union(ea)}let n=e.children;for(let e=0,i=n.length;e<i;e++)this.expandByObject(n[e],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,er),er.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,i;return e.normal.x>0?(t=e.normal.x*this.min.x,i=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,i=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,i+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,i+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,i+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,i+=e.normal.z*this.min.z),t<=-e.constant&&i>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(eu),ed.subVectors(this.max,eu),es.subVectors(e.a,eu),eo.subVectors(e.b,eu),el.subVectors(e.c,eu),eh.subVectors(eo,es),ec.subVectors(el,eo),eq.subVectors(es,el);let t=[0,-eh.z,eh.y,0,-ec.z,ec.y,0,-eq.z,eq.y,eh.z,0,-eh.x,ec.z,0,-ec.x,eq.z,0,-eq.x,-eh.y,eh.x,0,-ec.y,ec.x,0,-eq.y,eq.x,0];return!!(ef(t,es,eo,el,ed)&&ef(t=[1,0,0,0,1,0,0,0,1],es,eo,el,ed))&&(em.crossVectors(eh,ec),ef(t=[em.x,em.y,em.z],es,eo,el,ed))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,er).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=.5*this.getSize(er).length()),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()||(en[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),en[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),en[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),en[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),en[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),en[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),en[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),en[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(en)),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const en=[new Q,new Q,new Q,new Q,new Q,new Q,new Q,new Q],er=new Q,ea=new ei,es=new Q,eo=new Q,el=new Q,eh=new Q,ec=new Q,eq=new Q,eu=new Q,ed=new Q,em=new Q,ep=new Q;function ef(e,t,i,n,r){for(let a=0,s=e.length-3;a<=s;a+=3){ep.fromArray(e,a);let s=r.x*Math.abs(ep.x)+r.y*Math.abs(ep.y)+r.z*Math.abs(ep.z),o=t.dot(ep),l=i.dot(ep),h=n.dot(ep);if(Math.max(-Math.max(o,l,h),Math.min(o,l,h))>s)return!1}return!0}const e_=new ei,eg=new Q,ex=new Q;class ev{constructor(e=new Q,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){let i=this.center;void 0!==t?i.copy(t):e_.setFromPoints(e).getCenter(i);let n=0;for(let t=0,r=e.length;t<r;t++)n=Math.max(n,i.distanceToSquared(e[t]));return this.radius=Math.sqrt(n),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){let t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){let i=this.center.distanceToSquared(e);return t.copy(e),i>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?e.makeEmpty():(e.set(this.center,this.center),e.expandByScalar(this.radius)),e}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;eg.subVectors(e,this.center);let t=eg.lengthSq();if(t>this.radius*this.radius){let e=Math.sqrt(t),i=(e-this.radius)*.5;this.center.addScaledVector(eg,i/e),this.radius+=i}return this}union(e){return e.isEmpty()||(this.isEmpty()?this.copy(e):!0===this.center.equals(e.center)?this.radius=Math.max(this.radius,e.radius):(ex.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(eg.copy(e.center).add(ex)),this.expandByPoint(eg.copy(e.center).sub(ex)))),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const ey=new Q,eM=new Q,eS=new Q,eE=new Q,eT=new Q,eb=new Q,ew=new Q;class eA{constructor(e=new Q,t=new Q(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,ey)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);let i=t.dot(this.direction);return i<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){let t=ey.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ey.copy(this.origin).addScaledVector(this.direction,t),ey.distanceToSquared(e))}distanceSqToSegment(e,t,i,n){let r,a,s,o;eM.copy(e).add(t).multiplyScalar(.5),eS.copy(t).sub(e).normalize(),eE.copy(this.origin).sub(eM);let l=.5*e.distanceTo(t),h=-this.direction.dot(eS),c=eE.dot(this.direction),q=-eE.dot(eS),u=eE.lengthSq(),d=Math.abs(1-h*h);if(d>0){if(r=h*q-c,a=h*c-q,o=l*d,r>=0){if(a>=-o){if(a<=o){let e=1/d;r*=e,a*=e,s=r*(r+h*a+2*c)+a*(h*r+a+2*q)+u}else s=-(r=Math.max(0,-(h*(a=l)+c)))*r+a*(a+2*q)+u}else s=-(r=Math.max(0,-(h*(a=-l)+c)))*r+a*(a+2*q)+u}else a<=-o?(a=(r=Math.max(0,-(-h*l+c)))>0?-l:Math.min(Math.max(-l,-q),l),s=-r*r+a*(a+2*q)+u):a<=o?(r=0,s=(a=Math.min(Math.max(-l,-q),l))*(a+2*q)+u):(a=(r=Math.max(0,-(h*l+c)))>0?l:Math.min(Math.max(-l,-q),l),s=-r*r+a*(a+2*q)+u)}else a=h>0?-l:l,s=-(r=Math.max(0,-(h*a+c)))*r+a*(a+2*q)+u;return i&&i.copy(this.origin).addScaledVector(this.direction,r),n&&n.copy(eM).addScaledVector(eS,a),s}intersectSphere(e,t){ey.subVectors(e.center,this.origin);let i=ey.dot(this.direction),n=ey.dot(ey)-i*i,r=e.radius*e.radius;if(n>r)return null;let a=Math.sqrt(r-n),s=i-a,o=i+a;return o<0?null:s<0?this.at(o,t):this.at(s,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){let t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;let i=-(this.origin.dot(e.normal)+e.constant)/t;return i>=0?i:null}intersectPlane(e,t){let i=this.distanceToPlane(e);return null===i?null:this.at(i,t)}intersectsPlane(e){let t=e.distanceToPoint(this.origin);return!!(0===t||e.normal.dot(this.direction)*t<0)}intersectBox(e,t){let i,n,r,a,s,o;let l=1/this.direction.x,h=1/this.direction.y,c=1/this.direction.z,q=this.origin;return(l>=0?(i=(e.min.x-q.x)*l,n=(e.max.x-q.x)*l):(i=(e.max.x-q.x)*l,n=(e.min.x-q.x)*l),h>=0?(r=(e.min.y-q.y)*h,a=(e.max.y-q.y)*h):(r=(e.max.y-q.y)*h,a=(e.min.y-q.y)*h),i>a||r>n)?null:((r>i||isNaN(i))&&(i=r),(a<n||isNaN(n))&&(n=a),c>=0?(s=(e.min.z-q.z)*c,o=(e.max.z-q.z)*c):(s=(e.max.z-q.z)*c,o=(e.min.z-q.z)*c),i>o||s>n)?null:((s>i||i!=i)&&(i=s),(o<n||n!=n)&&(n=o),n<0)?null:this.at(i>=0?i:n,t)}intersectsBox(e){return null!==this.intersectBox(e,ey)}intersectTriangle(e,t,i,n,r){let a;eT.subVectors(t,e),eb.subVectors(i,e),ew.crossVectors(eT,eb);let s=this.direction.dot(ew);if(s>0){if(n)return null;a=1}else{if(!(s<0))return null;a=-1,s=-s}eE.subVectors(this.origin,e);let o=a*this.direction.dot(eb.crossVectors(eE,eb));if(o<0)return null;let l=a*this.direction.dot(eT.cross(eE));if(l<0||o+l>s)return null;let h=-a*eE.dot(ew);return h<0?null:this.at(h/s,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class eR{constructor(e,t,i,n,r,a,s,o,l,h,c,q,u,d,m,p){eR.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==e&&this.set(e,t,i,n,r,a,s,o,l,h,c,q,u,d,m,p)}set(e,t,i,n,r,a,s,o,l,h,c,q,u,d,m,p){let f=this.elements;return f[0]=e,f[4]=t,f[8]=i,f[12]=n,f[1]=r,f[5]=a,f[9]=s,f[13]=o,f[2]=l,f[6]=h,f[10]=c,f[14]=q,f[3]=u,f[7]=d,f[11]=m,f[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new eR().fromArray(this.elements)}copy(e){let t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],t[9]=i[9],t[10]=i[10],t[11]=i[11],t[12]=i[12],t[13]=i[13],t[14]=i[14],t[15]=i[15],this}copyPosition(e){let t=this.elements,i=e.elements;return t[12]=i[12],t[13]=i[13],t[14]=i[14],this}setFromMatrix3(e){let t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,i){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(e,t,i){return this.set(e.x,t.x,i.x,0,e.y,t.y,i.y,0,e.z,t.z,i.z,0,0,0,0,1),this}extractRotation(e){let t=this.elements,i=e.elements,n=1/eC.setFromMatrixColumn(e,0).length(),r=1/eC.setFromMatrixColumn(e,1).length(),a=1/eC.setFromMatrixColumn(e,2).length();return t[0]=i[0]*n,t[1]=i[1]*n,t[2]=i[2]*n,t[3]=0,t[4]=i[4]*r,t[5]=i[5]*r,t[6]=i[6]*r,t[7]=0,t[8]=i[8]*a,t[9]=i[9]*a,t[10]=i[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){let t=this.elements,i=e.x,n=e.y,r=e.z,a=Math.cos(i),s=Math.sin(i),o=Math.cos(n),l=Math.sin(n),h=Math.cos(r),c=Math.sin(r);if("XYZ"===e.order){let e=a*h,i=a*c,n=s*h,r=s*c;t[0]=o*h,t[4]=-o*c,t[8]=l,t[1]=i+n*l,t[5]=e-r*l,t[9]=-s*o,t[2]=r-e*l,t[6]=n+i*l,t[10]=a*o}else if("YXZ"===e.order){let e=o*h,i=o*c,n=l*h,r=l*c;t[0]=e+r*s,t[4]=n*s-i,t[8]=a*l,t[1]=a*c,t[5]=a*h,t[9]=-s,t[2]=i*s-n,t[6]=r+e*s,t[10]=a*o}else if("ZXY"===e.order){let e=o*h,i=o*c,n=l*h,r=l*c;t[0]=e-r*s,t[4]=-a*c,t[8]=n+i*s,t[1]=i+n*s,t[5]=a*h,t[9]=r-e*s,t[2]=-a*l,t[6]=s,t[10]=a*o}else if("ZYX"===e.order){let e=a*h,i=a*c,n=s*h,r=s*c;t[0]=o*h,t[4]=n*l-i,t[8]=e*l+r,t[1]=o*c,t[5]=r*l+e,t[9]=i*l-n,t[2]=-l,t[6]=s*o,t[10]=a*o}else if("YZX"===e.order){let e=a*o,i=a*l,n=s*o,r=s*l;t[0]=o*h,t[4]=r-e*c,t[8]=n*c+i,t[1]=c,t[5]=a*h,t[9]=-s*h,t[2]=-l*h,t[6]=i*c+n,t[10]=e-r*c}else if("XZY"===e.order){let e=a*o,i=a*l,n=s*o,r=s*l;t[0]=o*h,t[4]=-c,t[8]=l*h,t[1]=e*c+r,t[5]=a*h,t[9]=i*c-n,t[2]=n*c-i,t[6]=s*h,t[10]=r*c+e}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(eL,e,eD)}lookAt(e,t,i){let n=this.elements;return eI.subVectors(e,t),0===eI.lengthSq()&&(eI.z=1),eI.normalize(),eU.crossVectors(i,eI),0===eU.lengthSq()&&(1===Math.abs(i.z)?eI.x+=1e-4:eI.z+=1e-4,eI.normalize(),eU.crossVectors(i,eI)),eU.normalize(),eN.crossVectors(eI,eU),n[0]=eU.x,n[4]=eN.x,n[8]=eI.x,n[1]=eU.y,n[5]=eN.y,n[9]=eI.y,n[2]=eU.z,n[6]=eN.z,n[10]=eI.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){let i=e.elements,n=t.elements,r=this.elements,a=i[0],s=i[4],o=i[8],l=i[12],h=i[1],c=i[5],q=i[9],u=i[13],d=i[2],m=i[6],p=i[10],f=i[14],_=i[3],g=i[7],x=i[11],v=i[15],y=n[0],M=n[4],S=n[8],E=n[12],T=n[1],b=n[5],w=n[9],A=n[13],R=n[2],C=n[6],P=n[10],L=n[14],D=n[3],U=n[7],N=n[11],I=n[15];return r[0]=a*y+s*T+o*R+l*D,r[4]=a*M+s*b+o*C+l*U,r[8]=a*S+s*w+o*P+l*N,r[12]=a*E+s*A+o*L+l*I,r[1]=h*y+c*T+q*R+u*D,r[5]=h*M+c*b+q*C+u*U,r[9]=h*S+c*w+q*P+u*N,r[13]=h*E+c*A+q*L+u*I,r[2]=d*y+m*T+p*R+f*D,r[6]=d*M+m*b+p*C+f*U,r[10]=d*S+m*w+p*P+f*N,r[14]=d*E+m*A+p*L+f*I,r[3]=_*y+g*T+x*R+v*D,r[7]=_*M+g*b+x*C+v*U,r[11]=_*S+g*w+x*P+v*N,r[15]=_*E+g*A+x*L+v*I,this}multiplyScalar(e){let t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){let e=this.elements,t=e[0],i=e[4],n=e[8],r=e[12],a=e[1],s=e[5],o=e[9],l=e[13],h=e[2],c=e[6],q=e[10],u=e[14],d=e[3];return d*(+r*o*c-n*l*c-r*s*q+i*l*q+n*s*u-i*o*u)+e[7]*(+t*o*u-t*l*q+r*a*q-n*a*u+n*l*h-r*o*h)+e[11]*(+t*l*c-t*s*u-r*a*c+i*a*u+r*s*h-i*l*h)+e[15]*(-n*s*h-t*o*c+t*s*q+n*a*c-i*a*q+i*o*h)}transpose(){let e;let t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(e,t,i){let n=this.elements;return e.isVector3?(n[12]=e.x,n[13]=e.y,n[14]=e.z):(n[12]=e,n[13]=t,n[14]=i),this}invert(){let e=this.elements,t=e[0],i=e[1],n=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],h=e[8],c=e[9],q=e[10],u=e[11],d=e[12],m=e[13],p=e[14],f=e[15],_=c*p*l-m*q*l+m*o*u-s*p*u-c*o*f+s*q*f,g=d*q*l-h*p*l-d*o*u+a*p*u+h*o*f-a*q*f,x=h*m*l-d*c*l+d*s*u-a*m*u-h*s*f+a*c*f,v=d*c*o-h*m*o-d*s*q+a*m*q+h*s*p-a*c*p,y=t*_+i*g+n*x+r*v;if(0===y)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);let M=1/y;return e[0]=_*M,e[1]=(m*q*r-c*p*r-m*n*u+i*p*u+c*n*f-i*q*f)*M,e[2]=(s*p*r-m*o*r+m*n*l-i*p*l-s*n*f+i*o*f)*M,e[3]=(c*o*r-s*q*r-c*n*l+i*q*l+s*n*u-i*o*u)*M,e[4]=g*M,e[5]=(h*p*r-d*q*r+d*n*u-t*p*u-h*n*f+t*q*f)*M,e[6]=(d*o*r-a*p*r-d*n*l+t*p*l+a*n*f-t*o*f)*M,e[7]=(a*q*r-h*o*r+h*n*l-t*q*l-a*n*u+t*o*u)*M,e[8]=x*M,e[9]=(d*c*r-h*m*r-d*i*u+t*m*u+h*i*f-t*c*f)*M,e[10]=(a*m*r-d*s*r+d*i*l-t*m*l-a*i*f+t*s*f)*M,e[11]=(h*s*r-a*c*r-h*i*l+t*c*l+a*i*u-t*s*u)*M,e[12]=v*M,e[13]=(h*m*n-d*c*n+d*i*q-t*m*q-h*i*p+t*c*p)*M,e[14]=(d*s*n-a*m*n-d*i*o+t*m*o+a*i*p-t*s*p)*M,e[15]=(a*c*n-h*s*n+h*i*o-t*c*o-a*i*q+t*s*q)*M,this}scale(e){let t=this.elements,i=e.x,n=e.y,r=e.z;return t[0]*=i,t[4]*=n,t[8]*=r,t[1]*=i,t[5]*=n,t[9]*=r,t[2]*=i,t[6]*=n,t[10]*=r,t[3]*=i,t[7]*=n,t[11]*=r,this}getMaxScaleOnAxis(){let e=this.elements;return Math.sqrt(Math.max(e[0]*e[0]+e[1]*e[1]+e[2]*e[2],e[4]*e[4]+e[5]*e[5]+e[6]*e[6],e[8]*e[8]+e[9]*e[9]+e[10]*e[10]))}makeTranslation(e,t,i){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,i,0,0,0,1),this}makeRotationX(e){let t=Math.cos(e),i=Math.sin(e);return this.set(1,0,0,0,0,t,-i,0,0,i,t,0,0,0,0,1),this}makeRotationY(e){let t=Math.cos(e),i=Math.sin(e);return this.set(t,0,i,0,0,1,0,0,-i,0,t,0,0,0,0,1),this}makeRotationZ(e){let t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,0,i,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){let i=Math.cos(t),n=Math.sin(t),r=1-i,a=e.x,s=e.y,o=e.z,l=r*a,h=r*s;return this.set(l*a+i,l*s-n*o,l*o+n*s,0,l*s+n*o,h*s+i,h*o-n*a,0,l*o-n*s,h*o+n*a,r*o*o+i,0,0,0,0,1),this}makeScale(e,t,i){return this.set(e,0,0,0,0,t,0,0,0,0,i,0,0,0,0,1),this}makeShear(e,t,i,n,r,a){return this.set(1,i,r,0,e,1,a,0,t,n,1,0,0,0,0,1),this}compose(e,t,i){let n=this.elements,r=t._x,a=t._y,s=t._z,o=t._w,l=r+r,h=a+a,c=s+s,q=r*l,u=r*h,d=r*c,m=a*h,p=a*c,f=s*c,_=o*l,g=o*h,x=o*c,v=i.x,y=i.y,M=i.z;return n[0]=(1-(m+f))*v,n[1]=(u+x)*v,n[2]=(d-g)*v,n[3]=0,n[4]=(u-x)*y,n[5]=(1-(q+f))*y,n[6]=(p+_)*y,n[7]=0,n[8]=(d+g)*M,n[9]=(p-_)*M,n[10]=(1-(q+m))*M,n[11]=0,n[12]=e.x,n[13]=e.y,n[14]=e.z,n[15]=1,this}decompose(e,t,i){let n=this.elements,r=eC.set(n[0],n[1],n[2]).length(),a=eC.set(n[4],n[5],n[6]).length(),s=eC.set(n[8],n[9],n[10]).length();0>this.determinant()&&(r=-r),e.x=n[12],e.y=n[13],e.z=n[14],eP.copy(this);let o=1/r,l=1/a,h=1/s;return eP.elements[0]*=o,eP.elements[1]*=o,eP.elements[2]*=o,eP.elements[4]*=l,eP.elements[5]*=l,eP.elements[6]*=l,eP.elements[8]*=h,eP.elements[9]*=h,eP.elements[10]*=h,t.setFromRotationMatrix(eP),i.x=r,i.y=a,i.z=s,this}makePerspective(e,t,i,n,r,a,s=2e3){let o,l;let h=this.elements;if(2e3===s)o=-(a+r)/(a-r),l=-2*a*r/(a-r);else if(2001===s)o=-a/(a-r),l=-a*r/(a-r);else throw Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+s);return h[0]=2*r/(t-e),h[4]=0,h[8]=(t+e)/(t-e),h[12]=0,h[1]=0,h[5]=2*r/(i-n),h[9]=(i+n)/(i-n),h[13]=0,h[2]=0,h[6]=0,h[10]=o,h[14]=l,h[3]=0,h[7]=0,h[11]=-1,h[15]=0,this}makeOrthographic(e,t,i,n,r,a,s=2e3){let o,l;let h=this.elements,c=1/(t-e),q=1/(i-n),u=1/(a-r);if(2e3===s)o=(a+r)*u,l=-2*u;else if(2001===s)o=r*u,l=-1*u;else throw Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+s);return h[0]=2*c,h[4]=0,h[8]=0,h[12]=-((t+e)*c),h[1]=0,h[5]=2*q,h[9]=0,h[13]=-((i+n)*q),h[2]=0,h[6]=0,h[10]=l,h[14]=-o,h[3]=0,h[7]=0,h[11]=0,h[15]=1,this}equals(e){let t=this.elements,i=e.elements;for(let e=0;e<16;e++)if(t[e]!==i[e])return!1;return!0}fromArray(e,t=0){for(let i=0;i<16;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){let i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e[t+9]=i[9],e[t+10]=i[10],e[t+11]=i[11],e[t+12]=i[12],e[t+13]=i[13],e[t+14]=i[14],e[t+15]=i[15],e}}const eC=new Q,eP=new eR,eL=new Q(0,0,0),eD=new Q(1,1,1),eU=new Q,eN=new Q,eI=new Q,eO=new eR,ez=new $;class eF{constructor(e=0,t=0,i=0,n=eF.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=i,this._order=n}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,i,n=this._order){return this._x=e,this._y=t,this._z=i,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,i=!0){let n=e.elements,r=n[0],a=n[4],s=n[8],o=n[1],l=n[5],h=n[9],c=n[2],q=n[6],u=n[10];switch(t){case"XYZ":this._y=Math.asin(w(s,-1,1)),.9999999>Math.abs(s)?(this._x=Math.atan2(-h,u),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(q,l),this._z=0);break;case"YXZ":this._x=Math.asin(-w(h,-1,1)),.9999999>Math.abs(h)?(this._y=Math.atan2(s,u),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-c,r),this._z=0);break;case"ZXY":this._x=Math.asin(w(q,-1,1)),.9999999>Math.abs(q)?(this._y=Math.atan2(-c,u),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-w(c,-1,1)),.9999999>Math.abs(c)?(this._x=Math.atan2(q,u),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-a,l));break;case"YZX":this._z=Math.asin(w(o,-1,1)),.9999999>Math.abs(o)?(this._x=Math.atan2(-h,l),this._y=Math.atan2(-c,r)):(this._x=0,this._y=Math.atan2(s,u));break;case"XZY":this._z=Math.asin(-w(a,-1,1)),.9999999>Math.abs(a)?(this._x=Math.atan2(q,l),this._y=Math.atan2(s,r)):(this._x=Math.atan2(-h,u),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,!0===i&&this._onChangeCallback(),this}setFromQuaternion(e,t,i){return eO.makeRotationFromQuaternion(e),this.setFromRotationMatrix(eO,t,i)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return ez.setFromEuler(this),this.setFromQuaternion(ez,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}eF.DEFAULT_ORDER="XYZ";class eB{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!=0}isEnabled(e){return(this.mask&(1<<e|0))!=0}}let eH=0;const eV=new Q,ek=new $,eG=new eR,eW=new Q,eX=new Q,ej=new Q,eY=new $,eZ=new Q(1,0,0),eK=new Q(0,1,0),eJ=new Q(0,0,1),e$={type:"added"},eQ={type:"removed"},e1={type:"childadded",child:null},e2={type:"childremoved",child:null};class e3 extends M{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:eH++}),this.uuid=b(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=e3.DEFAULT_UP.clone();let e=new Q,t=new eF,i=new $,n=new Q(1,1,1);t._onChange(function(){i.setFromEuler(t,!1)}),i._onChange(function(){t.setFromQuaternion(i,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new eR},normalMatrix:{value:new P}}),this.matrix=new eR,this.matrixWorld=new eR,this.matrixAutoUpdate=e3.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=e3.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new eB,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return ek.setFromAxisAngle(e,t),this.quaternion.multiply(ek),this}rotateOnWorldAxis(e,t){return ek.setFromAxisAngle(e,t),this.quaternion.premultiply(ek),this}rotateX(e){return this.rotateOnAxis(eZ,e)}rotateY(e){return this.rotateOnAxis(eK,e)}rotateZ(e){return this.rotateOnAxis(eJ,e)}translateOnAxis(e,t){return eV.copy(e).applyQuaternion(this.quaternion),this.position.add(eV.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(eZ,e)}translateY(e){return this.translateOnAxis(eK,e)}translateZ(e){return this.translateOnAxis(eJ,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(eG.copy(this.matrixWorld).invert())}lookAt(e,t,i){e.isVector3?eW.copy(e):eW.set(e,t,i);let n=this.parent;this.updateWorldMatrix(!0,!1),eX.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?eG.lookAt(eX,eW,this.up):eG.lookAt(eW,eX,this.up),this.quaternion.setFromRotationMatrix(eG),n&&(eG.extractRotation(n.matrixWorld),ek.setFromRotationMatrix(eG),this.quaternion.premultiply(ek.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this?console.error("THREE.Object3D.add: object can't be added as a child of itself.",e):e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(e$),e1.child=e,this.dispatchEvent(e1),e1.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}let t=this.children.indexOf(e);return -1!==t&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(eQ),e2.child=e,this.dispatchEvent(e2),e2.child=null),this}removeFromParent(){let e=this.parent;return null!==e&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),eG.copy(this.matrixWorld).invert(),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),eG.multiply(e.parent.matrixWorld)),e.applyMatrix4(eG),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(e$),e1.child=e,this.dispatchEvent(e1),e1.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let i=0,n=this.children.length;i<n;i++){let n=this.children[i].getObjectByProperty(e,t);if(void 0!==n)return n}}getObjectsByProperty(e,t,i=[]){this[e]===t&&i.push(this);let n=this.children;for(let r=0,a=n.length;r<a;r++)n[r].getObjectsByProperty(e,t,i);return i}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(eX,e,ej),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(eX,eY,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);let t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);let t=this.children;for(let i=0,n=t.length;i<n;i++)t[i].traverse(e)}traverseVisible(e){if(!1===this.visible)return;e(this);let t=this.children;for(let i=0,n=t.length;i<n;i++)t[i].traverseVisible(e)}traverseAncestors(e){let t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);let t=this.children;for(let i=0,n=t.length;i<n;i++)t[i].updateMatrixWorld(e)}updateWorldMatrix(e,t){let i=this.parent;if(!0===e&&null!==i&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),!0===t){let e=this.children;for(let t=0,i=e.length;t<i;t++)e[t].updateWorldMatrix(!1,!0)}}toJSON(e){let t=void 0===e||"string"==typeof e,i={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});let n={};function r(t,i){return void 0===t[i.uuid]&&(t[i.uuid]=i.toJSON(e)),i.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),n.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(n.type="BatchedMesh",n.perObjectFrustumCulled=this.perObjectFrustumCulled,n.sortObjects=this.sortObjects,n.drawRanges=this._drawRanges,n.reservedRanges=this._reservedRanges,n.visibility=this._visibility,n.active=this._active,n.bounds=this._bounds.map(e=>({boxInitialized:e.boxInitialized,boxMin:e.box.min.toArray(),boxMax:e.box.max.toArray(),sphereInitialized:e.sphereInitialized,sphereRadius:e.sphere.radius,sphereCenter:e.sphere.center.toArray()})),n.maxInstanceCount=this._maxInstanceCount,n.maxVertexCount=this._maxVertexCount,n.maxIndexCount=this._maxIndexCount,n.geometryInitialized=this._geometryInitialized,n.geometryCount=this._geometryCount,n.matricesTexture=this._matricesTexture.toJSON(e),null!==this._colorsTexture&&(n.colorsTexture=this._colorsTexture.toJSON(e)),null!==this.boundingSphere&&(n.boundingSphere={center:n.boundingSphere.center.toArray(),radius:n.boundingSphere.radius}),null!==this.boundingBox&&(n.boundingBox={min:n.boundingBox.min.toArray(),max:n.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(n.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=r(e.geometries,this.geometry);let t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){let i=t.shapes;if(Array.isArray(i))for(let t=0,n=i.length;t<n;t++){let n=i[t];r(e.shapes,n)}else r(e.shapes,i)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(e.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material){if(Array.isArray(this.material)){let t=[];for(let i=0,n=this.material.length;i<n;i++)t.push(r(e.materials,this.material[i]));n.material=t}else n.material=r(e.materials,this.material)}if(this.children.length>0){n.children=[];for(let t=0;t<this.children.length;t++)n.children.push(this.children[t].toJSON(e).object)}if(this.animations.length>0){n.animations=[];for(let t=0;t<this.animations.length;t++){let i=this.animations[t];n.animations.push(r(e.animations,i))}}if(t){let t=a(e.geometries),n=a(e.materials),r=a(e.textures),s=a(e.images),o=a(e.shapes),l=a(e.skeletons),h=a(e.animations),c=a(e.nodes);t.length>0&&(i.geometries=t),n.length>0&&(i.materials=n),r.length>0&&(i.textures=r),s.length>0&&(i.images=s),o.length>0&&(i.shapes=o),l.length>0&&(i.skeletons=l),h.length>0&&(i.animations=h),c.length>0&&(i.nodes=c)}return i.object=n,i;function a(e){let t=[];for(let i in e){let n=e[i];delete n.metadata,t.push(n)}return t}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(let t=0;t<e.children.length;t++){let i=e.children[t];this.add(i.clone())}return this}}e3.DEFAULT_UP=new Q(0,1,0),e3.DEFAULT_MATRIX_AUTO_UPDATE=!0,e3.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const e4=new Q,e6=new Q,e0=new Q,e5=new Q,e8=new Q,e7=new Q,e9=new Q,te=new Q,tt=new Q,ti=new Q,tn=new Y,tr=new Y,ta=new Y;class ts{constructor(e=new Q,t=new Q,i=new Q){this.a=e,this.b=t,this.c=i}static getNormal(e,t,i,n){n.subVectors(i,t),e4.subVectors(e,t),n.cross(e4);let r=n.lengthSq();return r>0?n.multiplyScalar(1/Math.sqrt(r)):n.set(0,0,0)}static getBarycoord(e,t,i,n,r){e4.subVectors(n,t),e6.subVectors(i,t),e0.subVectors(e,t);let a=e4.dot(e4),s=e4.dot(e6),o=e4.dot(e0),l=e6.dot(e6),h=e6.dot(e0),c=a*l-s*s;if(0===c)return r.set(0,0,0),null;let q=1/c,u=(l*o-s*h)*q,d=(a*h-s*o)*q;return r.set(1-u-d,d,u)}static containsPoint(e,t,i,n){return null!==this.getBarycoord(e,t,i,n,e5)&&e5.x>=0&&e5.y>=0&&e5.x+e5.y<=1}static getInterpolation(e,t,i,n,r,a,s,o){return null===this.getBarycoord(e,t,i,n,e5)?(o.x=0,o.y=0,"z"in o&&(o.z=0),"w"in o&&(o.w=0),null):(o.setScalar(0),o.addScaledVector(r,e5.x),o.addScaledVector(a,e5.y),o.addScaledVector(s,e5.z),o)}static getInterpolatedAttribute(e,t,i,n,r,a){return tn.setScalar(0),tr.setScalar(0),ta.setScalar(0),tn.fromBufferAttribute(e,t),tr.fromBufferAttribute(e,i),ta.fromBufferAttribute(e,n),a.setScalar(0),a.addScaledVector(tn,r.x),a.addScaledVector(tr,r.y),a.addScaledVector(ta,r.z),a}static isFrontFacing(e,t,i,n){return e4.subVectors(i,t),e6.subVectors(e,t),0>e4.cross(e6).dot(n)}set(e,t,i){return this.a.copy(e),this.b.copy(t),this.c.copy(i),this}setFromPointsAndIndices(e,t,i,n){return this.a.copy(e[t]),this.b.copy(e[i]),this.c.copy(e[n]),this}setFromAttributeAndIndices(e,t,i,n){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,i),this.c.fromBufferAttribute(e,n),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return e4.subVectors(this.c,this.b),e6.subVectors(this.a,this.b),.5*e4.cross(e6).length()}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return ts.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return ts.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,i,n,r){return ts.getInterpolation(e,this.a,this.b,this.c,t,i,n,r)}containsPoint(e){return ts.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return ts.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){let i,n;let r=this.a,a=this.b,s=this.c;e8.subVectors(a,r),e7.subVectors(s,r),te.subVectors(e,r);let o=e8.dot(te),l=e7.dot(te);if(o<=0&&l<=0)return t.copy(r);tt.subVectors(e,a);let h=e8.dot(tt),c=e7.dot(tt);if(h>=0&&c<=h)return t.copy(a);let q=o*c-h*l;if(q<=0&&o>=0&&h<=0)return i=o/(o-h),t.copy(r).addScaledVector(e8,i);ti.subVectors(e,s);let u=e8.dot(ti),d=e7.dot(ti);if(d>=0&&u<=d)return t.copy(s);let m=u*l-o*d;if(m<=0&&l>=0&&d<=0)return n=l/(l-d),t.copy(r).addScaledVector(e7,n);let p=h*d-u*c;if(p<=0&&c-h>=0&&u-d>=0)return e9.subVectors(s,a),n=(c-h)/(c-h+(u-d)),t.copy(a).addScaledVector(e9,n);let f=1/(p+m+q);return i=m*f,n=q*f,t.copy(r).addScaledVector(e8,i).addScaledVector(e7,n)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const to={aliceblue:0xf0f8ff,antiquewhite:0xfaebd7,aqua:65535,aquamarine:8388564,azure:0xf0ffff,beige:0xf5f5dc,bisque:0xffe4c4,black:0,blanchedalmond:0xffebcd,blue:255,blueviolet:9055202,brown:0xa52a2a,burlywood:0xdeb887,cadetblue:6266528,chartreuse:8388352,chocolate:0xd2691e,coral:0xff7f50,cornflowerblue:6591981,cornsilk:0xfff8dc,crimson:0xdc143c,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:0xb8860b,darkgray:0xa9a9a9,darkgreen:25600,darkgrey:0xa9a9a9,darkkhaki:0xbdb76b,darkmagenta:9109643,darkolivegreen:5597999,darkorange:0xff8c00,darkorchid:0x9932cc,darkred:9109504,darksalmon:0xe9967a,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:0xff1493,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:0xb22222,floralwhite:0xfffaf0,forestgreen:2263842,fuchsia:0xff00ff,gainsboro:0xdcdcdc,ghostwhite:0xf8f8ff,gold:0xffd700,goldenrod:0xdaa520,gray:8421504,green:32768,greenyellow:0xadff2f,grey:8421504,honeydew:0xf0fff0,hotpink:0xff69b4,indianred:0xcd5c5c,indigo:4915330,ivory:0xfffff0,khaki:0xf0e68c,lavender:0xe6e6fa,lavenderblush:0xfff0f5,lawngreen:8190976,lemonchiffon:0xfffacd,lightblue:0xadd8e6,lightcoral:0xf08080,lightcyan:0xe0ffff,lightgoldenrodyellow:0xfafad2,lightgray:0xd3d3d3,lightgreen:9498256,lightgrey:0xd3d3d3,lightpink:0xffb6c1,lightsalmon:0xffa07a,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:0xb0c4de,lightyellow:0xffffe0,lime:65280,limegreen:3329330,linen:0xfaf0e6,magenta:0xff00ff,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:0xba55d3,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:0xc71585,midnightblue:1644912,mintcream:0xf5fffa,mistyrose:0xffe4e1,moccasin:0xffe4b5,navajowhite:0xffdead,navy:128,oldlace:0xfdf5e6,olive:8421376,olivedrab:7048739,orange:0xffa500,orangered:0xff4500,orchid:0xda70d6,palegoldenrod:0xeee8aa,palegreen:0x98fb98,paleturquoise:0xafeeee,palevioletred:0xdb7093,papayawhip:0xffefd5,peachpuff:0xffdab9,peru:0xcd853f,pink:0xffc0cb,plum:0xdda0dd,powderblue:0xb0e0e6,purple:8388736,rebeccapurple:6697881,red:0xff0000,rosybrown:0xbc8f8f,royalblue:4286945,saddlebrown:9127187,salmon:0xfa8072,sandybrown:0xf4a460,seagreen:3050327,seashell:0xfff5ee,sienna:0xa0522d,silver:0xc0c0c0,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:0xfffafa,springgreen:65407,steelblue:4620980,tan:0xd2b48c,teal:32896,thistle:0xd8bfd8,tomato:0xff6347,turquoise:4251856,violet:0xee82ee,wheat:0xf5deb3,white:0xffffff,whitesmoke:0xf5f5f5,yellow:0xffff00,yellowgreen:0x9acd32},tl={h:0,s:0,l:0},th={h:0,s:0,l:0};function tc(e,t,i){return(i<0&&(i+=1),i>1&&(i-=1),i<1/6)?e+(t-e)*6*i:i<.5?t:i<2/3?e+(t-e)*6*(2/3-i):e}class tq{constructor(e,t,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,i)}set(e,t,i){return void 0===t&&void 0===i?e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e):this.setRGB(e,t,i),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=_){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,F.toWorkingColorSpace(this,t),this}setRGB(e,t,i,n=F.workingColorSpace){return this.r=e,this.g=t,this.b=i,F.toWorkingColorSpace(this,n),this}setHSL(e,t,i,n=F.workingColorSpace){if(e=(e%1+1)%1,t=w(t,0,1),i=w(i,0,1),0===t)this.r=this.g=this.b=i;else{let n=i<=.5?i*(1+t):i+t-i*t,r=2*i-n;this.r=tc(r,n,e+1/3),this.g=tc(r,n,e),this.b=tc(r,n,e-1/3)}return F.toWorkingColorSpace(this,n),this}setStyle(e,t=_){let i;function n(t){void 0!==t&&1>parseFloat(t)&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;let a=i[1],s=i[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){let n=i[1],r=n.length;if(3===r)return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,t);if(6===r)return this.setHex(parseInt(n,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=_){let i=to[e.toLowerCase()];return void 0!==i?this.setHex(i,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=B(e.r),this.g=B(e.g),this.b=B(e.b),this}copyLinearToSRGB(e){return this.r=H(e.r),this.g=H(e.g),this.b=H(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=_){return F.fromWorkingColorSpace(tu.copy(this),e),65536*Math.round(w(255*tu.r,0,255))+256*Math.round(w(255*tu.g,0,255))+Math.round(w(255*tu.b,0,255))}getHexString(e=_){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=F.workingColorSpace){let i,n;F.fromWorkingColorSpace(tu.copy(this),t);let r=tu.r,a=tu.g,s=tu.b,o=Math.max(r,a,s),l=Math.min(r,a,s),h=(l+o)/2;if(l===o)i=0,n=0;else{let e=o-l;switch(n=h<=.5?e/(o+l):e/(2-o-l),o){case r:i=(a-s)/e+6*(a<s);break;case a:i=(s-r)/e+2;break;case s:i=(r-a)/e+4}i/=6}return e.h=i,e.s=n,e.l=h,e}getRGB(e,t=F.workingColorSpace){return F.fromWorkingColorSpace(tu.copy(this),t),e.r=tu.r,e.g=tu.g,e.b=tu.b,e}getStyle(e=_){F.fromWorkingColorSpace(tu.copy(this),e);let t=tu.r,i=tu.g,n=tu.b;return e!==_?`color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${n.toFixed(3)})`:`rgb(${Math.round(255*t)},${Math.round(255*i)},${Math.round(255*n)})`}offsetHSL(e,t,i){return this.getHSL(tl),this.setHSL(tl.h+e,tl.s+t,tl.l+i)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,i){return this.r=e.r+(t.r-e.r)*i,this.g=e.g+(t.g-e.g)*i,this.b=e.b+(t.b-e.b)*i,this}lerpHSL(e,t){var i,n,r;this.getHSL(tl),e.getHSL(th);let a=(i=tl.h,(1-t)*i+t*th.h),s=(n=tl.s,(1-t)*n+t*th.s),o=(r=tl.l,(1-t)*r+t*th.l);return this.setHSL(a,s,o),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){let t=this.r,i=this.g,n=this.b,r=e.elements;return this.r=r[0]*t+r[3]*i+r[6]*n,this.g=r[1]*t+r[4]*i+r[7]*n,this.b=r[2]*t+r[5]*i+r[8]*n,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const tu=new tq;tq.NAMES=to;let td=0;class tm extends M{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:td++}),this.uuid=b(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new tq(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(void 0!==e)for(let t in e){let i=e[t];if(void 0===i){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}let n=this[t];if(void 0===n){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[t]=i}}toJSON(e){let t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});let i={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function n(e){let t=[];for(let i in e){let n=e[i];delete n.metadata,t.push(n)}return t}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),void 0!==this.sheen&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),void 0!==this.emissiveIntensity&&1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearcoat&&(i.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.dispersion&&(i.dispersion=this.dispersion),void 0!==this.iridescence&&(i.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(i.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),void 0!==this.anisotropy&&(i.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(e).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(e).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(e).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(e).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(e).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(e).uuid,void 0!==this.combine&&(i.combine=this.combine)),void 0!==this.envMapRotation&&(i.envMapRotation=this.envMapRotation.toArray()),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(i.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.transmission&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(e).uuid),void 0!==this.thickness&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(e).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(i.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(i.size=this.size),null!==this.shadowSide&&(i.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(i.blending=this.blending),0!==this.side&&(i.side=this.side),!0===this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=!0),204!==this.blendSrc&&(i.blendSrc=this.blendSrc),205!==this.blendDst&&(i.blendDst=this.blendDst),100!==this.blendEquation&&(i.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(i.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(i.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(i.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(i.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(i.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(i.depthFunc=this.depthFunc),!1===this.depthTest&&(i.depthTest=this.depthTest),!1===this.depthWrite&&(i.depthWrite=this.depthWrite),!1===this.colorWrite&&(i.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(i.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(i.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(i.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(i.stencilFuncMask=this.stencilFuncMask),7680!==this.stencilFail&&(i.stencilFail=this.stencilFail),7680!==this.stencilZFail&&(i.stencilZFail=this.stencilZFail),7680!==this.stencilZPass&&(i.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(i.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.alphaHash&&(i.alphaHash=!0),!0===this.alphaToCoverage&&(i.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=!0),!0===this.forceSinglePass&&(i.forceSinglePass=!0),!0===this.wireframe&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(i.flatShading=!0),!1===this.visible&&(i.visible=!1),!1===this.toneMapped&&(i.toneMapped=!1),!1===this.fog&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData),t){let t=n(e.textures),r=n(e.images);t.length>0&&(i.textures=t),r.length>0&&(i.images=r)}return i}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;let t=e.clippingPlanes,i=null;if(null!==t){let e=t.length;i=Array(e);for(let n=0;n!==e;++n)i[n]=t[n].clone()}return this.clippingPlanes=i,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class tp extends tm{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new tq(0xffffff),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new eF,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const tf=new Q,t_=new C;let tg=0;class tx{constructor(e,t,i=!1){if(Array.isArray(e))throw TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:tg++}),this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=i,this.usage=35044,this.updateRanges=[],this.gpuType=1015,this.version=0}onUploadCallback(){}set needsUpdate(e){!0===e&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,i){e*=this.itemSize,i*=t.itemSize;for(let n=0,r=this.itemSize;n<r;n++)this.array[e+n]=t.array[i+n];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(2===this.itemSize)for(let t=0,i=this.count;t<i;t++)t_.fromBufferAttribute(this,t),t_.applyMatrix3(e),this.setXY(t,t_.x,t_.y);else if(3===this.itemSize)for(let t=0,i=this.count;t<i;t++)tf.fromBufferAttribute(this,t),tf.applyMatrix3(e),this.setXYZ(t,tf.x,tf.y,tf.z);return this}applyMatrix4(e){for(let t=0,i=this.count;t<i;t++)tf.fromBufferAttribute(this,t),tf.applyMatrix4(e),this.setXYZ(t,tf.x,tf.y,tf.z);return this}applyNormalMatrix(e){for(let t=0,i=this.count;t<i;t++)tf.fromBufferAttribute(this,t),tf.applyNormalMatrix(e),this.setXYZ(t,tf.x,tf.y,tf.z);return this}transformDirection(e){for(let t=0,i=this.count;t<i;t++)tf.fromBufferAttribute(this,t),tf.transformDirection(e),this.setXYZ(t,tf.x,tf.y,tf.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let i=this.array[e*this.itemSize+t];return this.normalized&&(i=A(i,this.array)),i}setComponent(e,t,i){return this.normalized&&(i=R(i,this.array)),this.array[e*this.itemSize+t]=i,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=A(t,this.array)),t}setX(e,t){return this.normalized&&(t=R(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=A(t,this.array)),t}setY(e,t){return this.normalized&&(t=R(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=A(t,this.array)),t}setZ(e,t){return this.normalized&&(t=R(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=A(t,this.array)),t}setW(e,t){return this.normalized&&(t=R(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,i){return e*=this.itemSize,this.normalized&&(t=R(t,this.array),i=R(i,this.array)),this.array[e+0]=t,this.array[e+1]=i,this}setXYZ(e,t,i,n){return e*=this.itemSize,this.normalized&&(t=R(t,this.array),i=R(i,this.array),n=R(n,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=n,this}setXYZW(e,t,i,n,r){return e*=this.itemSize,this.normalized&&(t=R(t,this.array),i=R(i,this.array),n=R(n,this.array),r=R(r,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=n,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){let e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(e.name=this.name),35044!==this.usage&&(e.usage=this.usage),e}}class tv extends tx{constructor(e,t,i){super(new Uint16Array(e),t,i)}}class ty extends tx{constructor(e,t,i){super(new Uint32Array(e),t,i)}}class tM extends tx{constructor(e,t,i){super(new Float32Array(e),t,i)}}let tS=0;const tE=new eR,tT=new e3,tb=new Q,tw=new ei,tA=new ei,tR=new Q;class tC extends M{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:tS++}),this.uuid=b(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(D(e)?ty:tv)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return void 0!==this.attributes[e]}addGroup(e,t,i=0){this.groups.push({start:e,count:t,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){let t=this.attributes.position;void 0!==t&&(t.applyMatrix4(e),t.needsUpdate=!0);let i=this.attributes.normal;if(void 0!==i){let t=new P().getNormalMatrix(e);i.applyNormalMatrix(t),i.needsUpdate=!0}let n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(e),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(e){return tE.makeRotationFromQuaternion(e),this.applyMatrix4(tE),this}rotateX(e){return tE.makeRotationX(e),this.applyMatrix4(tE),this}rotateY(e){return tE.makeRotationY(e),this.applyMatrix4(tE),this}rotateZ(e){return tE.makeRotationZ(e),this.applyMatrix4(tE),this}translate(e,t,i){return tE.makeTranslation(e,t,i),this.applyMatrix4(tE),this}scale(e,t,i){return tE.makeScale(e,t,i),this.applyMatrix4(tE),this}lookAt(e){return tT.lookAt(e),tT.updateMatrix(),this.applyMatrix4(tT.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(tb).negate(),this.translate(tb.x,tb.y,tb.z),this}setFromPoints(e){let t=this.getAttribute("position");if(void 0===t){let t=[];for(let i=0,n=e.length;i<n;i++){let n=e[i];t.push(n.x,n.y,n.z||0)}this.setAttribute("position",new tM(t,3))}else{let i=Math.min(e.length,t.count);for(let n=0;n<i;n++){let i=e[n];t.setXYZ(n,i.x,i.y,i.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new ei);let e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new Q(-1/0,-1/0,-1/0),new Q(1/0,1/0,1/0));return}if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(let e=0,i=t.length;e<i;e++){let i=t[e];tw.setFromBufferAttribute(i),this.morphTargetsRelative?(tR.addVectors(this.boundingBox.min,tw.min),this.boundingBox.expandByPoint(tR),tR.addVectors(this.boundingBox.max,tw.max),this.boundingBox.expandByPoint(tR)):(this.boundingBox.expandByPoint(tw.min),this.boundingBox.expandByPoint(tw.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new ev);let e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new Q,1/0);return}if(e){let i=this.boundingSphere.center;if(tw.setFromBufferAttribute(e),t)for(let e=0,i=t.length;e<i;e++){let i=t[e];tA.setFromBufferAttribute(i),this.morphTargetsRelative?(tR.addVectors(tw.min,tA.min),tw.expandByPoint(tR),tR.addVectors(tw.max,tA.max),tw.expandByPoint(tR)):(tw.expandByPoint(tA.min),tw.expandByPoint(tA.max))}tw.getCenter(i);let n=0;for(let t=0,r=e.count;t<r;t++)tR.fromBufferAttribute(e,t),n=Math.max(n,i.distanceToSquared(tR));if(t)for(let r=0,a=t.length;r<a;r++){let a=t[r],s=this.morphTargetsRelative;for(let t=0,r=a.count;t<r;t++)tR.fromBufferAttribute(a,t),s&&(tb.fromBufferAttribute(e,t),tR.add(tb)),n=Math.max(n,i.distanceToSquared(tR))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){let e=this.index,t=this.attributes;if(null===e||void 0===t.position||void 0===t.normal||void 0===t.uv){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}let i=t.position,n=t.normal,r=t.uv;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new tx(new Float32Array(4*i.count),4));let a=this.getAttribute("tangent"),s=[],o=[];for(let e=0;e<i.count;e++)s[e]=new Q,o[e]=new Q;let l=new Q,h=new Q,c=new Q,q=new C,u=new C,d=new C,m=new Q,p=new Q,f=this.groups;0===f.length&&(f=[{start:0,count:e.count}]);for(let t=0,n=f.length;t<n;++t){let n=f[t],a=n.start,_=n.count;for(let t=a,n=a+_;t<n;t+=3)!function(e,t,n){l.fromBufferAttribute(i,e),h.fromBufferAttribute(i,t),c.fromBufferAttribute(i,n),q.fromBufferAttribute(r,e),u.fromBufferAttribute(r,t),d.fromBufferAttribute(r,n),h.sub(l),c.sub(l),u.sub(q),d.sub(q);let a=1/(u.x*d.y-d.x*u.y);isFinite(a)&&(m.copy(h).multiplyScalar(d.y).addScaledVector(c,-u.y).multiplyScalar(a),p.copy(c).multiplyScalar(u.x).addScaledVector(h,-d.x).multiplyScalar(a),s[e].add(m),s[t].add(m),s[n].add(m),o[e].add(p),o[t].add(p),o[n].add(p))}(e.getX(t+0),e.getX(t+1),e.getX(t+2))}let _=new Q,g=new Q,x=new Q,v=new Q;function y(e){x.fromBufferAttribute(n,e),v.copy(x);let t=s[e];_.copy(t),_.sub(x.multiplyScalar(x.dot(t))).normalize(),g.crossVectors(v,t);let i=g.dot(o[e]);a.setXYZW(e,_.x,_.y,_.z,i<0?-1:1)}for(let t=0,i=f.length;t<i;++t){let i=f[t],n=i.start,r=i.count;for(let t=n,i=n+r;t<i;t+=3)y(e.getX(t+0)),y(e.getX(t+1)),y(e.getX(t+2))}}computeVertexNormals(){let e=this.index,t=this.getAttribute("position");if(void 0!==t){let i=this.getAttribute("normal");if(void 0===i)i=new tx(new Float32Array(3*t.count),3),this.setAttribute("normal",i);else for(let e=0,t=i.count;e<t;e++)i.setXYZ(e,0,0,0);let n=new Q,r=new Q,a=new Q,s=new Q,o=new Q,l=new Q,h=new Q,c=new Q;if(e)for(let q=0,u=e.count;q<u;q+=3){let u=e.getX(q+0),d=e.getX(q+1),m=e.getX(q+2);n.fromBufferAttribute(t,u),r.fromBufferAttribute(t,d),a.fromBufferAttribute(t,m),h.subVectors(a,r),c.subVectors(n,r),h.cross(c),s.fromBufferAttribute(i,u),o.fromBufferAttribute(i,d),l.fromBufferAttribute(i,m),s.add(h),o.add(h),l.add(h),i.setXYZ(u,s.x,s.y,s.z),i.setXYZ(d,o.x,o.y,o.z),i.setXYZ(m,l.x,l.y,l.z)}else for(let e=0,s=t.count;e<s;e+=3)n.fromBufferAttribute(t,e+0),r.fromBufferAttribute(t,e+1),a.fromBufferAttribute(t,e+2),h.subVectors(a,r),c.subVectors(n,r),h.cross(c),i.setXYZ(e+0,h.x,h.y,h.z),i.setXYZ(e+1,h.x,h.y,h.z),i.setXYZ(e+2,h.x,h.y,h.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){let e=this.attributes.normal;for(let t=0,i=e.count;t<i;t++)tR.fromBufferAttribute(e,t),tR.normalize(),e.setXYZ(t,tR.x,tR.y,tR.z)}toNonIndexed(){function e(e,t){let i=e.array,n=e.itemSize,r=e.normalized,a=new i.constructor(t.length*n),s=0,o=0;for(let r=0,l=t.length;r<l;r++){s=e.isInterleavedBufferAttribute?t[r]*e.data.stride+e.offset:t[r]*n;for(let e=0;e<n;e++)a[o++]=i[s++]}return new tx(a,n,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;let t=new tC,i=this.index.array,n=this.attributes;for(let r in n){let a=e(n[r],i);t.setAttribute(r,a)}let r=this.morphAttributes;for(let n in r){let a=[],s=r[n];for(let t=0,n=s.length;t<n;t++){let n=e(s[t],i);a.push(n)}t.morphAttributes[n]=a}t.morphTargetsRelative=this.morphTargetsRelative;let a=this.groups;for(let e=0,i=a.length;e<i;e++){let i=a[e];t.addGroup(i.start,i.count,i.materialIndex)}return t}toJSON(){let e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){let t=this.parameters;for(let i in t)void 0!==t[i]&&(e[i]=t[i]);return e}e.data={attributes:{}};let t=this.index;null!==t&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});let i=this.attributes;for(let t in i){let n=i[t];e.data.attributes[t]=n.toJSON(e.data)}let n={},r=!1;for(let t in this.morphAttributes){let i=this.morphAttributes[t],a=[];for(let t=0,n=i.length;t<n;t++){let n=i[t];a.push(n.toJSON(e.data))}a.length>0&&(n[t]=a,r=!0)}r&&(e.data.morphAttributes=n,e.data.morphTargetsRelative=this.morphTargetsRelative);let a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));let s=this.boundingSphere;return null!==s&&(e.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;let t={};this.name=e.name;let i=e.index;null!==i&&this.setIndex(i.clone(t));let n=e.attributes;for(let e in n){let i=n[e];this.setAttribute(e,i.clone(t))}let r=e.morphAttributes;for(let e in r){let i=[],n=r[e];for(let e=0,r=n.length;e<r;e++)i.push(n[e].clone(t));this.morphAttributes[e]=i}this.morphTargetsRelative=e.morphTargetsRelative;let a=e.groups;for(let e=0,t=a.length;e<t;e++){let t=a[e];this.addGroup(t.start,t.count,t.materialIndex)}let s=e.boundingBox;null!==s&&(this.boundingBox=s.clone());let o=e.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const tP=new eR,tL=new eA,tD=new ev,tU=new Q,tN=new Q,tI=new Q,tO=new Q,tz=new Q,tF=new Q,tB=new Q,tH=new Q;class tV extends e3{constructor(e=new tC,t=new tp){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){let e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){let i=e[t[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=i.length;e<t;e++){let t=i[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}getVertexPosition(e,t){let i=this.geometry,n=i.attributes.position,r=i.morphAttributes.position,a=i.morphTargetsRelative;t.fromBufferAttribute(n,e);let s=this.morphTargetInfluences;if(r&&s){tF.set(0,0,0);for(let i=0,n=r.length;i<n;i++){let n=s[i],o=r[i];0!==n&&(tz.fromBufferAttribute(o,e),a?tF.addScaledVector(tz,n):tF.addScaledVector(tz.sub(t),n))}t.add(tF)}return t}raycast(e,t){let i=this.geometry,n=this.material,r=this.matrixWorld;if(void 0!==n){if(null===i.boundingSphere&&i.computeBoundingSphere(),tD.copy(i.boundingSphere),tD.applyMatrix4(r),tL.copy(e.ray).recast(e.near),!1===tD.containsPoint(tL.origin)&&(null===tL.intersectSphere(tD,tU)||tL.origin.distanceToSquared(tU)>(e.far-e.near)**2)||(tP.copy(r).invert(),tL.copy(e.ray).applyMatrix4(tP),null!==i.boundingBox&&!1===tL.intersectsBox(i.boundingBox)))return;this._computeIntersections(e,t,tL)}}_computeIntersections(e,t,i){let n;let r=this.geometry,a=this.material,s=r.index,o=r.attributes.position,l=r.attributes.uv,h=r.attributes.uv1,c=r.attributes.normal,q=r.groups,u=r.drawRange;if(null!==s){if(Array.isArray(a))for(let r=0,o=q.length;r<o;r++){let o=q[r],d=a[o.materialIndex],m=Math.max(o.start,u.start),p=Math.min(s.count,Math.min(o.start+o.count,u.start+u.count));for(let r=m;r<p;r+=3)(n=tk(this,d,e,i,l,h,c,s.getX(r),s.getX(r+1),s.getX(r+2)))&&(n.faceIndex=Math.floor(r/3),n.face.materialIndex=o.materialIndex,t.push(n))}else{let r=Math.max(0,u.start),o=Math.min(s.count,u.start+u.count);for(let q=r;q<o;q+=3)(n=tk(this,a,e,i,l,h,c,s.getX(q),s.getX(q+1),s.getX(q+2)))&&(n.faceIndex=Math.floor(q/3),t.push(n))}}else if(void 0!==o){if(Array.isArray(a))for(let r=0,s=q.length;r<s;r++){let s=q[r],d=a[s.materialIndex],m=Math.max(s.start,u.start),p=Math.min(o.count,Math.min(s.start+s.count,u.start+u.count));for(let r=m;r<p;r+=3)(n=tk(this,d,e,i,l,h,c,r,r+1,r+2))&&(n.faceIndex=Math.floor(r/3),n.face.materialIndex=s.materialIndex,t.push(n))}else{let r=Math.max(0,u.start),s=Math.min(o.count,u.start+u.count);for(let o=r;o<s;o+=3)(n=tk(this,a,e,i,l,h,c,o,o+1,o+2))&&(n.faceIndex=Math.floor(o/3),t.push(n))}}}}function tk(e,t,i,n,r,a,s,o,l,h){e.getVertexPosition(o,tN),e.getVertexPosition(l,tI),e.getVertexPosition(h,tO);let c=function(e,t,i,n,r,a,s,o){if(null===(1===t.side?n.intersectTriangle(s,a,r,!0,o):n.intersectTriangle(r,a,s,0===t.side,o)))return null;tH.copy(o),tH.applyMatrix4(e.matrixWorld);let l=i.ray.origin.distanceTo(tH);return l<i.near||l>i.far?null:{distance:l,point:tH.clone(),object:e}}(e,t,i,n,tN,tI,tO,tB);if(c){let e=new Q;ts.getBarycoord(tB,tN,tI,tO,e),r&&(c.uv=ts.getInterpolatedAttribute(r,o,l,h,e,new C)),a&&(c.uv1=ts.getInterpolatedAttribute(a,o,l,h,e,new C)),s&&(c.normal=ts.getInterpolatedAttribute(s,o,l,h,e,new Q),c.normal.dot(n.direction)>0&&c.normal.multiplyScalar(-1));let t={a:o,b:l,c:h,normal:new Q,materialIndex:0};ts.getNormal(tN,tI,tO,t.normal),c.face=t,c.barycoord=e}return c}class tG extends tC{constructor(e=1,t=1,i=1,n=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:i,widthSegments:n,heightSegments:r,depthSegments:a};let s=this;n=Math.floor(n),r=Math.floor(r);let o=[],l=[],h=[],c=[],q=0,u=0;function d(e,t,i,n,r,a,d,m,p,f,_){let g=a/p,x=d/f,v=a/2,y=d/2,M=m/2,S=p+1,E=f+1,T=0,b=0,w=new Q;for(let a=0;a<E;a++){let s=a*x-y;for(let o=0;o<S;o++){let q=o*g-v;w[e]=q*n,w[t]=s*r,w[i]=M,l.push(w.x,w.y,w.z),w[e]=0,w[t]=0,w[i]=m>0?1:-1,h.push(w.x,w.y,w.z),c.push(o/p),c.push(1-a/f),T+=1}}for(let e=0;e<f;e++)for(let t=0;t<p;t++){let i=q+t+S*e,n=q+t+S*(e+1),r=q+(t+1)+S*(e+1),a=q+(t+1)+S*e;o.push(i,n,a),o.push(n,r,a),b+=6}s.addGroup(u,b,_),u+=b,q+=T}d("z","y","x",-1,-1,i,t,e,a=Math.floor(a),r,0),d("z","y","x",1,-1,i,t,-e,a,r,1),d("x","z","y",1,1,e,i,t,n,a,2),d("x","z","y",1,-1,e,i,-t,n,a,3),d("x","y","z",1,-1,e,t,i,n,r,4),d("x","y","z",-1,-1,e,t,-i,n,r,5),this.setIndex(o),this.setAttribute("position",new tM(l,3)),this.setAttribute("normal",new tM(h,3)),this.setAttribute("uv",new tM(c,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new tG(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function tW(e){let t={};for(let i in e)for(let n in t[i]={},e[i]){let r=e[i][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[i][n]=null):t[i][n]=r.clone():Array.isArray(r)?t[i][n]=r.slice():t[i][n]=r}return t}function tX(e){let t={};for(let i=0;i<e.length;i++){let n=tW(e[i]);for(let e in n)t[e]=n[e]}return t}function tj(e){let t=e.getRenderTarget();return null===t?e.outputColorSpace:!0===t.isXRRenderTarget?t.texture.colorSpace:F.workingColorSpace}const tY={clone:tW};class tZ extends tm{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==e&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=tW(e.uniforms),this.uniformsGroups=function(e){let t=[];for(let i=0;i<e.length;i++)t.push(e[i].clone());return t}(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){let t=super.toJSON(e);for(let i in t.glslVersion=this.glslVersion,t.uniforms={},this.uniforms){let n=this.uniforms[i].value;n&&n.isTexture?t.uniforms[i]={type:"t",value:n.toJSON(e).uuid}:n&&n.isColor?t.uniforms[i]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[i]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[i]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[i]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[i]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[i]={type:"m4",value:n.toArray()}:t.uniforms[i]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;let i={};for(let e in this.extensions)!0===this.extensions[e]&&(i[e]=!0);return Object.keys(i).length>0&&(t.extensions=i),t}}class tK extends e3{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new eR,this.projectionMatrix=new eR,this.projectionMatrixInverse=new eR,this.coordinateSystem=2e3}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const tJ=new Q,t$=new C,tQ=new C;class t1 extends tK{constructor(e=50,t=1,i=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=i,this.far=n,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){let t=.5*this.getFilmHeight()/e;this.fov=2*T*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){let e=Math.tan(.5*E*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return 2*T*Math.atan(Math.tan(.5*E*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,i){tJ.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(tJ.x,tJ.y).multiplyScalar(-e/tJ.z),tJ.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),i.set(tJ.x,tJ.y).multiplyScalar(-e/tJ.z)}getViewSize(e,t){return this.getViewBounds(e,t$,tQ),t.subVectors(tQ,t$)}setViewOffset(e,t,i,n,r,a){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){let e=this.near,t=e*Math.tan(.5*E*this.fov)/this.zoom,i=2*t,n=this.aspect*i,r=-.5*n,a=this.view;if(null!==this.view&&this.view.enabled){let e=a.fullWidth,s=a.fullHeight;r+=a.offsetX*n/e,t-=a.offsetY*i/s,n*=a.width/e,i*=a.height/s}let s=this.filmOffset;0!==s&&(r+=e*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+n,t,t-i,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){let t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}class t2 extends e3{constructor(e,t,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;let n=new t1(-90,1,e,t);n.layers=this.layers,this.add(n);let r=new t1(-90,1,e,t);r.layers=this.layers,this.add(r);let a=new t1(-90,1,e,t);a.layers=this.layers,this.add(a);let s=new t1(-90,1,e,t);s.layers=this.layers,this.add(s);let o=new t1(-90,1,e,t);o.layers=this.layers,this.add(o);let l=new t1(-90,1,e,t);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){let e=this.coordinateSystem,t=this.children.concat(),[i,n,r,a,s,o]=t;for(let e of t)this.remove(e);if(2e3===e)i.up.set(0,1,0),i.lookAt(1,0,0),n.up.set(0,1,0),n.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),s.up.set(0,1,0),s.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else if(2001===e)i.up.set(0,-1,0),i.lookAt(-1,0,0),n.up.set(0,-1,0),n.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),s.up.set(0,-1,0),s.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1);else throw Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(let e of t)this.add(e),e.updateMatrixWorld()}update(e,t){null===this.parent&&this.updateMatrixWorld();let{renderTarget:i,activeMipmapLevel:n}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());let[r,a,s,o,l,h]=this.children,c=e.getRenderTarget(),q=e.getActiveCubeFace(),u=e.getActiveMipmapLevel(),d=e.xr.enabled;e.xr.enabled=!1;let m=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,e.setRenderTarget(i,0,n),e.render(t,r),e.setRenderTarget(i,1,n),e.render(t,a),e.setRenderTarget(i,2,n),e.render(t,s),e.setRenderTarget(i,3,n),e.render(t,o),e.setRenderTarget(i,4,n),e.render(t,l),i.texture.generateMipmaps=m,e.setRenderTarget(i,5,n),e.render(t,h),e.setRenderTarget(c,q,u),e.xr.enabled=d,i.texture.needsPMREMUpdate=!0}}class t3 extends j{constructor(e,t,i,n,r,a,s,o,l,h){super(e=void 0!==e?e:[],t=void 0!==t?t:301,i,n,r,a,s,o,l,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class t4 extends K{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;let i={width:e,height:e,depth:1};this.texture=new t3([i,i,i,i,i,i],t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:1006}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;let i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},n=new tG(5,5,5),r=new tZ({name:"CubemapFromEquirect",uniforms:tW(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=t;let a=new tV(n,r),s=t.minFilter;return 1008===t.minFilter&&(t.minFilter=1006),new t2(1,10,this).update(e,a),t.minFilter=s,a.geometry.dispose(),a.material.dispose(),this}clear(e,t,i,n){let r=e.getRenderTarget();for(let r=0;r<6;r++)e.setRenderTarget(this,r),e.clear(t,i,n);e.setRenderTarget(r)}}class t6 extends e3{constructor(){super(),this.isGroup=!0,this.type="Group"}}const t0={type:"move"};class t5{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new t6,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new t6,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Q,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Q),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new t6,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Q,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Q),this._grip}dispatchEvent(e){return null!==this._targetRay&&this._targetRay.dispatchEvent(e),null!==this._grip&&this._grip.dispatchEvent(e),null!==this._hand&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){let t=this._hand;if(t)for(let i of e.hand.values())this._getHandJoint(t,i)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(e,t,i){let n=null,r=null,a=null,s=this._targetRay,o=this._grip,l=this._hand;if(e&&"visible-blurred"!==t.session.visibilityState){if(l&&e.hand){for(let n of(a=!0,e.hand.values())){let e=t.getJointPose(n,i),r=this._getHandJoint(l,n);null!==e&&(r.matrix.fromArray(e.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.matrixWorldNeedsUpdate=!0,r.jointRadius=e.radius),r.visible=null!==e}let n=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],s=n.position.distanceTo(r.position);l.inputState.pinching&&s>.025?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&s<=.015&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else null!==o&&e.gripSpace&&null!==(r=t.getPose(e.gripSpace,i))&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1);null!==s&&(null===(n=t.getPose(e.targetRaySpace,i))&&null!==r&&(n=r),null!==n&&(s.matrix.fromArray(n.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.matrixWorldNeedsUpdate=!0,n.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(n.linearVelocity)):s.hasLinearVelocity=!1,n.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(n.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(t0)))}return null!==s&&(s.visible=null!==n),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==a),this}_getHandJoint(e,t){if(void 0===e.joints[t.jointName]){let i=new t6;i.matrixAutoUpdate=!1,i.visible=!1,e.joints[t.jointName]=i,e.add(i)}return e.joints[t.jointName]}}class t8 extends e3{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new eF,this.environmentIntensity=1,this.environmentRotation=new eF,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.environment&&(this.environment=e.environment.clone()),null!==e.fog&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){let t=super.toJSON(e);return null!==this.fog&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),1!==this.environmentIntensity&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}}const t7=new Q,t9=new Q,ie=new P;class it{constructor(e=new Q(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,i,n){return this.normal.set(e,t,i),this.constant=n,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,i){let n=t7.subVectors(i,t).cross(t9.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(n,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){let e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){let i=e.delta(t7),n=this.normal.dot(i);if(0===n)return 0===this.distanceToPoint(e.start)?t.copy(e.start):null;let r=-(e.start.dot(this.normal)+this.constant)/n;return r<0||r>1?null:t.copy(e.start).addScaledVector(i,r)}intersectsLine(e){let t=this.distanceToPoint(e.start),i=this.distanceToPoint(e.end);return t<0&&i>0||i<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){let i=t||ie.getNormalMatrix(e),n=this.coplanarPoint(t7).applyMatrix4(e),r=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const ii=new ev,ir=new Q;class ia{constructor(e=new it,t=new it,i=new it,n=new it,r=new it,a=new it){this.planes=[e,t,i,n,r,a]}set(e,t,i,n,r,a){let s=this.planes;return s[0].copy(e),s[1].copy(t),s[2].copy(i),s[3].copy(n),s[4].copy(r),s[5].copy(a),this}copy(e){let t=this.planes;for(let i=0;i<6;i++)t[i].copy(e.planes[i]);return this}setFromProjectionMatrix(e,t=2e3){let i=this.planes,n=e.elements,r=n[0],a=n[1],s=n[2],o=n[3],l=n[4],h=n[5],c=n[6],q=n[7],u=n[8],d=n[9],m=n[10],p=n[11],f=n[12],_=n[13],g=n[14],x=n[15];if(i[0].setComponents(o-r,q-l,p-u,x-f).normalize(),i[1].setComponents(o+r,q+l,p+u,x+f).normalize(),i[2].setComponents(o+a,q+h,p+d,x+_).normalize(),i[3].setComponents(o-a,q-h,p-d,x-_).normalize(),i[4].setComponents(o-s,q-c,p-m,x-g).normalize(),2e3===t)i[5].setComponents(o+s,q+c,p+m,x+g).normalize();else if(2001===t)i[5].setComponents(s,c,m,g).normalize();else throw Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(void 0!==e.boundingSphere)null===e.boundingSphere&&e.computeBoundingSphere(),ii.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{let t=e.geometry;null===t.boundingSphere&&t.computeBoundingSphere(),ii.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(ii)}intersectsSprite(e){return ii.center.set(0,0,0),ii.radius=.7071067811865476,ii.applyMatrix4(e.matrixWorld),this.intersectsSphere(ii)}intersectsSphere(e){let t=this.planes,i=e.center,n=-e.radius;for(let e=0;e<6;e++)if(t[e].distanceToPoint(i)<n)return!1;return!0}intersectsBox(e){let t=this.planes;for(let i=0;i<6;i++){let n=t[i];if(ir.x=n.normal.x>0?e.max.x:e.min.x,ir.y=n.normal.y>0?e.max.y:e.min.y,ir.z=n.normal.z>0?e.max.z:e.min.z,0>n.distanceToPoint(ir))return!1}return!0}containsPoint(e){let t=this.planes;for(let i=0;i<6;i++)if(0>t[i].distanceToPoint(e))return!1;return!0}clone(){return new this.constructor().copy(this)}}class is extends tm{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new tq(0xffffff),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const io=new eR,il=new eA,ih=new ev,ic=new Q;class iq extends e3{constructor(e=new tC,t=new is){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){let i=this.geometry,n=this.matrixWorld,r=e.params.Points.threshold,a=i.drawRange;if(null===i.boundingSphere&&i.computeBoundingSphere(),ih.copy(i.boundingSphere),ih.applyMatrix4(n),ih.radius+=r,!1===e.ray.intersectsSphere(ih))return;io.copy(n).invert(),il.copy(e.ray).applyMatrix4(io);let s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s,l=i.index,h=i.attributes.position;if(null!==l){let i=Math.max(0,a.start),r=Math.min(l.count,a.start+a.count);for(let a=i;a<r;a++){let i=l.getX(a);ic.fromBufferAttribute(h,i),iu(ic,i,o,n,e,t,this)}}else{let i=Math.max(0,a.start),r=Math.min(h.count,a.start+a.count);for(let a=i;a<r;a++)ic.fromBufferAttribute(h,a),iu(ic,a,o,n,e,t,this)}}updateMorphTargets(){let e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){let i=e[t[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=i.length;e<t;e++){let t=i[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}}function iu(e,t,i,n,r,a,s){let o=il.distanceSqToPoint(e);if(o<i){let i=new Q;il.closestPointToPoint(e,i),i.applyMatrix4(n);let l=r.ray.origin.distanceTo(i);if(l<r.near||l>r.far)return;a.push({distance:l,distanceToRay:Math.sqrt(o),point:i,index:t,face:null,faceIndex:null,barycoord:null,object:s})}}class id extends j{constructor(e,t,i,n,r,a,s,o,l,h=1026){if(1026!==h&&1027!==h)throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===i&&1026===h&&(i=1014),void 0===i&&1027===h&&(i=1020),super(null,n,r,a,s,o,h,i,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=void 0!==s?s:1003,this.minFilter=void 0!==o?o:1003,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){let t=super.toJSON(e);return null!==this.compareFunction&&(t.compareFunction=this.compareFunction),t}}class im{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){let i=this.getUtoTmapping(e);return this.getPoint(i,t)}getPoints(e=5){let t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return t}getSpacedPoints(e=5){let t=[];for(let i=0;i<=e;i++)t.push(this.getPointAt(i/e));return t}getLength(){let e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;let t=[],i,n=this.getPoint(0),r=0;t.push(0);for(let a=1;a<=e;a++)t.push(r+=(i=this.getPoint(a/e)).distanceTo(n)),n=i;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){let i;let n=this.getLengths(),r=0,a=n.length;i=t||e*n[a-1];let s=0,o=a-1,l;for(;s<=o;)if((l=n[r=Math.floor(s+(o-s)/2)]-i)<0)s=r+1;else if(l>0)o=r-1;else{o=r;break}if(n[r=o]===i)return r/(a-1);let h=n[r],c=n[r+1];return(r+(i-h)/(c-h))/(a-1)}getTangent(e,t){let i=e-1e-4,n=e+1e-4;i<0&&(i=0),n>1&&(n=1);let r=this.getPoint(i),a=this.getPoint(n),s=t||(r.isVector2?new C:new Q);return s.copy(a).sub(r).normalize(),s}getTangentAt(e,t){let i=this.getUtoTmapping(e);return this.getTangent(i,t)}computeFrenetFrames(e,t){let i=new Q,n=[],r=[],a=[],s=new Q,o=new eR;for(let t=0;t<=e;t++){let i=t/e;n[t]=this.getTangentAt(i,new Q)}r[0]=new Q,a[0]=new Q;let l=Number.MAX_VALUE,h=Math.abs(n[0].x),c=Math.abs(n[0].y),q=Math.abs(n[0].z);h<=l&&(l=h,i.set(1,0,0)),c<=l&&(l=c,i.set(0,1,0)),q<=l&&i.set(0,0,1),s.crossVectors(n[0],i).normalize(),r[0].crossVectors(n[0],s),a[0].crossVectors(n[0],r[0]);for(let t=1;t<=e;t++){if(r[t]=r[t-1].clone(),a[t]=a[t-1].clone(),s.crossVectors(n[t-1],n[t]),s.length()>Number.EPSILON){s.normalize();let e=Math.acos(w(n[t-1].dot(n[t]),-1,1));r[t].applyMatrix4(o.makeRotationAxis(s,e))}a[t].crossVectors(n[t],r[t])}if(!0===t){let t=Math.acos(w(r[0].dot(r[e]),-1,1));t/=e,n[0].dot(s.crossVectors(r[0],r[e]))>0&&(t=-t);for(let i=1;i<=e;i++)r[i].applyMatrix4(o.makeRotationAxis(n[i],t*i)),a[i].crossVectors(n[i],r[i])}return{tangents:n,normals:r,binormals:a}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){let e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class ip extends im{constructor(e=0,t=0,i=1,n=1,r=0,a=2*Math.PI,s=!1,o=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=i,this.yRadius=n,this.aStartAngle=r,this.aEndAngle=a,this.aClockwise=s,this.aRotation=o}getPoint(e,t=new C){let i=2*Math.PI,n=this.aEndAngle-this.aStartAngle,r=Math.abs(n)<Number.EPSILON;for(;n<0;)n+=i;for(;n>i;)n-=i;n<Number.EPSILON&&(n=r?0:i),!0!==this.aClockwise||r||(n===i?n=-i:n-=i);let a=this.aStartAngle+e*n,s=this.aX+this.xRadius*Math.cos(a),o=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){let e=Math.cos(this.aRotation),t=Math.sin(this.aRotation),i=s-this.aX,n=o-this.aY;s=i*e-n*t+this.aX,o=i*t+n*e+this.aY}return t.set(s,o)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){let e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}function i_(){let e=0,t=0,i=0,n=0;function r(r,a,s,o){e=r,t=s,i=-3*r+3*a-2*s-o,n=2*r-2*a+s+o}return{initCatmullRom:function(e,t,i,n,a){r(t,i,a*(i-e),a*(n-t))},initNonuniformCatmullRom:function(e,t,i,n,a,s,o){let l=(t-e)/a-(i-e)/(a+s)+(i-t)/s,h=(i-t)/s-(n-t)/(s+o)+(n-i)/o;r(t,i,l*=s,h*=s)},calc:function(r){let a=r*r;return e+t*r+i*a+a*r*n}}}const ig=new Q,ix=new i_,iv=new i_,iy=new i_;function iM(e,t,i,n,r){let a=(n-t)*.5,s=(r-i)*.5,o=e*e;return e*o*(2*i-2*n+a+s)+(-3*i+3*n-2*a-s)*o+a*e+i}function iS(e,t,i,n){return function(e,t){let i=1-e;return i*i*t}(e,t)+2*(1-e)*e*i+e*e*n}function iE(e,t,i,n,r){return function(e,t){let i=1-e;return i*i*i*t}(e,t)+function(e,t){let i=1-e;return 3*i*i*e*t}(e,i)+3*(1-e)*e*e*n+e*e*e*r}class iT extends im{constructor(e=new C,t=new C,i=new C,n=new C){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=i,this.v3=n}getPoint(e,t=new C){let i=this.v0,n=this.v1,r=this.v2,a=this.v3;return t.set(iE(e,i.x,n.x,r.x,a.x),iE(e,i.y,n.y,r.y,a.y)),t}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){let e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class ib extends im{constructor(e=new C,t=new C){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new C){return 1===e?t.copy(this.v2):(t.copy(this.v2).sub(this.v1),t.multiplyScalar(e).add(this.v1)),t}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new C){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){let e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class iw extends im{constructor(e=new C,t=new C,i=new C){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new C){let i=this.v0,n=this.v1,r=this.v2;return t.set(iS(e,i.x,n.x,r.x),iS(e,i.y,n.y,r.y)),t}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){let e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class iA extends im{constructor(e=new Q,t=new Q,i=new Q){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new Q){let i=this.v0,n=this.v1,r=this.v2;return t.set(iS(e,i.x,n.x,r.x),iS(e,i.y,n.y,r.y),iS(e,i.z,n.z,r.z)),t}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){let e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class iR extends im{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new C){let i=this.points,n=(i.length-1)*e,r=Math.floor(n),a=n-r,s=i[0===r?r:r-1],o=i[r],l=i[r>i.length-2?i.length-1:r+1],h=i[r>i.length-3?i.length-1:r+2];return t.set(iM(a,s.x,o.x,l.x,h.x),iM(a,s.y,o.y,l.y,h.y)),t}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){let i=e.points[t];this.points.push(i.clone())}return this}toJSON(){let e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){let i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){let i=e.points[t];this.points.push(new C().fromArray(i))}return this}}var iC=Object.freeze({__proto__:null,ArcCurve:class extends ip{constructor(e,t,i,n,r,a){super(e,t,i,i,n,r,a),this.isArcCurve=!0,this.type="ArcCurve"}},CatmullRomCurve3:class extends im{constructor(e=[],t=!1,i="centripetal",n=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=i,this.tension=n}getPoint(e,t=new Q){let i,n;let r=this.points,a=r.length,s=(a-+!this.closed)*e,o=Math.floor(s),l=s-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/a)+1)*a:0===l&&o===a-1&&(o=a-2,l=1),this.closed||o>0?i=r[(o-1)%a]:(ig.subVectors(r[0],r[1]).add(r[0]),i=ig);let h=r[o%a],c=r[(o+1)%a];if(this.closed||o+2<a?n=r[(o+2)%a]:(ig.subVectors(r[a-1],r[a-2]).add(r[a-1]),n=ig),"centripetal"===this.curveType||"chordal"===this.curveType){let e="chordal"===this.curveType?.5:.25,t=Math.pow(i.distanceToSquared(h),e),r=Math.pow(h.distanceToSquared(c),e),a=Math.pow(c.distanceToSquared(n),e);r<1e-4&&(r=1),t<1e-4&&(t=r),a<1e-4&&(a=r),ix.initNonuniformCatmullRom(i.x,h.x,c.x,n.x,t,r,a),iv.initNonuniformCatmullRom(i.y,h.y,c.y,n.y,t,r,a),iy.initNonuniformCatmullRom(i.z,h.z,c.z,n.z,t,r,a)}else"catmullrom"===this.curveType&&(ix.initCatmullRom(i.x,h.x,c.x,n.x,this.tension),iv.initCatmullRom(i.y,h.y,c.y,n.y,this.tension),iy.initCatmullRom(i.z,h.z,c.z,n.z,this.tension));return t.set(ix.calc(l),iv.calc(l),iy.calc(l)),t}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){let i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){let e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){let i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){let i=e.points[t];this.points.push(new Q().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}},CubicBezierCurve:iT,CubicBezierCurve3:class extends im{constructor(e=new Q,t=new Q,i=new Q,n=new Q){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=i,this.v3=n}getPoint(e,t=new Q){let i=this.v0,n=this.v1,r=this.v2,a=this.v3;return t.set(iE(e,i.x,n.x,r.x,a.x),iE(e,i.y,n.y,r.y,a.y),iE(e,i.z,n.z,r.z,a.z)),t}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){let e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}},EllipseCurve:ip,LineCurve:ib,LineCurve3:class extends im{constructor(e=new Q,t=new Q){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new Q){return 1===e?t.copy(this.v2):(t.copy(this.v2).sub(this.v1),t.multiplyScalar(e).add(this.v1)),t}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new Q){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){let e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}},QuadraticBezierCurve:iw,QuadraticBezierCurve3:iA,SplineCurve:iR});class iP extends im{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){let e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){let i=!0===e.isVector2?"LineCurve":"LineCurve3";this.curves.push(new iC[i](t,e))}return this}getPoint(e,t){let i=e*this.getLength(),n=this.getCurveLengths(),r=0;for(;r<n.length;){if(n[r]>=i){let e=n[r]-i,a=this.curves[r],s=a.getLength(),o=0===s?0:1-e/s;return a.getPointAt(o,t)}r++}return null}getLength(){let e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;let e=[],t=0;for(let i=0,n=this.curves.length;i<n;i++)e.push(t+=this.curves[i].getLength());return this.cacheLengths=e,e}getSpacedPoints(e=40){let t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){let t;let i=[];for(let n=0,r=this.curves;n<r.length;n++){let a=r[n],s=a.isEllipseCurve?2*e:a.isLineCurve||a.isLineCurve3?1:a.isSplineCurve?e*a.points.length:e,o=a.getPoints(s);for(let e=0;e<o.length;e++){let n=o[e];t&&t.equals(n)||(i.push(n),t=n)}}return this.autoClose&&i.length>1&&!i[i.length-1].equals(i[0])&&i.push(i[0]),i}copy(e){super.copy(e),this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){let i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){let e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,i=this.curves.length;t<i;t++){let i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){let i=e.curves[t];this.curves.push(new iC[i.type]().fromJSON(i))}return this}}class iL extends iP{constructor(e){super(),this.type="Path",this.currentPoint=new C,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,i=e.length;t<i;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){let i=new ib(this.currentPoint.clone(),new C(e,t));return this.curves.push(i),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,i,n){let r=new iw(this.currentPoint.clone(),new C(e,t),new C(i,n));return this.curves.push(r),this.currentPoint.set(i,n),this}bezierCurveTo(e,t,i,n,r,a){let s=new iT(this.currentPoint.clone(),new C(e,t),new C(i,n),new C(r,a));return this.curves.push(s),this.currentPoint.set(r,a),this}splineThru(e){let t=new iR([this.currentPoint.clone()].concat(e));return this.curves.push(t),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,i,n,r,a){let s=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(e+s,t+o,i,n,r,a),this}absarc(e,t,i,n,r,a){return this.absellipse(e,t,i,i,n,r,a),this}ellipse(e,t,i,n,r,a,s,o){let l=this.currentPoint.x,h=this.currentPoint.y;return this.absellipse(e+l,t+h,i,n,r,a,s,o),this}absellipse(e,t,i,n,r,a,s,o){let l=new ip(e,t,i,n,r,a,s,o);if(this.curves.length>0){let e=l.getPoint(0);e.equals(this.currentPoint)||this.lineTo(e.x,e.y)}this.curves.push(l);let h=l.getPoint(1);return this.currentPoint.copy(h),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){let e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class iD extends tC{constructor(e=[new C(0,-.5),new C(.5,0),new C(0,.5)],t=12,i=0,n=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:i,phiLength:n},t=Math.floor(t),n=w(n,0,2*Math.PI);let r=[],a=[],s=[],o=[],l=[],h=1/t,c=new Q,q=new C,u=new Q,d=new Q,m=new Q,p=0,f=0;for(let t=0;t<=e.length-1;t++)switch(t){case 0:p=e[t+1].x-e[t].x,f=e[t+1].y-e[t].y,u.x=+f,u.y=-p,u.z=0*f,m.copy(u),u.normalize(),o.push(u.x,u.y,u.z);break;case e.length-1:o.push(m.x,m.y,m.z);break;default:p=e[t+1].x-e[t].x,f=e[t+1].y-e[t].y,u.x=+f,u.y=-p,u.z=0*f,d.copy(u),u.x+=m.x,u.y+=m.y,u.z+=m.z,u.normalize(),o.push(u.x,u.y,u.z),m.copy(d)}for(let r=0;r<=t;r++){let u=i+r*h*n,d=Math.sin(u),m=Math.cos(u);for(let i=0;i<=e.length-1;i++){c.x=e[i].x*d,c.y=e[i].y,c.z=e[i].x*m,a.push(c.x,c.y,c.z),q.x=r/t,q.y=i/(e.length-1),s.push(q.x,q.y);let n=o[3*i+0]*d,h=o[3*i+1],u=o[3*i+0]*m;l.push(n,h,u)}}for(let i=0;i<t;i++)for(let t=0;t<e.length-1;t++){let n=t+i*e.length,a=n+e.length,s=n+e.length+1,o=n+1;r.push(n,a,o),r.push(s,o,a)}this.setIndex(r),this.setAttribute("position",new tM(a,3)),this.setAttribute("uv",new tM(s,2)),this.setAttribute("normal",new tM(l,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new iD(e.points,e.segments,e.phiStart,e.phiLength)}}class iU extends iD{constructor(e=1,t=1,i=4,n=8){let r=new iL;r.absarc(0,-t/2,e,1.5*Math.PI,0),r.absarc(0,t/2,e,0,.5*Math.PI),super(r.getPoints(i),n),this.type="CapsuleGeometry",this.parameters={radius:e,length:t,capSegments:i,radialSegments:n}}static fromJSON(e){return new iU(e.radius,e.length,e.capSegments,e.radialSegments)}}class iN extends tC{constructor(e=1,t=32,i=0,n=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:i,thetaLength:n},t=Math.max(3,t);let r=[],a=[],s=[],o=[],l=new Q,h=new C;a.push(0,0,0),s.push(0,0,1),o.push(.5,.5);for(let r=0,c=3;r<=t;r++,c+=3){let q=i+r/t*n;l.x=e*Math.cos(q),l.y=e*Math.sin(q),a.push(l.x,l.y,l.z),s.push(0,0,1),h.x=(a[c]/e+1)/2,h.y=(a[c+1]/e+1)/2,o.push(h.x,h.y)}for(let e=1;e<=t;e++)r.push(e,e+1,0);this.setIndex(r),this.setAttribute("position",new tM(a,3)),this.setAttribute("normal",new tM(s,3)),this.setAttribute("uv",new tM(o,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new iN(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class iI extends tC{constructor(e=1,t=1,i=1,n=32,r=1,a=!1,s=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:i,radialSegments:n,heightSegments:r,openEnded:a,thetaStart:s,thetaLength:o};let l=this;n=Math.floor(n),r=Math.floor(r);let h=[],c=[],q=[],u=[],d=0,m=[],p=i/2,f=0;function _(i){let r=d,a=new C,m=new Q,_=0,g=!0===i?e:t,x=!0===i?1:-1;for(let e=1;e<=n;e++)c.push(0,p*x,0),q.push(0,x,0),u.push(.5,.5),d++;let v=d;for(let e=0;e<=n;e++){let t=e/n*o+s,i=Math.cos(t),r=Math.sin(t);m.x=g*r,m.y=p*x,m.z=g*i,c.push(m.x,m.y,m.z),q.push(0,x,0),a.x=.5*i+.5,a.y=.5*r*x+.5,u.push(a.x,a.y),d++}for(let e=0;e<n;e++){let t=r+e,n=v+e;!0===i?h.push(n,n+1,t):h.push(n+1,n,t),_+=3}l.addGroup(f,_,!0===i?1:2),f+=_}(function(){let a=new Q,_=new Q,g=0,x=(t-e)/i;for(let l=0;l<=r;l++){let h=[],f=l/r,g=f*(t-e)+e;for(let e=0;e<=n;e++){let t=e/n,r=t*o+s,l=Math.sin(r),m=Math.cos(r);_.x=g*l,_.y=-f*i+p,_.z=g*m,c.push(_.x,_.y,_.z),a.set(l,x,m).normalize(),q.push(a.x,a.y,a.z),u.push(t,1-f),h.push(d++)}m.push(h)}for(let i=0;i<n;i++)for(let n=0;n<r;n++){let a=m[n][i],s=m[n+1][i],o=m[n+1][i+1],l=m[n][i+1];(e>0||0!==n)&&(h.push(a,s,l),g+=3),(t>0||n!==r-1)&&(h.push(s,o,l),g+=3)}l.addGroup(f,g,0),f+=g})(),!1===a&&(e>0&&_(!0),t>0&&_(!1)),this.setIndex(h),this.setAttribute("position",new tM(c,3)),this.setAttribute("normal",new tM(q,3)),this.setAttribute("uv",new tM(u,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new iI(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class iO extends iI{constructor(e=1,t=1,i=32,n=1,r=!1,a=0,s=2*Math.PI){super(0,e,t,i,n,r,a,s),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:a,thetaLength:s}}static fromJSON(e){return new iO(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class iz extends tC{constructor(e=[],t=[],i=1,n=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:i,detail:n};let r=[],a=[];function s(e){r.push(e.x,e.y,e.z)}function o(t,i){let n=3*t;i.x=e[n+0],i.y=e[n+1],i.z=e[n+2]}function l(e,t,i,n){n<0&&1===e.x&&(a[t]=e.x-1),0===i.x&&0===i.z&&(a[t]=n/2/Math.PI+.5)}function h(e){return Math.atan2(e.z,-e.x)}(function(e){let i=new Q,n=new Q,r=new Q;for(let a=0;a<t.length;a+=3)o(t[a+0],i),o(t[a+1],n),o(t[a+2],r),function(e,t,i,n){let r=n+1,a=[];for(let n=0;n<=r;n++){a[n]=[];let s=e.clone().lerp(i,n/r),o=t.clone().lerp(i,n/r),l=r-n;for(let e=0;e<=l;e++)0===e&&n===r?a[n][e]=s:a[n][e]=s.clone().lerp(o,e/l)}for(let e=0;e<r;e++)for(let t=0;t<2*(r-e)-1;t++){let i=Math.floor(t/2);t%2==0?(s(a[e][i+1]),s(a[e+1][i]),s(a[e][i])):(s(a[e][i+1]),s(a[e+1][i+1]),s(a[e+1][i]))}}(i,n,r,e)})(n),function(e){let t=new Q;for(let i=0;i<r.length;i+=3)t.x=r[i+0],t.y=r[i+1],t.z=r[i+2],t.normalize().multiplyScalar(e),r[i+0]=t.x,r[i+1]=t.y,r[i+2]=t.z}(i),function(){let e=new Q;for(let t=0;t<r.length;t+=3){e.x=r[t+0],e.y=r[t+1],e.z=r[t+2];let i=h(e)/2/Math.PI+.5,n=Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5;a.push(i,1-n)}(function(){let e=new Q,t=new Q,i=new Q,n=new Q,s=new C,o=new C,c=new C;for(let q=0,u=0;q<r.length;q+=9,u+=6){e.set(r[q+0],r[q+1],r[q+2]),t.set(r[q+3],r[q+4],r[q+5]),i.set(r[q+6],r[q+7],r[q+8]),s.set(a[u+0],a[u+1]),o.set(a[u+2],a[u+3]),c.set(a[u+4],a[u+5]),n.copy(e).add(t).add(i).divideScalar(3);let d=h(n);l(s,u+0,e,d),l(o,u+2,t,d),l(c,u+4,i,d)}})(),function(){for(let e=0;e<a.length;e+=6){let t=a[e+0],i=a[e+2],n=a[e+4],r=Math.max(t,i,n),s=Math.min(t,i,n);r>.9&&s<.1&&(t<.2&&(a[e+0]+=1),i<.2&&(a[e+2]+=1),n<.2&&(a[e+4]+=1))}}()}(),this.setAttribute("position",new tM(r,3)),this.setAttribute("normal",new tM(r.slice(),3)),this.setAttribute("uv",new tM(a,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new iz(e.vertices,e.indices,e.radius,e.details)}}class iF extends iz{constructor(e=1,t=0){let i=(1+Math.sqrt(5))/2,n=1/i;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-i,0,-n,i,0,n,-i,0,n,i,-n,-i,0,-n,i,0,n,-i,0,n,i,0,-i,0,-n,i,0,-n,-i,0,n,i,0,n],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new iF(e.radius,e.detail)}}class iB extends iL{constructor(e){super(e),this.uuid=b(),this.type="Shape",this.holes=[]}getPointsHoles(e){let t=[];for(let i=0,n=this.holes.length;i<n;i++)t[i]=this.holes[i].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){let i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){let e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,i=this.holes.length;t<i;t++){let i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){let i=e.holes[t];this.holes.push(new iL().fromJSON(i))}return this}}const iH=function(e,t,i=2){let n,r,a,s,o,l,h;let c=t&&t.length,q=c?t[0]*i:e.length,u=iV(e,0,q,i,!0),d=[];if(!u||u.next===u.prev)return d;if(c&&(u=function(e,t,i,n){let r,a,s,o,l;let h=[];for(r=0,a=t.length;r<a;r++)s=t[r]*n,o=r<a-1?t[r+1]*n:e.length,(l=iV(e,s,o,n,!1))===l.next&&(l.steiner=!0),h.push(function(e){let t=e,i=e;do(t.x<i.x||t.x===i.x&&t.y<i.y)&&(i=t),t=t.next;while(t!==e)return i}(l));for(h.sort(iG),r=0;r<h.length;r++)i=function(e,t){let i=function(e,t){let i=t,n=-1/0,r,a=e.x,s=e.y;do{if(s<=i.y&&s>=i.next.y&&i.next.y!==i.y){let e=i.x+(s-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(e<=a&&e>n&&(n=e,r=i.x<i.next.x?i:i.next,e===a))return r}i=i.next}while(i!==t)if(!r)return null;let o=r,l=r.x,h=r.y,c=1/0,q;i=r;do{var u,d;a>=i.x&&i.x>=l&&a!==i.x&&iX(s<h?a:n,s,l,h,s<h?n:a,s,i.x,i.y)&&(q=Math.abs(s-i.y)/(a-i.x),i$(i,e)&&(q<c||q===c&&(i.x>r.x||i.x===r.x&&(u=r,d=i,0>ij(u.prev,u,d.prev)&&0>ij(d.next,u,u.next))))&&(r=i,c=q)),i=i.next}while(i!==o)return r}(e,t);if(!i)return t;let n=iQ(i,e);return ik(n,n.next),ik(i,i.next)}(h[r],i);return i}(e,t,u,i)),e.length>80*i){n=a=e[0],r=s=e[1];for(let t=i;t<q;t+=i)o=e[t],l=e[t+1],o<n&&(n=o),l<r&&(r=l),o>a&&(a=o),l>s&&(s=l);h=0!==(h=Math.max(a-n,s-r))?32767/h:0}return function e(t,i,n,r,a,s,o){if(!t)return;!o&&s&&function(e,t,i,n){let r=e;do 0===r.z&&(r.z=iW(r.x,r.y,t,i,n)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next;while(r!==e)r.prevZ.nextZ=null,r.prevZ=null,function(e){let t,i,n,r,a,s,o,l,h=1;do{for(i=e,e=null,a=null,s=0;i;){for(s++,n=i,o=0,t=0;t<h&&(o++,n=n.nextZ);t++);for(l=h;o>0||l>0&&n;)0!==o&&(0===l||!n||i.z<=n.z)?(r=i,i=i.nextZ,o--):(r=n,n=n.nextZ,l--),a?a.nextZ=r:e=r,r.prevZ=a,a=r;i=n}a.nextZ=null,h*=2}while(s>1)}(r)}(t,r,a,s);let l=t,h,c;for(;t.prev!==t.next;){if(h=t.prev,c=t.next,s?function(e,t,i,n){let r=e.prev,a=e.next;if(ij(r,e,a)>=0)return!1;let s=r.x,o=e.x,l=a.x,h=r.y,c=e.y,q=a.y,u=s<o?s<l?s:l:o<l?o:l,d=h<c?h<q?h:q:c<q?c:q,m=s>o?s>l?s:l:o>l?o:l,p=h>c?h>q?h:q:c>q?c:q,f=iW(u,d,t,i,n),_=iW(m,p,t,i,n),g=e.prevZ,x=e.nextZ;for(;g&&g.z>=f&&x&&x.z<=_;){if(g.x>=u&&g.x<=m&&g.y>=d&&g.y<=p&&g!==r&&g!==a&&iX(s,h,o,c,l,q,g.x,g.y)&&ij(g.prev,g,g.next)>=0||(g=g.prevZ,x.x>=u&&x.x<=m&&x.y>=d&&x.y<=p&&x!==r&&x!==a&&iX(s,h,o,c,l,q,x.x,x.y)&&ij(x.prev,x,x.next)>=0))return!1;x=x.nextZ}for(;g&&g.z>=f;){if(g.x>=u&&g.x<=m&&g.y>=d&&g.y<=p&&g!==r&&g!==a&&iX(s,h,o,c,l,q,g.x,g.y)&&ij(g.prev,g,g.next)>=0)return!1;g=g.prevZ}for(;x&&x.z<=_;){if(x.x>=u&&x.x<=m&&x.y>=d&&x.y<=p&&x!==r&&x!==a&&iX(s,h,o,c,l,q,x.x,x.y)&&ij(x.prev,x,x.next)>=0)return!1;x=x.nextZ}return!0}(t,r,a,s):function(e){let t=e.prev,i=e.next;if(ij(t,e,i)>=0)return!1;let n=t.x,r=e.x,a=i.x,s=t.y,o=e.y,l=i.y,h=n<r?n<a?n:a:r<a?r:a,c=s<o?s<l?s:l:o<l?o:l,q=n>r?n>a?n:a:r>a?r:a,u=s>o?s>l?s:l:o>l?o:l,d=i.next;for(;d!==t;){if(d.x>=h&&d.x<=q&&d.y>=c&&d.y<=u&&iX(n,s,r,o,a,l,d.x,d.y)&&ij(d.prev,d,d.next)>=0)return!1;d=d.next}return!0}(t)){i.push(h.i/n|0),i.push(t.i/n|0),i.push(c.i/n|0),i2(t),t=c.next,l=c.next;continue}if((t=c)===l){o?1===o?e(t=function(e,t,i){let n=e;do{let r=n.prev,a=n.next.next;!iY(r,a)&&iZ(r,n,n.next,a)&&i$(r,a)&&i$(a,r)&&(t.push(r.i/i|0),t.push(n.i/i|0),t.push(a.i/i|0),i2(n),i2(n.next),n=e=a),n=n.next}while(n!==e)return ik(n)}(ik(t),i,n),i,n,r,a,s,2):2===o&&function(t,i,n,r,a,s){let o=t;do{let t=o.next.next;for(;t!==o.prev;){var l,h;if(o.i!==t.i&&(l=o,h=t,l.next.i!==h.i&&l.prev.i!==h.i&&!function(e,t){let i=e;do{if(i.i!==e.i&&i.next.i!==e.i&&i.i!==t.i&&i.next.i!==t.i&&iZ(i,i.next,e,t))return!0;i=i.next}while(i!==e)return!1}(l,h)&&(i$(l,h)&&i$(h,l)&&function(e,t){let i=e,n=!1,r=(e.x+t.x)/2,a=(e.y+t.y)/2;do i.y>a!=i.next.y>a&&i.next.y!==i.y&&r<(i.next.x-i.x)*(a-i.y)/(i.next.y-i.y)+i.x&&(n=!n),i=i.next;while(i!==e)return n}(l,h)&&(ij(l.prev,l,h.prev)||ij(l,h.prev,h))||iY(l,h)&&ij(l.prev,l,l.next)>0&&ij(h.prev,h,h.next)>0))){let l=iQ(o,t);o=ik(o,o.next),l=ik(l,l.next),e(o,i,n,r,a,s,0),e(l,i,n,r,a,s,0);return}t=t.next}o=o.next}while(o!==t)}(t,i,n,r,a,s):e(ik(t),i,n,r,a,s,1);break}}}(u,d,i,n,r,h,0),d};function iV(e,t,i,n,r){let a,s;if(r===function(e,t,i,n){let r=0;for(let a=t,s=i-n;a<i;a+=n)r+=(e[s]-e[a])*(e[a+1]+e[s+1]),s=a;return r}(e,t,i,n)>0)for(a=t;a<i;a+=n)s=i1(a,e[a],e[a+1],s);else for(a=i-n;a>=t;a-=n)s=i1(a,e[a],e[a+1],s);return s&&iY(s,s.next)&&(i2(s),s=s.next),s}function ik(e,t){if(!e)return e;t||(t=e);let i=e,n;do if(n=!1,!i.steiner&&(iY(i,i.next)||0===ij(i.prev,i,i.next))){if(i2(i),(i=t=i.prev)===i.next)break;n=!0}else i=i.next;while(n||i!==t)return t}function iG(e,t){return e.x-t.x}function iW(e,t,i,n,r){return(e=((e=((e=((e=((e=(e-i)*r|0)|e<<8)&0xff00ff)|e<<4)&0xf0f0f0f)|e<<2)&0x33333333)|e<<1)&0x55555555)|(t=((t=((t=((t=((t=(t-n)*r|0)|t<<8)&0xff00ff)|t<<4)&0xf0f0f0f)|t<<2)&0x33333333)|t<<1)&0x55555555)<<1}function iX(e,t,i,n,r,a,s,o){return(r-s)*(t-o)>=(e-s)*(a-o)&&(e-s)*(n-o)>=(i-s)*(t-o)&&(i-s)*(a-o)>=(r-s)*(n-o)}function ij(e,t,i){return(t.y-e.y)*(i.x-t.x)-(t.x-e.x)*(i.y-t.y)}function iY(e,t){return e.x===t.x&&e.y===t.y}function iZ(e,t,i,n){let r=iJ(ij(e,t,i)),a=iJ(ij(e,t,n)),s=iJ(ij(i,n,e)),o=iJ(ij(i,n,t));return!!(r!==a&&s!==o||0===r&&iK(e,i,t)||0===a&&iK(e,n,t)||0===s&&iK(i,e,n)||0===o&&iK(i,t,n))}function iK(e,t,i){return t.x<=Math.max(e.x,i.x)&&t.x>=Math.min(e.x,i.x)&&t.y<=Math.max(e.y,i.y)&&t.y>=Math.min(e.y,i.y)}function iJ(e){return e>0?1:e<0?-1:0}function i$(e,t){return 0>ij(e.prev,e,e.next)?ij(e,t,e.next)>=0&&ij(e,e.prev,t)>=0:0>ij(e,t,e.prev)||0>ij(e,e.next,t)}function iQ(e,t){let i=new i3(e.i,e.x,e.y),n=new i3(t.i,t.x,t.y),r=e.next,a=t.prev;return e.next=t,t.prev=e,i.next=r,r.prev=i,n.next=i,i.prev=n,a.next=n,n.prev=a,n}function i1(e,t,i,n){let r=new i3(e,t,i);return n?(r.next=n.next,r.prev=n,n.next.prev=r,n.next=r):(r.prev=r,r.next=r),r}function i2(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function i3(e,t,i){this.i=e,this.x=t,this.y=i,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}class i4{static area(e){let t=e.length,i=0;for(let n=t-1,r=0;r<t;n=r++)i+=e[n].x*e[r].y-e[r].x*e[n].y;return .5*i}static isClockWise(e){return 0>i4.area(e)}static triangulateShape(e,t){let i=[],n=[],r=[];i6(e),i0(i,e);let a=e.length;t.forEach(i6);for(let e=0;e<t.length;e++)n.push(a),a+=t[e].length,i0(i,t[e]);let s=iH(i,n);for(let e=0;e<s.length;e+=3)r.push(s.slice(e,e+3));return r}}function i6(e){let t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function i0(e,t){for(let i=0;i<t.length;i++)e.push(t[i].x),e.push(t[i].y)}class i5 extends tC{constructor(e=new iB([new C(.5,.5),new C(-.5,.5),new C(-.5,-.5),new C(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];let i=this,n=[],r=[];for(let a=0,s=e.length;a<s;a++)!function(e){let a,s,o,l;let h=[],c=void 0!==t.curveSegments?t.curveSegments:12,q=void 0!==t.steps?t.steps:1,u=void 0!==t.depth?t.depth:1,d=void 0===t.bevelEnabled||t.bevelEnabled,m=void 0!==t.bevelThickness?t.bevelThickness:.2,p=void 0!==t.bevelSize?t.bevelSize:m-.1,f=void 0!==t.bevelOffset?t.bevelOffset:0,_=void 0!==t.bevelSegments?t.bevelSegments:3,g=t.extrudePath,x=void 0!==t.UVGenerator?t.UVGenerator:i8,v,y=!1;g&&(v=g.getSpacedPoints(q),y=!0,d=!1,a=g.computeFrenetFrames(q,!1),s=new Q,o=new Q,l=new Q),d||(_=0,m=0,p=0,f=0);let M=e.extractPoints(c),S=M.shape,E=M.holes;if(!i4.isClockWise(S)){S=S.reverse();for(let e=0,t=E.length;e<t;e++){let t=E[e];i4.isClockWise(t)&&(E[e]=t.reverse())}}let T=i4.triangulateShape(S,E),b=S;for(let e=0,t=E.length;e<t;e++){let t=E[e];S=S.concat(t)}function w(e,t,i){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().addScaledVector(t,i)}let A=S.length,R=T.length;function P(e,t,i){let n,r,a;let s=e.x-t.x,o=e.y-t.y,l=i.x-e.x,h=i.y-e.y,c=s*s+o*o;if(Math.abs(s*h-o*l)>Number.EPSILON){let q=Math.sqrt(c),u=Math.sqrt(l*l+h*h),d=t.x-o/q,m=t.y+s/q,p=((i.x-h/u-d)*h-(i.y+l/u-m)*l)/(s*h-o*l),f=(n=d+s*p-e.x)*n+(r=m+o*p-e.y)*r;if(f<=2)return new C(n,r);a=Math.sqrt(f/2)}else{let e=!1;s>Number.EPSILON?l>Number.EPSILON&&(e=!0):s<-Number.EPSILON?l<-Number.EPSILON&&(e=!0):Math.sign(o)===Math.sign(h)&&(e=!0),e?(n=-o,r=s,a=Math.sqrt(c)):(n=s,r=o,a=Math.sqrt(c/2))}return new C(n/a,r/a)}let L=[];for(let e=0,t=b.length,i=t-1,n=e+1;e<t;e++,i++,n++)i===t&&(i=0),n===t&&(n=0),L[e]=P(b[e],b[i],b[n]);let D=[],U,N=L.concat();for(let e=0,t=E.length;e<t;e++){let t=E[e];U=[];for(let e=0,i=t.length,n=i-1,r=e+1;e<i;e++,n++,r++)n===i&&(n=0),r===i&&(r=0),U[e]=P(t[e],t[n],t[r]);D.push(U),N=N.concat(U)}for(let e=0;e<_;e++){let t=e/_,i=m*Math.cos(t*Math.PI/2),n=p*Math.sin(t*Math.PI/2)+f;for(let e=0,t=b.length;e<t;e++){let t=w(b[e],L[e],n);z(t.x,t.y,-i)}for(let e=0,t=E.length;e<t;e++){let t=E[e];U=D[e];for(let e=0,r=t.length;e<r;e++){let r=w(t[e],U[e],n);z(r.x,r.y,-i)}}}let I=p+f;for(let e=0;e<A;e++){let t=d?w(S[e],N[e],I):S[e];y?(o.copy(a.normals[0]).multiplyScalar(t.x),s.copy(a.binormals[0]).multiplyScalar(t.y),l.copy(v[0]).add(o).add(s),z(l.x,l.y,l.z)):z(t.x,t.y,0)}for(let e=1;e<=q;e++)for(let t=0;t<A;t++){let i=d?w(S[t],N[t],I):S[t];y?(o.copy(a.normals[e]).multiplyScalar(i.x),s.copy(a.binormals[e]).multiplyScalar(i.y),l.copy(v[e]).add(o).add(s),z(l.x,l.y,l.z)):z(i.x,i.y,u/q*e)}for(let e=_-1;e>=0;e--){let t=e/_,i=m*Math.cos(t*Math.PI/2),n=p*Math.sin(t*Math.PI/2)+f;for(let e=0,t=b.length;e<t;e++){let t=w(b[e],L[e],n);z(t.x,t.y,u+i)}for(let e=0,t=E.length;e<t;e++){let t=E[e];U=D[e];for(let e=0,r=t.length;e<r;e++){let r=w(t[e],U[e],n);y?z(r.x,r.y+v[q-1].y,v[q-1].x+i):z(r.x,r.y,u+i)}}}function O(e,t){let r=e.length;for(;--r>=0;){let a=r,s=r-1;s<0&&(s=e.length-1);for(let e=0,r=q+2*_;e<r;e++){let r=A*e,o=A*(e+1);!function(e,t,r,a){B(e),B(t),B(a),B(t),B(r),B(a);let s=n.length/3,o=x.generateSideWallUV(i,n,s-6,s-3,s-2,s-1);H(o[0]),H(o[1]),H(o[3]),H(o[1]),H(o[2]),H(o[3])}(t+a+r,t+s+r,t+s+o,t+a+o)}}}function z(e,t,i){h.push(e),h.push(t),h.push(i)}function F(e,t,r){B(e),B(t),B(r);let a=n.length/3,s=x.generateTopUV(i,n,a-3,a-2,a-1);H(s[0]),H(s[1]),H(s[2])}function B(e){n.push(h[3*e+0]),n.push(h[3*e+1]),n.push(h[3*e+2])}function H(e){r.push(e.x),r.push(e.y)}(function(){let e=n.length/3;if(d){let e=0*A;for(let t=0;t<R;t++){let i=T[t];F(i[2]+e,i[1]+e,i[0]+e)}e=A*(q+2*_);for(let t=0;t<R;t++){let i=T[t];F(i[0]+e,i[1]+e,i[2]+e)}}else{for(let e=0;e<R;e++){let t=T[e];F(t[2],t[1],t[0])}for(let e=0;e<R;e++){let t=T[e];F(t[0]+A*q,t[1]+A*q,t[2]+A*q)}}i.addGroup(e,n.length/3-e,0)})(),function(){let e=n.length/3,t=0;O(b,0),t+=b.length;for(let e=0,i=E.length;e<i;e++){let i=E[e];O(i,t),t+=i.length}i.addGroup(e,n.length/3-e,1)}()}(e[a]);this.setAttribute("position",new tM(n,3)),this.setAttribute("uv",new tM(r,2)),this.computeVertexNormals()}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){let e=super.toJSON();return function(e,t,i){if(i.shapes=[],Array.isArray(e))for(let t=0,n=e.length;t<n;t++){let n=e[t];i.shapes.push(n.uuid)}else i.shapes.push(e.uuid);return i.options=Object.assign({},t),void 0!==t.extrudePath&&(i.options.extrudePath=t.extrudePath.toJSON()),i}(this.parameters.shapes,this.parameters.options,e)}static fromJSON(e,t){let i=[];for(let n=0,r=e.shapes.length;n<r;n++){let r=t[e.shapes[n]];i.push(r)}let n=e.options.extrudePath;return void 0!==n&&(e.options.extrudePath=new iC[n.type]().fromJSON(n)),new i5(i,e.options)}}const i8={generateTopUV:function(e,t,i,n,r){let a=t[3*i],s=t[3*i+1],o=t[3*n],l=t[3*n+1],h=t[3*r],c=t[3*r+1];return[new C(a,s),new C(o,l),new C(h,c)]},generateSideWallUV:function(e,t,i,n,r,a){let s=t[3*i],o=t[3*i+1],l=t[3*i+2],h=t[3*n],c=t[3*n+1],q=t[3*n+2],u=t[3*r],d=t[3*r+1],m=t[3*r+2],p=t[3*a],f=t[3*a+1],_=t[3*a+2];return Math.abs(o-c)<Math.abs(s-h)?[new C(s,1-l),new C(h,1-q),new C(u,1-m),new C(p,1-_)]:[new C(o,1-l),new C(c,1-q),new C(d,1-m),new C(f,1-_)]}};class i7 extends iz{constructor(e=1,t=0){let i=(1+Math.sqrt(5))/2;super([-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new i7(e.radius,e.detail)}}class i9 extends iz{constructor(e=1,t=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new i9(e.radius,e.detail)}}class ne extends tC{constructor(e=1,t=1,i=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:i,heightSegments:n};let r=e/2,a=t/2,s=Math.floor(i),o=Math.floor(n),l=s+1,h=o+1,c=e/s,q=t/o,u=[],d=[],m=[],p=[];for(let e=0;e<h;e++){let t=e*q-a;for(let i=0;i<l;i++){let n=i*c-r;d.push(n,-t,0),m.push(0,0,1),p.push(i/s),p.push(1-e/o)}}for(let e=0;e<o;e++)for(let t=0;t<s;t++){let i=t+l*e,n=t+l*(e+1),r=t+1+l*(e+1),a=t+1+l*e;u.push(i,n,a),u.push(n,r,a)}this.setIndex(u),this.setAttribute("position",new tM(d,3)),this.setAttribute("normal",new tM(m,3)),this.setAttribute("uv",new tM(p,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ne(e.width,e.height,e.widthSegments,e.heightSegments)}}class nt extends tC{constructor(e=.5,t=1,i=32,n=1,r=0,a=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:a},i=Math.max(3,i);let s=[],o=[],l=[],h=[],c=e,q=(t-e)/(n=Math.max(1,n)),u=new Q,d=new C;for(let e=0;e<=n;e++){for(let e=0;e<=i;e++){let n=r+e/i*a;u.x=c*Math.cos(n),u.y=c*Math.sin(n),o.push(u.x,u.y,u.z),l.push(0,0,1),d.x=(u.x/t+1)/2,d.y=(u.y/t+1)/2,h.push(d.x,d.y)}c+=q}for(let e=0;e<n;e++){let t=e*(i+1);for(let e=0;e<i;e++){let n=e+t,r=n+i+1,a=n+i+2,o=n+1;s.push(n,r,o),s.push(r,a,o)}}this.setIndex(s),this.setAttribute("position",new tM(o,3)),this.setAttribute("normal",new tM(l,3)),this.setAttribute("uv",new tM(h,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new nt(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class ni extends tC{constructor(e=new iB([new C(0,.5),new C(-.5,-.5),new C(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};let i=[],n=[],r=[],a=[],s=0,o=0;if(!1===Array.isArray(e))l(e);else for(let t=0;t<e.length;t++)l(e[t]),this.addGroup(s,o,t),s+=o,o=0;function l(e){let s=n.length/3,l=e.extractPoints(t),h=l.shape,c=l.holes;!1===i4.isClockWise(h)&&(h=h.reverse());for(let e=0,t=c.length;e<t;e++){let t=c[e];!0===i4.isClockWise(t)&&(c[e]=t.reverse())}let q=i4.triangulateShape(h,c);for(let e=0,t=c.length;e<t;e++){let t=c[e];h=h.concat(t)}for(let e=0,t=h.length;e<t;e++){let t=h[e];n.push(t.x,t.y,0),r.push(0,0,1),a.push(t.x,t.y)}for(let e=0,t=q.length;e<t;e++){let t=q[e],n=t[0]+s,r=t[1]+s,a=t[2]+s;i.push(n,r,a),o+=3}}this.setIndex(i),this.setAttribute("position",new tM(n,3)),this.setAttribute("normal",new tM(r,3)),this.setAttribute("uv",new tM(a,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){let e=super.toJSON();return function(e,t){if(t.shapes=[],Array.isArray(e))for(let i=0,n=e.length;i<n;i++){let n=e[i];t.shapes.push(n.uuid)}else t.shapes.push(e.uuid);return t}(this.parameters.shapes,e)}static fromJSON(e,t){let i=[];for(let n=0,r=e.shapes.length;n<r;n++){let r=t[e.shapes[n]];i.push(r)}return new ni(i,e.curveSegments)}}class nn extends tC{constructor(e=1,t=32,i=16,n=0,r=2*Math.PI,a=0,s=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:i,phiStart:n,phiLength:r,thetaStart:a,thetaLength:s},t=Math.max(3,Math.floor(t)),i=Math.max(2,Math.floor(i));let o=Math.min(a+s,Math.PI),l=0,h=[],c=new Q,q=new Q,u=[],d=[],m=[],p=[];for(let u=0;u<=i;u++){let f=[],_=u/i,g=0;0===u&&0===a?g=.5/t:u===i&&o===Math.PI&&(g=-.5/t);for(let i=0;i<=t;i++){let o=i/t;c.x=-e*Math.cos(n+o*r)*Math.sin(a+_*s),c.y=e*Math.cos(a+_*s),c.z=e*Math.sin(n+o*r)*Math.sin(a+_*s),d.push(c.x,c.y,c.z),q.copy(c).normalize(),m.push(q.x,q.y,q.z),p.push(o+g,1-_),f.push(l++)}h.push(f)}for(let e=0;e<i;e++)for(let n=0;n<t;n++){let t=h[e][n+1],r=h[e][n],s=h[e+1][n],l=h[e+1][n+1];(0!==e||a>0)&&u.push(t,r,l),(e!==i-1||o<Math.PI)&&u.push(r,s,l)}this.setIndex(u),this.setAttribute("position",new tM(d,3)),this.setAttribute("normal",new tM(m,3)),this.setAttribute("uv",new tM(p,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new nn(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class nr extends iz{constructor(e=1,t=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new nr(e.radius,e.detail)}}class na extends tC{constructor(e=1,t=.4,i=12,n=48,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:i,tubularSegments:n,arc:r},i=Math.floor(i),n=Math.floor(n);let a=[],s=[],o=[],l=[],h=new Q,c=new Q,q=new Q;for(let a=0;a<=i;a++)for(let u=0;u<=n;u++){let d=u/n*r,m=a/i*Math.PI*2;c.x=(e+t*Math.cos(m))*Math.cos(d),c.y=(e+t*Math.cos(m))*Math.sin(d),c.z=t*Math.sin(m),s.push(c.x,c.y,c.z),h.x=e*Math.cos(d),h.y=e*Math.sin(d),q.subVectors(c,h).normalize(),o.push(q.x,q.y,q.z),l.push(u/n),l.push(a/i)}for(let e=1;e<=i;e++)for(let t=1;t<=n;t++){let i=(n+1)*e+t-1,r=(n+1)*(e-1)+t-1,s=(n+1)*(e-1)+t,o=(n+1)*e+t;a.push(i,r,o),a.push(r,s,o)}this.setIndex(a),this.setAttribute("position",new tM(s,3)),this.setAttribute("normal",new tM(o,3)),this.setAttribute("uv",new tM(l,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new na(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class ns extends tC{constructor(e=1,t=.4,i=64,n=8,r=2,a=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:i,radialSegments:n,p:r,q:a},i=Math.floor(i),n=Math.floor(n);let s=[],o=[],l=[],h=[],c=new Q,q=new Q,u=new Q,d=new Q,m=new Q,p=new Q,f=new Q;for(let s=0;s<=i;++s){let g=s/i*r*Math.PI*2;_(g,r,a,e,u),_(g+.01,r,a,e,d),p.subVectors(d,u),f.addVectors(d,u),m.crossVectors(p,f),f.crossVectors(m,p),m.normalize(),f.normalize();for(let e=0;e<=n;++e){let r=e/n*Math.PI*2,a=-t*Math.cos(r),d=t*Math.sin(r);c.x=u.x+(a*f.x+d*m.x),c.y=u.y+(a*f.y+d*m.y),c.z=u.z+(a*f.z+d*m.z),o.push(c.x,c.y,c.z),q.subVectors(c,u).normalize(),l.push(q.x,q.y,q.z),h.push(s/i),h.push(e/n)}}for(let e=1;e<=i;e++)for(let t=1;t<=n;t++){let i=(n+1)*(e-1)+(t-1),r=(n+1)*e+(t-1),a=(n+1)*e+t,o=(n+1)*(e-1)+t;s.push(i,r,o),s.push(r,a,o)}function _(e,t,i,n,r){let a=Math.cos(e),s=Math.sin(e),o=i/t*e,l=Math.cos(o);r.x=n*(2+l)*.5*a,r.y=n*(2+l)*s*.5,r.z=n*Math.sin(o)*.5}this.setIndex(s),this.setAttribute("position",new tM(o,3)),this.setAttribute("normal",new tM(l,3)),this.setAttribute("uv",new tM(h,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ns(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class no extends tC{constructor(e=new iA(new Q(-1,-1,0),new Q(-1,1,0),new Q(1,1,0)),t=64,i=1,n=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:i,radialSegments:n,closed:r};let a=e.computeFrenetFrames(t,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;let s=new Q,o=new Q,l=new C,h=new Q,c=[],q=[],u=[],d=[];function m(r){h=e.getPointAt(r/t,h);let l=a.normals[r],u=a.binormals[r];for(let e=0;e<=n;e++){let t=e/n*Math.PI*2,r=Math.sin(t),a=-Math.cos(t);o.x=a*l.x+r*u.x,o.y=a*l.y+r*u.y,o.z=a*l.z+r*u.z,o.normalize(),q.push(o.x,o.y,o.z),s.x=h.x+i*o.x,s.y=h.y+i*o.y,s.z=h.z+i*o.z,c.push(s.x,s.y,s.z)}}(function(){for(let e=0;e<t;e++)m(e);m(!1===r?t:0),function(){for(let e=0;e<=t;e++)for(let i=0;i<=n;i++)l.x=e/t,l.y=i/n,u.push(l.x,l.y)}(),function(){for(let e=1;e<=t;e++)for(let t=1;t<=n;t++){let i=(n+1)*(e-1)+(t-1),r=(n+1)*e+(t-1),a=(n+1)*e+t,s=(n+1)*(e-1)+t;d.push(i,r,s),d.push(r,a,s)}}()})(),this.setIndex(d),this.setAttribute("position",new tM(c,3)),this.setAttribute("normal",new tM(q,3)),this.setAttribute("uv",new tM(u,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){let e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new no(new iC[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class nl extends tm{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new tq(0xffffff),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new tq(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new C(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new eF,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class nh extends tm{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new tq(0xffffff),this.specular=new tq(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new tq(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new C(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new eF,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class nc extends tm{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class nq extends tm{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}function nu(e,t,i){return e&&(i||e.constructor!==t)?"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e):e}class nd{constructor(e,t,i,n){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new t.constructor(i),this.sampleValues=t,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(e){let t=this.parameterPositions,i=this._cachedIndex,n=t[i],r=t[i-1];e:{t:{let a;i:{n:if(!(e<n)){for(let a=i+2;;){if(void 0===n){if(e<r)break n;return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}if(i===a)break;if(r=n,e<(n=t[++i]))break t}a=t.length;break i}if(!(e>=r)){let s=t[1];e<s&&(i=2,r=s);for(let a=i-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(i===a)break;if(n=r,e>=(r=t[--i-1]))break t}a=i,i=0;break i}break e}for(;i<a;){let n=i+a>>>1;e<t[n]?a=n:i=n+1}if(n=t[i],void 0===(r=t[i-1]))return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===n)return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}this._cachedIndex=i,this.intervalChanged_(i,r,n)}return this.interpolate_(i,r,e,n)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){let t=this.resultBuffer,i=this.sampleValues,n=this.valueSize,r=e*n;for(let e=0;e!==n;++e)t[e]=i[r+e];return t}interpolate_(){throw Error("call to abstract method")}intervalChanged_(){}}class nm extends nd{constructor(e,t,i,n){super(e,t,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(e,t,i){let n=this.parameterPositions,r=e-2,a=e+1,s=n[r],o=n[a];if(void 0===s)switch(this.getSettings_().endingStart){case 2401:r=e,s=2*t-i;break;case 2402:r=n.length-2,s=t+n[r]-n[r+1];break;default:r=e,s=i}if(void 0===o)switch(this.getSettings_().endingEnd){case 2401:a=e,o=2*i-t;break;case 2402:a=1,o=i+n[1]-n[0];break;default:a=e-1,o=t}let l=(i-t)*.5,h=this.valueSize;this._weightPrev=l/(t-s),this._weightNext=l/(o-i),this._offsetPrev=r*h,this._offsetNext=a*h}interpolate_(e,t,i,n){let r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=e*s,l=o-s,h=this._offsetPrev,c=this._offsetNext,q=this._weightPrev,u=this._weightNext,d=(i-t)/(n-t),m=d*d,p=m*d,f=-q*p+2*q*m-q*d,_=(1+q)*p+(-1.5-2*q)*m+(-.5+q)*d+1,g=(-1-u)*p+(1.5+u)*m+.5*d,x=u*p-u*m;for(let e=0;e!==s;++e)r[e]=f*a[h+e]+_*a[l+e]+g*a[o+e]+x*a[c+e];return r}}class np extends nd{constructor(e,t,i,n){super(e,t,i,n)}interpolate_(e,t,i,n){let r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=e*s,l=o-s,h=(i-t)/(n-t),c=1-h;for(let e=0;e!==s;++e)r[e]=a[l+e]*c+a[o+e]*h;return r}}class nf extends nd{constructor(e,t,i,n){super(e,t,i,n)}interpolate_(e){return this.copySampleValue_(e-1)}}class n_{constructor(e,t,i,n){if(void 0===e)throw Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=nu(t,this.TimeBufferType),this.values=nu(i,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}static toJSON(e){let t;let i=e.constructor;if(i.toJSON!==this.toJSON)t=i.toJSON(e);else{t={name:e.name,times:nu(e.times,Array),values:nu(e.values,Array)};let i=e.getInterpolation();i!==e.DefaultInterpolation&&(t.interpolation=i)}return t.type=e.ValueTypeName,t}InterpolantFactoryMethodDiscrete(e){return new nf(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new np(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new nm(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case 2300:t=this.InterpolantFactoryMethodDiscrete;break;case 2301:t=this.InterpolantFactoryMethodLinear;break;case 2302:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){let t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw Error(t)}return console.warn("THREE.KeyframeTrack:",t),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}}getValueSize(){return this.values.length/this.times.length}shift(e){if(0!==e){let t=this.times;for(let i=0,n=t.length;i!==n;++i)t[i]+=e}return this}scale(e){if(1!==e){let t=this.times;for(let i=0,n=t.length;i!==n;++i)t[i]*=e}return this}trim(e,t){let i=this.times,n=i.length,r=0,a=n-1;for(;r!==n&&i[r]<e;)++r;for(;-1!==a&&i[a]>t;)--a;if(++a,0!==r||a!==n){r>=a&&(r=(a=Math.max(a,1))-1);let e=this.getValueSize();this.times=i.slice(r,a),this.values=this.values.slice(r*e,a*e)}return this}validate(){let e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);let i=this.times,n=this.values,r=i.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let a=null;for(let t=0;t!==r;t++){let n=i[t];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,t,n),e=!1;break}if(null!==a&&a>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,t,n,a),e=!1;break}a=n}if(void 0!==n&&ArrayBuffer.isView(n)&&!(n instanceof DataView))for(let t=0,i=n.length;t!==i;++t){let i=n[t];if(isNaN(i)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,t,i),e=!1;break}}return e}optimize(){let e=this.times.slice(),t=this.values.slice(),i=this.getValueSize(),n=2302===this.getInterpolation(),r=e.length-1,a=1;for(let s=1;s<r;++s){let r=!1,o=e[s];if(o!==e[s+1]&&(1!==s||o!==e[0])){if(n)r=!0;else{let e=s*i,n=e-i,a=e+i;for(let s=0;s!==i;++s){let i=t[e+s];if(i!==t[n+s]||i!==t[a+s]){r=!0;break}}}}if(r){if(s!==a){e[a]=e[s];let n=s*i,r=a*i;for(let e=0;e!==i;++e)t[r+e]=t[n+e]}++a}}if(r>0){e[a]=e[r];for(let e=r*i,n=a*i,s=0;s!==i;++s)t[n+s]=t[e+s];++a}return a!==e.length?(this.times=e.slice(0,a),this.values=t.slice(0,a*i)):(this.times=e,this.values=t),this}clone(){let e=this.times.slice(),t=this.values.slice(),i=new this.constructor(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}}n_.prototype.TimeBufferType=Float32Array,n_.prototype.ValueBufferType=Float32Array,n_.prototype.DefaultInterpolation=2301;class ng extends n_{constructor(e,t,i){super(e,t,i)}}ng.prototype.ValueTypeName="bool",ng.prototype.ValueBufferType=Array,ng.prototype.DefaultInterpolation=2300,ng.prototype.InterpolantFactoryMethodLinear=void 0,ng.prototype.InterpolantFactoryMethodSmooth=void 0,(class extends n_{}).prototype.ValueTypeName="color",(class extends n_{}).prototype.ValueTypeName="number";class nx extends nd{constructor(e,t,i,n){super(e,t,i,n)}interpolate_(e,t,i,n){let r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=(i-t)/(n-t),l=e*s;for(let e=l+s;l!==e;l+=4)$.slerpFlat(r,0,a,l-s,a,l,o);return r}}class nv extends n_{InterpolantFactoryMethodLinear(e){return new nx(this.times,this.values,this.getValueSize(),e)}}nv.prototype.ValueTypeName="quaternion",nv.prototype.InterpolantFactoryMethodSmooth=void 0;class ny extends n_{constructor(e,t,i){super(e,t,i)}}ny.prototype.ValueTypeName="string",ny.prototype.ValueBufferType=Array,ny.prototype.DefaultInterpolation=2300,ny.prototype.InterpolantFactoryMethodLinear=void 0,ny.prototype.InterpolantFactoryMethodSmooth=void 0,(class extends n_{}).prototype.ValueTypeName="vector";const nM={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}},nS=new class{constructor(e,t,i){let n;let r=this,a=!1,s=0,o=0,l=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=i,this.itemStart=function(e){o++,!1===a&&void 0!==r.onStart&&r.onStart(e,s,o),a=!0},this.itemEnd=function(e){s++,void 0!==r.onProgress&&r.onProgress(e,s,o),s===o&&(a=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(e){void 0!==r.onError&&r.onError(e)},this.resolveURL=function(e){return n?n(e):e},this.setURLModifier=function(e){return n=e,this},this.addHandler=function(e,t){return l.push(e,t),this},this.removeHandler=function(e){let t=l.indexOf(e);return -1!==t&&l.splice(t,2),this},this.getHandler=function(e){for(let t=0,i=l.length;t<i;t+=2){let i=l[t],n=l[t+1];if(i.global&&(i.lastIndex=0),i.test(e))return n}return null}}};class nE{constructor(e){this.manager=void 0!==e?e:nS,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){let i=this;return new Promise(function(n,r){i.load(e,n,t,r)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}nE.DEFAULT_MATERIAL_NAME="__DEFAULT";const nT={};class nb extends Error{constructor(e,t){super(e),this.response=t}}class nw extends nE{constructor(e){super(e)}load(e,t,i,n){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);let r=nM.get(e);if(void 0!==r)return this.manager.itemStart(e),setTimeout(()=>{t&&t(r),this.manager.itemEnd(e)},0),r;if(void 0!==nT[e]){nT[e].push({onLoad:t,onProgress:i,onError:n});return}nT[e]=[],nT[e].push({onLoad:t,onProgress:i,onError:n});let a=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),s=this.mimeType,o=this.responseType;fetch(a).then(t=>{if(200===t.status||0===t.status){if(0===t.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===t.body||void 0===t.body.getReader)return t;let i=nT[e],n=t.body.getReader(),r=t.headers.get("X-File-Size")||t.headers.get("Content-Length"),a=r?parseInt(r):0,s=0!==a,o=0;return new Response(new ReadableStream({start(e){(function t(){n.read().then(({done:n,value:r})=>{if(n)e.close();else{let n=new ProgressEvent("progress",{lengthComputable:s,loaded:o+=r.byteLength,total:a});for(let e=0,t=i.length;e<t;e++){let t=i[e];t.onProgress&&t.onProgress(n)}e.enqueue(r),t()}},t=>{e.error(t)})})()}}))}throw new nb(`fetch for "${t.url}" responded with ${t.status}: ${t.statusText}`,t)}).then(e=>{switch(o){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"document":return e.text().then(e=>new DOMParser().parseFromString(e,s));case"json":return e.json();default:if(void 0===s)return e.text();{let t=/charset="?([^;"\s]*)"?/i.exec(s),i=new TextDecoder(t&&t[1]?t[1].toLowerCase():void 0);return e.arrayBuffer().then(e=>i.decode(e))}}}).then(t=>{nM.add(e,t);let i=nT[e];delete nT[e];for(let e=0,n=i.length;e<n;e++){let n=i[e];n.onLoad&&n.onLoad(t)}}).catch(t=>{let i=nT[e];if(void 0===i)throw this.manager.itemError(e),t;delete nT[e];for(let e=0,n=i.length;e<n;e++){let n=i[e];n.onError&&n.onError(t)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class nA extends nE{constructor(e){super(e)}load(e,t,i,n){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);let r=this,a=nM.get(e);if(void 0!==a)return r.manager.itemStart(e),setTimeout(function(){t&&t(a),r.manager.itemEnd(e)},0),a;let s=U("img");function o(){h(),nM.add(e,this),t&&t(this),r.manager.itemEnd(e)}function l(t){h(),n&&n(t),r.manager.itemError(e),r.manager.itemEnd(e)}function h(){s.removeEventListener("load",o,!1),s.removeEventListener("error",l,!1)}return s.addEventListener("load",o,!1),s.addEventListener("error",l,!1),"data:"!==e.slice(0,5)&&void 0!==this.crossOrigin&&(s.crossOrigin=this.crossOrigin),r.manager.itemStart(e),s.src=e,s}}class nR extends nE{constructor(e){super(e)}load(e,t,i,n){let r=new j,a=new nA(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(e){r.image=e,r.needsUpdate=!0,void 0!==t&&t(r)},i,n),r}}class nC extends e3{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new tq(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){let t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),void 0!==this.target&&(t.object.target=this.target.uuid),t}}const nP=new eR,nL=new Q,nD=new Q;class nU{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new C(512,512),this.map=null,this.mapPass=null,this.matrix=new eR,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new ia,this._frameExtents=new C(1,1),this._viewportCount=1,this._viewports=[new Y(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){let t=this.camera,i=this.matrix;nL.setFromMatrixPosition(e.matrixWorld),t.position.copy(nL),nD.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(nD),t.updateMatrixWorld(),nP.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(nP),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(nP)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){let e={};return 1!==this.intensity&&(e.intensity=this.intensity),0!==this.bias&&(e.bias=this.bias),0!==this.normalBias&&(e.normalBias=this.normalBias),1!==this.radius&&(e.radius=this.radius),(512!==this.mapSize.x||512!==this.mapSize.y)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}const nN=new eR,nI=new Q,nO=new Q;class nz extends nU{constructor(){super(new t1(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new C(4,2),this._viewportCount=6,this._viewports=[new Y(2,1,1,1),new Y(0,1,1,1),new Y(3,1,1,1),new Y(1,1,1,1),new Y(3,0,1,1),new Y(1,0,1,1)],this._cubeDirections=[new Q(1,0,0),new Q(-1,0,0),new Q(0,0,1),new Q(0,0,-1),new Q(0,1,0),new Q(0,-1,0)],this._cubeUps=[new Q(0,1,0),new Q(0,1,0),new Q(0,1,0),new Q(0,1,0),new Q(0,0,1),new Q(0,0,-1)]}updateMatrices(e,t=0){let i=this.camera,n=this.matrix,r=e.distance||i.far;r!==i.far&&(i.far=r,i.updateProjectionMatrix()),nI.setFromMatrixPosition(e.matrixWorld),i.position.copy(nI),nO.copy(i.position),nO.add(this._cubeDirections[t]),i.up.copy(this._cubeUps[t]),i.lookAt(nO),i.updateMatrixWorld(),n.makeTranslation(-nI.x,-nI.y,-nI.z),nN.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(nN)}}class nF extends nC{constructor(e,t,i=0,n=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=i,this.decay=n,this.shadow=new nz}get power(){return 4*this.intensity*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class nB extends nC{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class nH extends t1{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e,this.index=0}}function nV(){return performance.now()}const nk="\\[\\]\\.:\\/",nG=RegExp("["+nk+"]","g"),nW="[^"+nk+"]",nX="[^"+nk.replace("\\.","")+"]",nj=/((?:WC+[\/:])*)/.source.replace("WC",nW),nY=RegExp("^"+nj+/(WCOD+)?/.source.replace("WCOD",nX)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",nW)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",nW)+"$"),nZ=["material","materials","bones","map"];class nK{constructor(e,t,i){this.path=t,this.parsedPath=i||nK.parseTrackName(t),this.node=nK.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,i){return e&&e.isAnimationObjectGroup?new nK.Composite(e,t,i):new nK(e,t,i)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(nG,"")}static parseTrackName(e){let t=nY.exec(e);if(null===t)throw Error("PropertyBinding: Cannot parse trackName: "+e);let i={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},n=i.nodeName&&i.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){let e=i.nodeName.substring(n+1);-1!==nZ.indexOf(e)&&(i.nodeName=i.nodeName.substring(0,n),i.objectName=e)}if(null===i.propertyName||0===i.propertyName.length)throw Error("PropertyBinding: can not parse propertyName from trackName: "+e);return i}static findNode(e,t){if(void 0===t||""===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){let i=e.skeleton.getBoneByName(t);if(void 0!==i)return i}if(e.children){let i=function(e){for(let n=0;n<e.length;n++){let r=e[n];if(r.name===t||r.uuid===t)return r;let a=i(r.children);if(a)return a}return null},n=i(e.children);if(n)return n}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){let i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)e[t++]=i[n]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){let i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=e[t++]}_setValue_array_setNeedsUpdate(e,t){let i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){let i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node,t=this.parsedPath,i=t.objectName,n=t.propertyName,r=t.propertyIndex;if(e||(e=nK.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(i){let n=t.objectIndex;switch(i){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let t=0;t<e.length;t++)if(e[t].name===n){n=t;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(void 0===e[i]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[i]}if(void 0!==n){if(void 0===e[n]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[n]}}let a=e[n];if(void 0===a){console.error("THREE.PropertyBinding: Trying to update property for track: "+t.nodeName+"."+n+" but it wasn't found.",e);return}let s=this.Versioning.None;this.targetObject=e,!0===e.isMaterial?s=this.Versioning.NeedsUpdate:!0===e.isObject3D&&(s=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===n){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}void 0!==e.morphTargetDictionary[r]&&(r=e.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else void 0!==a.fromArray&&void 0!==a.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(o=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=n;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][s]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}nK.Composite=class{constructor(e,t,i){let n=i||nK.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,n)}getValue(e,t){this.bind();let i=this._targetGroup.nCachedObjects_,n=this._bindings[i];void 0!==n&&n.getValue(e,t)}setValue(e,t){let i=this._bindings;for(let n=this._targetGroup.nCachedObjects_,r=i.length;n!==r;++n)i[n].setValue(e,t)}bind(){let e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].bind()}unbind(){let e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].unbind()}},nK.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},nK.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},nK.prototype.GetterByBindingType=[nK.prototype._getValue_direct,nK.prototype._getValue_array,nK.prototype._getValue_arrayElement,nK.prototype._getValue_toArray],nK.prototype.SetterByBindingTypeAndVersioning=[[nK.prototype._setValue_direct,nK.prototype._setValue_direct_setNeedsUpdate,nK.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[nK.prototype._setValue_array,nK.prototype._setValue_array_setNeedsUpdate,nK.prototype._setValue_array_setMatrixWorldNeedsUpdate],[nK.prototype._setValue_arrayElement,nK.prototype._setValue_arrayElement_setNeedsUpdate,nK.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[nK.prototype._setValue_fromArray,nK.prototype._setValue_fromArray_setNeedsUpdate,nK.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]],new Float32Array(1);class nJ{constructor(e=1,t=0,i=0){return this.radius=e,this.phi=t,this.theta=i,this}set(e,t,i){return this.radius=e,this.phi=t,this.theta=i,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=w(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,i){return this.radius=Math.sqrt(e*e+t*t+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,i),this.phi=Math.acos(w(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class n${constructor(){this.type="ShapePath",this.color=new tq,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new iL,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,i,n){return this.currentPath.quadraticCurveTo(e,t,i,n),this}bezierCurveTo(e,t,i,n,r,a){return this.currentPath.bezierCurveTo(e,t,i,n,r,a),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){let t,i,n,r,a;let s=i4.isClockWise,o=this.subPaths;if(0===o.length)return[];let l=[];if(1===o.length)return i=o[0],(n=new iB).curves=i.curves,l.push(n),l;let h=!s(o[0].getPoints());h=e?!h:h;let c=[],q=[],u=[],d=0;q[0]=void 0,u[d]=[];for(let n=0,a=o.length;n<a;n++)t=s(r=(i=o[n]).getPoints()),(t=e?!t:t)?(!h&&q[d]&&d++,q[d]={s:new iB,p:r},q[d].s.curves=i.curves,h&&d++,u[d]=[]):u[d].push({h:i,p:r[0]});if(!q[0])return function(e){let t=[];for(let i=0,n=e.length;i<n;i++){let n=e[i],r=new iB;r.curves=n.curves,t.push(r)}return t}(o);if(q.length>1){let e=!1,t=0;for(let e=0,t=q.length;e<t;e++)c[e]=[];for(let i=0,n=q.length;i<n;i++){let n=u[i];for(let r=0;r<n.length;r++){let a=n[r],s=!0;for(let n=0;n<q.length;n++)(function(e,t){let i=t.length,n=!1;for(let r=i-1,a=0;a<i;r=a++){let i=t[r],s=t[a],o=s.x-i.x,l=s.y-i.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(i=t[a],o=-o,s=t[r],l=-l),e.y<i.y||e.y>s.y)continue;if(e.y===i.y){if(e.x===i.x)return!0}else{let t=l*(e.x-i.x)-o*(e.y-i.y);if(0===t)return!0;if(t<0)continue;n=!n}}else{if(e.y!==i.y)continue;if(s.x<=e.x&&e.x<=i.x||i.x<=e.x&&e.x<=s.x)return!0}}return n})(a.p,q[n].p)&&(i!==n&&t++,s?(s=!1,c[n].push(a)):e=!0);s&&c[i].push(a)}}t>0&&!1===e&&(u=c)}for(let e=0,t=q.length;e<t;e++){n=q[e].s,l.push(n),a=u[e];for(let e=0,t=a.length;e<t;e++)n.holes.push(a[e].h)}return l}}class nQ extends M{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function n1(e,t,i,n){let r=function(e){switch(e){case 1009:case 1010:return{byteLength:1,components:1};case 1012:case 1011:case 1016:return{byteLength:2,components:1};case 1017:case 1018:return{byteLength:2,components:4};case 1014:case 1013:case 1015:return{byteLength:4,components:1};case 35902:return{byteLength:4,components:3}}throw Error(`Unknown texture type ${e}.`)}(n);switch(i){case 1021:case 1024:return e*t;case 1025:return e*t*2;case 1028:case 1029:return e*t/r.components*r.byteLength;case 1030:case 1031:return e*t*2/r.components*r.byteLength;case 1022:return e*t*3/r.components*r.byteLength;case 1023:case 1033:return e*t*4/r.components*r.byteLength;case 33776:case 33777:case 36196:case 37492:return Math.floor((e+3)/4)*Math.floor((t+3)/4)*8;case 33778:case 33779:case 37496:case 37808:return Math.floor((e+3)/4)*Math.floor((t+3)/4)*16;case 35841:case 35843:return Math.max(e,16)*Math.max(t,8)/4;case 35840:case 35842:return Math.max(e,8)*Math.max(t,8)/2;case 37809:return Math.floor((e+4)/5)*Math.floor((t+3)/4)*16;case 37810:return Math.floor((e+4)/5)*Math.floor((t+4)/5)*16;case 37811:return Math.floor((e+5)/6)*Math.floor((t+4)/5)*16;case 37812:return Math.floor((e+5)/6)*Math.floor((t+5)/6)*16;case 37813:return Math.floor((e+7)/8)*Math.floor((t+4)/5)*16;case 37814:return Math.floor((e+7)/8)*Math.floor((t+5)/6)*16;case 37815:return Math.floor((e+7)/8)*Math.floor((t+7)/8)*16;case 37816:return Math.floor((e+9)/10)*Math.floor((t+4)/5)*16;case 37817:return Math.floor((e+9)/10)*Math.floor((t+5)/6)*16;case 37818:return Math.floor((e+9)/10)*Math.floor((t+7)/8)*16;case 37819:return Math.floor((e+9)/10)*Math.floor((t+9)/10)*16;case 37820:return Math.floor((e+11)/12)*Math.floor((t+9)/10)*16;case 37821:return Math.floor((e+11)/12)*Math.floor((t+11)/12)*16;case 36492:case 36494:case 36495:case 36285:case 36286:return Math.ceil(e/4)*Math.ceil(t/4)*16;case 36283:case 36284:return Math.ceil(e/4)*Math.ceil(t/4)*8}throw Error(`Unable to determine texture byte length for ${i} format.`)}/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function n2(){let e=null,t=!1,i=null,n=null;function r(t,a){i(t,a),n=e.requestAnimationFrame(r)}return{start:function(){!0!==t&&null!==i&&(n=e.requestAnimationFrame(r),t=!0)},stop:function(){e.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(e){i=e},setContext:function(t){e=t}}}function n3(e){let t=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),t.get(e)},remove:function(i){i.isInterleavedBufferAttribute&&(i=i.data);let n=t.get(i);n&&(e.deleteBuffer(n.buffer),t.delete(i))},update:function(i,n){if(i.isInterleavedBufferAttribute&&(i=i.data),i.isGLBufferAttribute){let e=t.get(i);(!e||e.version<i.version)&&t.set(i,{buffer:i.buffer,type:i.type,bytesPerElement:i.elementSize,version:i.version});return}let r=t.get(i);if(void 0===r)t.set(i,function(t,i){let n;let r=t.array,a=t.usage,s=r.byteLength,o=e.createBuffer();if(e.bindBuffer(i,o),e.bufferData(i,r,a),t.onUploadCallback(),r instanceof Float32Array)n=e.FLOAT;else if(r instanceof Uint16Array)n=t.isFloat16BufferAttribute?e.HALF_FLOAT:e.UNSIGNED_SHORT;else if(r instanceof Int16Array)n=e.SHORT;else if(r instanceof Uint32Array)n=e.UNSIGNED_INT;else if(r instanceof Int32Array)n=e.INT;else if(r instanceof Int8Array)n=e.BYTE;else if(r instanceof Uint8Array)n=e.UNSIGNED_BYTE;else if(r instanceof Uint8ClampedArray)n=e.UNSIGNED_BYTE;else throw Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);return{buffer:o,type:n,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version,size:s}}(i,n));else if(r.version<i.version){if(r.size!==i.array.byteLength)throw Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(t,i,n){let r=i.array,a=i.updateRanges;if(e.bindBuffer(n,t),0===a.length)e.bufferSubData(n,0,r);else{a.sort((e,t)=>e.start-t.start);let t=0;for(let e=1;e<a.length;e++){let i=a[t],n=a[e];n.start<=i.start+i.count+1?i.count=Math.max(i.count,n.start+n.count-i.start):a[++t]=n}a.length=t+1;for(let t=0,i=a.length;t<i;t++){let i=a[t];e.bufferSubData(n,i.start*r.BYTES_PER_ELEMENT,r,i.start,i.count)}i.clearUpdateRanges()}i.onUploadCallback()}(r.buffer,i,n),r.version=i.version}}}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"173"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="173");const n4={alphahash_fragment:"#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n	#if ! defined( GL_ANGLE_multi_draw )\n	#define gl_DrawID _gl_DrawID\n	uniform int _gl_DrawID;\n	#endif\n	uniform highp sampler2D batchingTexture;\n	uniform highp usampler2D batchingIdTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n	float getIndirectIndex( const in int i ) {\n		int size = textureSize( batchingIdTexture, 0 ).x;\n		int x = i % size;\n		int y = i / size;\n		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n	}\n#endif\n#ifdef USE_BATCHING_COLOR\n	uniform sampler2D batchingColorTexture;\n	vec3 getBatchingColor( const in float i ) {\n		int size = textureSize( batchingColorTexture, 0 ).x;\n		int j = int( i );\n		int x = j % size;\n		int y = j / size;\n		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n	}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	varying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n	vColor.xyz *= batchingColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n		emissiveColor = sRGBTransferEOTF( emissiveColor );\n	#endif\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"vec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n	varying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if ( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n	material.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	float dispersion;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF )\n	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n	vFragDepth = 1.0 + gl_Position.w;\n	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif",map_fragment:"#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n	uniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif",morphinstance_vertex:"#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	#endif\n	uniform sampler2DArray morphTargetsTexture;\n	uniform ivec2 morphTargetsTextureSize;\n	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n		int y = texelIndex / morphTargetsTextureSize.x;\n		int x = texelIndex - y * morphTargetsTextureSize.x;\n		ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n		return texelFetch( morphTargetsTexture, morphUV, 0 );\n	}\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n	if( v <= 0.0 )\n		return vec4( 0., 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec4( 1., 1., 1., 1. );\n	float vuf;\n	float af = modf( v * PackFactors.a, vuf );\n	float bf = modf( vuf * ShiftRight8, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n	if( v <= 0.0 )\n		return vec3( 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec3( 1., 1., 1. );\n	float vuf;\n	float bf = modf( v * PackFactors.b, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n	if( v <= 0.0 )\n		return vec2( 0., 0. );\n	if( v >= 1.0 )\n		return vec2( 1., 1. );\n	float vuf;\n	float gf = modf( v * 256., vuf );\n	return vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n	return dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		float shadow = 1.0;\n		vec3 lightToPosition = shadowCoord.xyz;\n		\n		float lightToPositionLength = length( lightToPosition );\n		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;\n			vec3 bd3D = normalize( lightToPosition );\n			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n				shadow = (\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n				) * ( 1.0 / 9.0 );\n			#else\n				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n			#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	const float StartCompression = 0.8 - 0.04;\n	const float Desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min( color.r, min( color.g, color.b ) );\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max( color.r, max( color.g, color.b ) );\n	if ( peak < StartCompression ) return color;\n	float d = 1. - StartCompression;\n	float newPeak = 1. - d * d / ( peak + d - StartCompression );\n	color *= newPeak / peak;\n	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n	return mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec4 transmittedLight;\n		vec3 transmittance;\n		#ifdef USE_DISPERSION\n			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n			for ( int i = 0; i < 3; i ++ ) {\n				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n				vec3 refractedRayExit = position + transmissionRay;\n				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n				vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n				refractionCoords += 1.0;\n				refractionCoords /= 2.0;\n				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n				transmittedLight[ i ] = transmissionSample[ i ];\n				transmittedLight.a += transmissionSample.a;\n				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n			}\n			transmittedLight.a /= 3.0;\n		#else\n			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n			vec3 refractedRayExit = position + transmissionRay;\n			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n			vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n			refractionCoords += 1.0;\n			refractionCoords /= 2.0;\n			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		#endif\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#elif DEPTH_PACKING == 3202\n		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n	#elif DEPTH_PACKING == 3203\n		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n	#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n	uniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix[ 3 ];\n	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}"},n6={common:{diffuse:{value:new tq(0xffffff)},opacity:{value:1},map:{value:null},mapTransform:{value:new P},alphaMap:{value:null},alphaMapTransform:{value:new P},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new P}},envmap:{envMap:{value:null},envMapRotation:{value:new P},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new P}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new P}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new P},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new P},normalScale:{value:new C(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new P},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new P}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new P}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new P}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new tq(0xffffff)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new tq(0xffffff)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new P},alphaTest:{value:0},uvTransform:{value:new P}},sprite:{diffuse:{value:new tq(0xffffff)},opacity:{value:1},center:{value:new C(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new P},alphaMap:{value:null},alphaMapTransform:{value:new P},alphaTest:{value:0}}},n0={basic:{uniforms:tX([n6.common,n6.specularmap,n6.envmap,n6.aomap,n6.lightmap,n6.fog]),vertexShader:n4.meshbasic_vert,fragmentShader:n4.meshbasic_frag},lambert:{uniforms:tX([n6.common,n6.specularmap,n6.envmap,n6.aomap,n6.lightmap,n6.emissivemap,n6.bumpmap,n6.normalmap,n6.displacementmap,n6.fog,n6.lights,{emissive:{value:new tq(0)}}]),vertexShader:n4.meshlambert_vert,fragmentShader:n4.meshlambert_frag},phong:{uniforms:tX([n6.common,n6.specularmap,n6.envmap,n6.aomap,n6.lightmap,n6.emissivemap,n6.bumpmap,n6.normalmap,n6.displacementmap,n6.fog,n6.lights,{emissive:{value:new tq(0)},specular:{value:new tq(1118481)},shininess:{value:30}}]),vertexShader:n4.meshphong_vert,fragmentShader:n4.meshphong_frag},standard:{uniforms:tX([n6.common,n6.envmap,n6.aomap,n6.lightmap,n6.emissivemap,n6.bumpmap,n6.normalmap,n6.displacementmap,n6.roughnessmap,n6.metalnessmap,n6.fog,n6.lights,{emissive:{value:new tq(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:n4.meshphysical_vert,fragmentShader:n4.meshphysical_frag},toon:{uniforms:tX([n6.common,n6.aomap,n6.lightmap,n6.emissivemap,n6.bumpmap,n6.normalmap,n6.displacementmap,n6.gradientmap,n6.fog,n6.lights,{emissive:{value:new tq(0)}}]),vertexShader:n4.meshtoon_vert,fragmentShader:n4.meshtoon_frag},matcap:{uniforms:tX([n6.common,n6.bumpmap,n6.normalmap,n6.displacementmap,n6.fog,{matcap:{value:null}}]),vertexShader:n4.meshmatcap_vert,fragmentShader:n4.meshmatcap_frag},points:{uniforms:tX([n6.points,n6.fog]),vertexShader:n4.points_vert,fragmentShader:n4.points_frag},dashed:{uniforms:tX([n6.common,n6.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:n4.linedashed_vert,fragmentShader:n4.linedashed_frag},depth:{uniforms:tX([n6.common,n6.displacementmap]),vertexShader:n4.depth_vert,fragmentShader:n4.depth_frag},normal:{uniforms:tX([n6.common,n6.bumpmap,n6.normalmap,n6.displacementmap,{opacity:{value:1}}]),vertexShader:n4.meshnormal_vert,fragmentShader:n4.meshnormal_frag},sprite:{uniforms:tX([n6.sprite,n6.fog]),vertexShader:n4.sprite_vert,fragmentShader:n4.sprite_frag},background:{uniforms:{uvTransform:{value:new P},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:n4.background_vert,fragmentShader:n4.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new P}},vertexShader:n4.backgroundCube_vert,fragmentShader:n4.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:n4.cube_vert,fragmentShader:n4.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:n4.equirect_vert,fragmentShader:n4.equirect_frag},distanceRGBA:{uniforms:tX([n6.common,n6.displacementmap,{referencePosition:{value:new Q},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:n4.distanceRGBA_vert,fragmentShader:n4.distanceRGBA_frag},shadow:{uniforms:tX([n6.lights,n6.fog,{color:{value:new tq(0)},opacity:{value:1}}]),vertexShader:n4.shadow_vert,fragmentShader:n4.shadow_frag}};n0.physical={uniforms:tX([n0.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new P},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new P},clearcoatNormalScale:{value:new C(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new P},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new P},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new P},sheen:{value:0},sheenColor:{value:new tq(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new P},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new P},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new P},transmissionSamplerSize:{value:new C},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new P},attenuationDistance:{value:0},attenuationColor:{value:new tq(0)},specularColor:{value:new tq(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new P},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new P},anisotropyVector:{value:new C},anisotropyMap:{value:null},anisotropyMapTransform:{value:new P}}]),vertexShader:n4.meshphysical_vert,fragmentShader:n4.meshphysical_frag};const n5={r:0,b:0,g:0},n8=new eF,n7=new eR;function n9(e,t,i,n,r,a,s){let o,l;let h=new tq(0),c=+(!0!==a),q=null,u=0,d=null;function m(e){let n=!0===e.isScene?e.background:null;return n&&n.isTexture&&(n=(e.backgroundBlurriness>0?i:t).get(n)),n}function p(t,i){t.getRGB(n5,tj(e)),n.buffers.color.setClear(n5.r,n5.g,n5.b,i,s)}return{getClearColor:function(){return h},setClearColor:function(e,t=1){h.set(e),p(h,c=t)},getClearAlpha:function(){return c},setClearAlpha:function(e){p(h,c=e)},render:function(t){let i=!1,r=m(t);null===r?p(h,c):r&&r.isColor&&(p(r,1),i=!0);let a=e.xr.getEnvironmentBlendMode();"additive"===a?n.buffers.color.setClear(0,0,0,1,s):"alpha-blend"===a&&n.buffers.color.setClear(0,0,0,0,s),(e.autoClear||i)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil))},addToRenderList:function(t,i){let n=m(i);n&&(n.isCubeTexture||306===n.mapping)?(void 0===l&&((l=new tV(new tG(1,1,1),new tZ({name:"BackgroundCubeMaterial",uniforms:tW(n0.backgroundCube.uniforms),vertexShader:n0.backgroundCube.vertexShader,fragmentShader:n0.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(e,t,i){this.matrixWorld.copyPosition(i.matrixWorld)},Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(l)),n8.copy(i.backgroundRotation),n8.x*=-1,n8.y*=-1,n8.z*=-1,n.isCubeTexture&&!1===n.isRenderTargetTexture&&(n8.y*=-1,n8.z*=-1),l.material.uniforms.envMap.value=n,l.material.uniforms.flipEnvMap.value=n.isCubeTexture&&!1===n.isRenderTargetTexture?-1:1,l.material.uniforms.backgroundBlurriness.value=i.backgroundBlurriness,l.material.uniforms.backgroundIntensity.value=i.backgroundIntensity,l.material.uniforms.backgroundRotation.value.setFromMatrix4(n7.makeRotationFromEuler(n8)),l.material.toneMapped=F.getTransfer(n.colorSpace)!==v,(q!==n||u!==n.version||d!==e.toneMapping)&&(l.material.needsUpdate=!0,q=n,u=n.version,d=e.toneMapping),l.layers.enableAll(),t.unshift(l,l.geometry,l.material,0,0,null)):n&&n.isTexture&&(void 0===o&&((o=new tV(new ne(2,2),new tZ({name:"BackgroundMaterial",uniforms:tW(n0.background.uniforms),vertexShader:n0.background.vertexShader,fragmentShader:n0.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(o.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(o)),o.material.uniforms.t2D.value=n,o.material.uniforms.backgroundIntensity.value=i.backgroundIntensity,o.material.toneMapped=F.getTransfer(n.colorSpace)!==v,!0===n.matrixAutoUpdate&&n.updateMatrix(),o.material.uniforms.uvTransform.value.copy(n.matrix),(q!==n||u!==n.version||d!==e.toneMapping)&&(o.material.needsUpdate=!0,q=n,u=n.version,d=e.toneMapping),o.layers.enableAll(),t.unshift(o,o.geometry,o.material,0,0,null))},dispose:function(){void 0!==l&&(l.geometry.dispose(),l.material.dispose(),l=void 0),void 0!==o&&(o.geometry.dispose(),o.material.dispose(),o=void 0)}}}function re(e,t){let i=e.getParameter(e.MAX_VERTEX_ATTRIBS),n={},r=h(null),a=r,s=!1;function o(t){return e.bindVertexArray(t)}function l(t){return e.deleteVertexArray(t)}function h(e){let t=[],n=[],r=[];for(let e=0;e<i;e++)t[e]=0,n[e]=0,r[e]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:r,object:e,attributes:{},index:null}}function c(){let e=a.newAttributes;for(let t=0,i=e.length;t<i;t++)e[t]=0}function q(e){u(e,0)}function u(t,i){let n=a.newAttributes,r=a.enabledAttributes,s=a.attributeDivisors;n[t]=1,0===r[t]&&(e.enableVertexAttribArray(t),r[t]=1),s[t]!==i&&(e.vertexAttribDivisor(t,i),s[t]=i)}function d(){let t=a.newAttributes,i=a.enabledAttributes;for(let n=0,r=i.length;n<r;n++)i[n]!==t[n]&&(e.disableVertexAttribArray(n),i[n]=0)}function m(t,i,n,r,a,s,o){!0===o?e.vertexAttribIPointer(t,i,n,a,s):e.vertexAttribPointer(t,i,n,r,a,s)}function p(){f(),s=!0,a!==r&&o((a=r).object)}function f(){r.geometry=null,r.program=null,r.wireframe=!1}return{setup:function(i,r,l,p,f){let _=!1,g=function(t,i,r){let a=!0===r.wireframe,s=n[t.id];void 0===s&&(s={},n[t.id]=s);let o=s[i.id];void 0===o&&(o={},s[i.id]=o);let l=o[a];return void 0===l&&(l=h(e.createVertexArray()),o[a]=l),l}(p,l,r);a!==g&&o((a=g).object),(_=function(e,t,i,n){let r=a.attributes,s=t.attributes,o=0,l=i.getAttributes();for(let t in l)if(l[t].location>=0){let i=r[t],n=s[t];if(void 0===n&&("instanceMatrix"===t&&e.instanceMatrix&&(n=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(n=e.instanceColor)),void 0===i||i.attribute!==n||n&&i.data!==n.data)return!0;o++}return a.attributesNum!==o||a.index!==n}(i,p,l,f))&&function(e,t,i,n){let r={},s=t.attributes,o=0,l=i.getAttributes();for(let t in l)if(l[t].location>=0){let i=s[t];void 0===i&&("instanceMatrix"===t&&e.instanceMatrix&&(i=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(i=e.instanceColor));let n={};n.attribute=i,i&&i.data&&(n.data=i.data),r[t]=n,o++}a.attributes=r,a.attributesNum=o,a.index=n}(i,p,l,f),null!==f&&t.update(f,e.ELEMENT_ARRAY_BUFFER),(_||s)&&(s=!1,function(i,n,r,a){c();let s=a.attributes,o=r.getAttributes(),l=n.defaultAttributeValues;for(let n in o){let r=o[n];if(r.location>=0){let o=s[n];if(void 0===o&&("instanceMatrix"===n&&i.instanceMatrix&&(o=i.instanceMatrix),"instanceColor"===n&&i.instanceColor&&(o=i.instanceColor)),void 0!==o){let n=o.normalized,s=o.itemSize,l=t.get(o);if(void 0===l)continue;let h=l.buffer,c=l.type,d=l.bytesPerElement,p=c===e.INT||c===e.UNSIGNED_INT||1013===o.gpuType;if(o.isInterleavedBufferAttribute){let t=o.data,l=t.stride,f=o.offset;if(t.isInstancedInterleavedBuffer){for(let e=0;e<r.locationSize;e++)u(r.location+e,t.meshPerAttribute);!0!==i.isInstancedMesh&&void 0===a._maxInstanceCount&&(a._maxInstanceCount=t.meshPerAttribute*t.count)}else for(let e=0;e<r.locationSize;e++)q(r.location+e);e.bindBuffer(e.ARRAY_BUFFER,h);for(let e=0;e<r.locationSize;e++)m(r.location+e,s/r.locationSize,c,n,l*d,(f+s/r.locationSize*e)*d,p)}else{if(o.isInstancedBufferAttribute){for(let e=0;e<r.locationSize;e++)u(r.location+e,o.meshPerAttribute);!0!==i.isInstancedMesh&&void 0===a._maxInstanceCount&&(a._maxInstanceCount=o.meshPerAttribute*o.count)}else for(let e=0;e<r.locationSize;e++)q(r.location+e);e.bindBuffer(e.ARRAY_BUFFER,h);for(let e=0;e<r.locationSize;e++)m(r.location+e,s/r.locationSize,c,n,s*d,s/r.locationSize*e*d,p)}}else if(void 0!==l){let t=l[n];if(void 0!==t)switch(t.length){case 2:e.vertexAttrib2fv(r.location,t);break;case 3:e.vertexAttrib3fv(r.location,t);break;case 4:e.vertexAttrib4fv(r.location,t);break;default:e.vertexAttrib1fv(r.location,t)}}}}d()}(i,r,l,p),null!==f&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t.get(f).buffer))},reset:p,resetDefaultState:f,dispose:function(){for(let e in p(),n){let t=n[e];for(let e in t){let i=t[e];for(let e in i)l(i[e].object),delete i[e];delete t[e]}delete n[e]}},releaseStatesOfGeometry:function(e){if(void 0===n[e.id])return;let t=n[e.id];for(let e in t){let i=t[e];for(let e in i)l(i[e].object),delete i[e];delete t[e]}delete n[e.id]},releaseStatesOfProgram:function(e){for(let t in n){let i=n[t];if(void 0===i[e.id])continue;let r=i[e.id];for(let e in r)l(r[e].object),delete r[e];delete i[e.id]}},initAttributes:c,enableAttribute:q,disableUnusedAttributes:d}}function rt(e,t,i){let n;function r(t,r,a){0!==a&&(e.drawArraysInstanced(n,t,r,a),i.update(r,n,a))}this.setMode=function(e){n=e},this.render=function(t,r){e.drawArrays(n,t,r),i.update(r,n,1)},this.renderInstances=r,this.renderMultiDraw=function(e,r,a){if(0===a)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,e,0,r,0,a);let s=0;for(let e=0;e<a;e++)s+=r[e];i.update(s,n,1)},this.renderMultiDrawInstances=function(e,a,s,o){if(0===s)return;let l=t.get("WEBGL_multi_draw");if(null===l)for(let t=0;t<e.length;t++)r(e[t],a[t],o[t]);else{l.multiDrawArraysInstancedWEBGL(n,e,0,a,0,o,0,s);let t=0;for(let e=0;e<s;e++)t+=a[e]*o[e];i.update(t,n,1)}}}function ri(e,t,i,n){let r;function a(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let s=void 0!==i.precision?i.precision:"highp",o=a(s);o!==s&&(console.warn("THREE.WebGLRenderer:",s,"not supported, using",o,"instead."),s=o);let l=!0===i.logarithmicDepthBuffer,h=!0===i.reverseDepthBuffer&&t.has("EXT_clip_control"),c=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),q=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_TEXTURE_SIZE),d=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),m=e.getParameter(e.MAX_VERTEX_ATTRIBS),p=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS);return{isWebGL2:!0,getMaxAnisotropy:function(){if(void 0!==r)return r;if(!0===t.has("EXT_texture_filter_anisotropic")){let i=t.get("EXT_texture_filter_anisotropic");r=e.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r},getMaxPrecision:a,textureFormatReadable:function(t){return 1023===t||n.convert(t)===e.getParameter(e.IMPLEMENTATION_COLOR_READ_FORMAT)},textureTypeReadable:function(i){let r=1016===i&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return 1009===i||n.convert(i)===e.getParameter(e.IMPLEMENTATION_COLOR_READ_TYPE)||1015===i||!!r},precision:s,logarithmicDepthBuffer:l,reverseDepthBuffer:h,maxTextures:c,maxVertexTextures:q,maxTextureSize:u,maxCubemapSize:d,maxAttributes:m,maxVertexUniforms:p,maxVaryings:e.getParameter(e.MAX_VARYING_VECTORS),maxFragmentUniforms:e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),vertexTextures:q>0,maxSamples:e.getParameter(e.MAX_SAMPLES)}}function rn(e){let t=this,i=null,n=0,r=!1,a=!1,s=new it,o=new P,l={value:null,needsUpdate:!1};function h(e,i,n,r){let a=null!==e?e.length:0,h=null;if(0!==a){if(h=l.value,!0!==r||null===h){let t=n+4*a,r=i.matrixWorldInverse;o.getNormalMatrix(r),(null===h||h.length<t)&&(h=new Float32Array(t));for(let t=0,i=n;t!==a;++t,i+=4)s.copy(e[t]).applyMatrix4(r,o),s.normal.toArray(h,i),h[i+3]=s.constant}l.value=h,l.needsUpdate=!0}return t.numPlanes=a,t.numIntersection=0,h}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t){let i=0!==e.length||t||0!==n||r;return r=t,n=e.length,i},this.beginShadows=function(){a=!0,h(null)},this.endShadows=function(){a=!1},this.setGlobalState=function(e,t){i=h(e,t,0)},this.setState=function(s,o,c){let q=s.clippingPlanes,u=s.clipIntersection,d=s.clipShadows,m=e.get(s);if(r&&null!==q&&0!==q.length&&(!a||d)){let e=a?0:n,t=4*e,r=m.clippingState||null;l.value=r,r=h(q,o,t,c);for(let e=0;e!==t;++e)r[e]=i[e];m.clippingState=r,this.numIntersection=u?this.numPlanes:0,this.numPlanes+=e}else a?h(null):(l.value!==i&&(l.value=i,l.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0)}}function rr(e){let t=new WeakMap;function i(e,t){return 303===t?e.mapping=301:304===t&&(e.mapping=302),e}function n(e){let i=e.target;i.removeEventListener("dispose",n);let r=t.get(i);void 0!==r&&(t.delete(i),r.dispose())}return{get:function(r){if(r&&r.isTexture){let a=r.mapping;if(303===a||304===a){if(t.has(r))return i(t.get(r).texture,r.mapping);{let a=r.image;if(!a||!(a.height>0))return null;{let s=new t4(a.height);return s.fromEquirectangularTexture(e,r),t.set(r,s),r.addEventListener("dispose",n),i(s.texture,r.mapping)}}}}return r},dispose:function(){t=new WeakMap}}}const ra=[.125,.215,.35,.446,.526,.582],rs=new class extends tK{constructor(e=-1,t=1,i=1,n=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=i,this.bottom=n,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this}setViewOffset(e,t,i,n,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){let e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2,r=i-e,a=i+e,s=n+t,o=n-t;if(null!==this.view&&this.view.enabled){let e=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=e*this.view.offsetX,a=r+e*this.view.width,s-=t*this.view.offsetY,o=s-t*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){let t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}},ro=new tq;let rl=null,rh=0,rc=0,rq=!1;const ru=(1+Math.sqrt(5))/2,rd=1/ru,rm=[new Q(-ru,rd,0),new Q(ru,rd,0),new Q(-rd,0,ru),new Q(rd,0,ru),new Q(0,ru,-rd),new Q(0,ru,rd),new Q(-1,1,-1),new Q(1,1,-1),new Q(-1,1,1),new Q(1,1,1)];class rp{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,i=.1,n=100){rl=this._renderer.getRenderTarget(),rh=this._renderer.getActiveCubeFace(),rc=this._renderer.getActiveMipmapLevel(),rq=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);let r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,i,n,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=rx(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=rg(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(rl,rh,rc),this._renderer.xr.enabled=rq,e.scissorTest=!1,r_(e,0,0,e.width,e.height)}_fromTexture(e,t){301===e.mapping||302===e.mapping?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),rl=this._renderer.getRenderTarget(),rh=this._renderer.getActiveCubeFace(),rc=this._renderer.getActiveMipmapLevel(),rq=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;let i=t||this._allocateTargets();return this._textureToCubeUV(e,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){let e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,i={magFilter:1006,minFilter:1006,generateMipmaps:!1,type:1016,format:1023,colorSpace:g,depthBuffer:!1},n=rf(e,t,i);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=rf(e,t,i);let{_lodMax:n}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){let t=[],i=[],n=[],r=e,a=e-4+1+ra.length;for(let s=0;s<a;s++){let a=Math.pow(2,r);i.push(a);let o=1/a;s>e-4?o=ra[s-e+4-1]:0===s&&(o=0),n.push(o);let l=1/(a-2),h=-l,c=1+l,q=[h,h,c,h,c,c,h,h,c,c,h,c],u=new Float32Array(108),d=new Float32Array(72),m=new Float32Array(36);for(let e=0;e<6;e++){let t=e%3*2/3-1,i=e>2?0:-1,n=[t,i,0,t+2/3,i,0,t+2/3,i+1,0,t,i,0,t+2/3,i+1,0,t,i+1,0];u.set(n,18*e),d.set(q,12*e);let r=[e,e,e,e,e,e];m.set(r,6*e)}let p=new tC;p.setAttribute("position",new tx(u,3)),p.setAttribute("uv",new tx(d,2)),p.setAttribute("faceIndex",new tx(m,1)),t.push(p),r>4&&r--}return{lodPlanes:t,sizeLods:i,sigmas:n}}(n)),this._blurMaterial=new tZ({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${n}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:new Float32Array(20)},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:new Q(0,1,0)}},vertexShader:rv(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:0,depthTest:!1,depthWrite:!1})}return n}_compileMaterial(e){let t=new tV(this._lodPlanes[0],e);this._renderer.compile(t,rs)}_sceneToCubeUV(e,t,i,n){let r=new t1(90,1,t,i),a=[1,-1,1,1,1,1],s=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,h=o.toneMapping;o.getClearColor(ro),o.toneMapping=0,o.autoClear=!1;let c=new tp({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),q=new tV(new tG,c),u=!1,d=e.background;d?d.isColor&&(c.color.copy(d),e.background=null,u=!0):(c.color.copy(ro),u=!0);for(let t=0;t<6;t++){let i=t%3;0===i?(r.up.set(0,a[t],0),r.lookAt(s[t],0,0)):1===i?(r.up.set(0,0,a[t]),r.lookAt(0,s[t],0)):(r.up.set(0,a[t],0),r.lookAt(0,0,s[t]));let l=this._cubeSize;r_(n,i*l,t>2?l:0,l,l),o.setRenderTarget(n),u&&o.render(q,r),o.render(e,r)}q.geometry.dispose(),q.material.dispose(),o.toneMapping=h,o.autoClear=l,e.background=d}_textureToCubeUV(e,t){let i=this._renderer,n=301===e.mapping||302===e.mapping;n?(null===this._cubemapMaterial&&(this._cubemapMaterial=rx()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===e.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=rg());let r=n?this._cubemapMaterial:this._equirectMaterial,a=new tV(this._lodPlanes[0],r);r.uniforms.envMap.value=e;let s=this._cubeSize;r_(t,0,0,3*s,2*s),i.setRenderTarget(t),i.render(a,rs)}_applyPMREM(e){let t=this._renderer,i=t.autoClear;t.autoClear=!1;let n=this._lodPlanes.length;for(let t=1;t<n;t++){let i=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),r=rm[(n-t-1)%rm.length];this._blur(e,t-1,t,i,r)}t.autoClear=i}_blur(e,t,i,n,r){let a=this._pingPongRenderTarget;this._halfBlur(e,a,t,i,n,"latitudinal",r),this._halfBlur(a,e,i,i,n,"longitudinal",r)}_halfBlur(e,t,i,n,r,a,s){let o=this._renderer,l=this._blurMaterial;"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");let h=new tV(this._lodPlanes[n],l),c=l.uniforms,q=this._sizeLods[i]-1,u=isFinite(r)?Math.PI/(2*q):2*Math.PI/39,d=r/u,m=isFinite(r)?1+Math.floor(3*d):20;m>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);let p=[],f=0;for(let e=0;e<20;++e){let t=e/d,i=Math.exp(-t*t/2);p.push(i),0===e?f+=i:e<m&&(f+=2*i)}for(let e=0;e<p.length;e++)p[e]=p[e]/f;c.envMap.value=e.texture,c.samples.value=m,c.weights.value=p,c.latitudinal.value="latitudinal"===a,s&&(c.poleAxis.value=s);let{_lodMax:_}=this;c.dTheta.value=u,c.mipInt.value=_-i;let g=this._sizeLods[n],x=4*(this._cubeSize-g);r_(t,3*g*(n>_-4?n-_+4:0),x,3*g,2*g),o.setRenderTarget(t),o.render(h,rs)}}function rf(e,t,i){let n=new K(e,t,i);return n.texture.mapping=306,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function r_(e,t,i,n,r){e.viewport.set(t,i,n,r),e.scissor.set(t,i,n,r)}function rg(){return new tZ({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:rv(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:0,depthTest:!1,depthWrite:!1})}function rx(){return new tZ({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:rv(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:0,depthTest:!1,depthWrite:!1})}function rv(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function ry(e){let t=new WeakMap,i=null;function n(e){let i=e.target;i.removeEventListener("dispose",n);let r=t.get(i);void 0!==r&&(t.delete(i),r.dispose())}return{get:function(r){if(r&&r.isTexture){let a=r.mapping,s=303===a||304===a,o=301===a||302===a;if(s||o){let a=t.get(r),l=void 0!==a?a.texture.pmremVersion:0;if(r.isRenderTargetTexture&&r.pmremVersion!==l)return null===i&&(i=new rp(e)),(a=s?i.fromEquirectangular(r,a):i.fromCubemap(r,a)).texture.pmremVersion=r.pmremVersion,t.set(r,a),a.texture;if(void 0!==a)return a.texture;{let l=r.image;return s&&l&&l.height>0||o&&l&&function(e){let t=0;for(let i=0;i<6;i++)void 0!==e[i]&&t++;return 6===t}(l)?(null===i&&(i=new rp(e)),(a=s?i.fromEquirectangular(r):i.fromCubemap(r)).texture.pmremVersion=r.pmremVersion,t.set(r,a),r.addEventListener("dispose",n),a.texture):null}}}return r},dispose:function(){t=new WeakMap,null!==i&&(i.dispose(),i=null)}}}function rM(e){let t={};function i(i){let n;if(void 0!==t[i])return t[i];switch(i){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=e.getExtension(i)}return t[i]=n,n}return{has:function(e){return null!==i(e)},init:function(){i("EXT_color_buffer_float"),i("WEBGL_clip_cull_distance"),i("OES_texture_float_linear"),i("EXT_color_buffer_half_float"),i("WEBGL_multisampled_render_to_texture"),i("WEBGL_render_shared_exponent")},get:function(e){let t=i(e);return null===t&&I("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function rS(e,t,i,n){let r={},a=new WeakMap;function s(e){let o=e.target;for(let e in null!==o.index&&t.remove(o.index),o.attributes)t.remove(o.attributes[e]);o.removeEventListener("dispose",s),delete r[o.id];let l=a.get(o);l&&(t.remove(l),a.delete(o)),n.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,i.memory.geometries--}function o(e){let i=[],n=e.index,r=e.attributes.position,s=0;if(null!==n){let e=n.array;s=n.version;for(let t=0,n=e.length;t<n;t+=3){let n=e[t+0],r=e[t+1],a=e[t+2];i.push(n,r,r,a,a,n)}}else{if(void 0===r)return;let e=r.array;s=r.version;for(let t=0,n=e.length/3-1;t<n;t+=3){let e=t+0,n=t+1,r=t+2;i.push(e,n,n,r,r,e)}}let o=new(D(i)?ty:tv)(i,1);o.version=s;let l=a.get(e);l&&t.remove(l),a.set(e,o)}return{get:function(e,t){return!0===r[t.id]||(t.addEventListener("dispose",s),r[t.id]=!0,i.memory.geometries++),t},update:function(i){let n=i.attributes;for(let i in n)t.update(n[i],e.ARRAY_BUFFER)},getWireframeAttribute:function(e){let t=a.get(e);if(t){let i=e.index;null!==i&&t.version<i.version&&o(e)}else o(e);return a.get(e)}}}function rE(e,t,i){let n,r,a;function s(t,s,o){0!==o&&(e.drawElementsInstanced(n,s,r,t*a,o),i.update(s,n,o))}this.setMode=function(e){n=e},this.setIndex=function(e){r=e.type,a=e.bytesPerElement},this.render=function(t,s){e.drawElements(n,s,r,t*a),i.update(s,n,1)},this.renderInstances=s,this.renderMultiDraw=function(e,a,s){if(0===s)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,a,0,r,e,0,s);let o=0;for(let e=0;e<s;e++)o+=a[e];i.update(o,n,1)},this.renderMultiDrawInstances=function(e,o,l,h){if(0===l)return;let c=t.get("WEBGL_multi_draw");if(null===c)for(let t=0;t<e.length;t++)s(e[t]/a,o[t],h[t]);else{c.multiDrawElementsInstancedWEBGL(n,o,0,r,e,0,h,0,l);let t=0;for(let e=0;e<l;e++)t+=o[e]*h[e];i.update(t,n,1)}}}function rT(e){let t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(i,n,r){switch(t.calls++,n){case e.TRIANGLES:t.triangles+=i/3*r;break;case e.LINES:t.lines+=i/2*r;break;case e.LINE_STRIP:t.lines+=r*(i-1);break;case e.LINE_LOOP:t.lines+=r*i;break;case e.POINTS:t.points+=r*i;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function rb(e,t,i){let n=new WeakMap,r=new Y;return{update:function(a,s,o){let l=a.morphTargetInfluences,h=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color,c=void 0!==h?h.length:0,q=n.get(s);if(void 0===q||q.count!==c){void 0!==q&&q.texture.dispose();let e=void 0!==s.morphAttributes.position,i=void 0!==s.morphAttributes.normal,a=void 0!==s.morphAttributes.color,o=s.morphAttributes.position||[],l=s.morphAttributes.normal||[],h=s.morphAttributes.color||[],u=0;!0===e&&(u=1),!0===i&&(u=2),!0===a&&(u=3);let d=s.attributes.position.count*u,m=1;d>t.maxTextureSize&&(m=Math.ceil(d/t.maxTextureSize),d=t.maxTextureSize);let p=new Float32Array(d*m*4*c),f=new J(p,d,m,c);f.type=1015,f.needsUpdate=!0;let _=4*u;for(let t=0;t<c;t++){let n=o[t],s=l[t],c=h[t],q=d*m*4*t;for(let t=0;t<n.count;t++){let o=t*_;!0===e&&(r.fromBufferAttribute(n,t),p[q+o+0]=r.x,p[q+o+1]=r.y,p[q+o+2]=r.z,p[q+o+3]=0),!0===i&&(r.fromBufferAttribute(s,t),p[q+o+4]=r.x,p[q+o+5]=r.y,p[q+o+6]=r.z,p[q+o+7]=0),!0===a&&(r.fromBufferAttribute(c,t),p[q+o+8]=r.x,p[q+o+9]=r.y,p[q+o+10]=r.z,p[q+o+11]=4===c.itemSize?r.w:1)}}q={count:c,texture:f,size:new C(d,m)},n.set(s,q),s.addEventListener("dispose",function e(){f.dispose(),n.delete(s),s.removeEventListener("dispose",e)})}if(!0===a.isInstancedMesh&&null!==a.morphTexture)o.getUniforms().setValue(e,"morphTexture",a.morphTexture,i);else{let t=0;for(let e=0;e<l.length;e++)t+=l[e];let i=s.morphTargetsRelative?1:1-t;o.getUniforms().setValue(e,"morphTargetBaseInfluence",i),o.getUniforms().setValue(e,"morphTargetInfluences",l)}o.getUniforms().setValue(e,"morphTargetsTexture",q.texture,i),o.getUniforms().setValue(e,"morphTargetsTextureSize",q.size)}}}function rw(e,t,i,n){let r=new WeakMap;function a(e){let t=e.target;t.removeEventListener("dispose",a),i.remove(t.instanceMatrix),null!==t.instanceColor&&i.remove(t.instanceColor)}return{update:function(s){let o=n.render.frame,l=s.geometry,h=t.get(s,l);if(r.get(h)!==o&&(t.update(h),r.set(h,o)),s.isInstancedMesh&&(!1===s.hasEventListener("dispose",a)&&s.addEventListener("dispose",a),r.get(s)!==o&&(i.update(s.instanceMatrix,e.ARRAY_BUFFER),null!==s.instanceColor&&i.update(s.instanceColor,e.ARRAY_BUFFER),r.set(s,o))),s.isSkinnedMesh){let e=s.skeleton;r.get(e)!==o&&(e.update(),r.set(e,o))}return h},dispose:function(){r=new WeakMap}}}const rA=new j,rR=new id(1,1),rC=new J,rP=new class extends j{constructor(e=null,t=1,i=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:i,depth:n},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},rL=new t3,rD=[],rU=[],rN=new Float32Array(16),rI=new Float32Array(9),rO=new Float32Array(4);function rz(e,t,i){let n=e[0];if(n<=0||n>0)return e;let r=t*i,a=rD[r];if(void 0===a&&(a=new Float32Array(r),rD[r]=a),0!==t){n.toArray(a,0);for(let n=1,r=0;n!==t;++n)r+=i,e[n].toArray(a,r)}return a}function rF(e,t){if(e.length!==t.length)return!1;for(let i=0,n=e.length;i<n;i++)if(e[i]!==t[i])return!1;return!0}function rB(e,t){for(let i=0,n=t.length;i<n;i++)e[i]=t[i]}function rH(e,t){let i=rU[t];void 0===i&&(i=new Int32Array(t),rU[t]=i);for(let n=0;n!==t;++n)i[n]=e.allocateTextureUnit();return i}function rV(e,t){let i=this.cache;i[0]!==t&&(e.uniform1f(this.addr,t),i[0]=t)}function rk(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y)&&(e.uniform2f(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(rF(i,t))return;e.uniform2fv(this.addr,t),rB(i,t)}}function rG(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(e.uniform3f(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else if(void 0!==t.r)(i[0]!==t.r||i[1]!==t.g||i[2]!==t.b)&&(e.uniform3f(this.addr,t.r,t.g,t.b),i[0]=t.r,i[1]=t.g,i[2]=t.b);else{if(rF(i,t))return;e.uniform3fv(this.addr,t),rB(i,t)}}function rW(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(rF(i,t))return;e.uniform4fv(this.addr,t),rB(i,t)}}function rX(e,t){let i=this.cache,n=t.elements;if(void 0===n){if(rF(i,t))return;e.uniformMatrix2fv(this.addr,!1,t),rB(i,t)}else{if(rF(i,n))return;rO.set(n),e.uniformMatrix2fv(this.addr,!1,rO),rB(i,n)}}function rj(e,t){let i=this.cache,n=t.elements;if(void 0===n){if(rF(i,t))return;e.uniformMatrix3fv(this.addr,!1,t),rB(i,t)}else{if(rF(i,n))return;rI.set(n),e.uniformMatrix3fv(this.addr,!1,rI),rB(i,n)}}function rY(e,t){let i=this.cache,n=t.elements;if(void 0===n){if(rF(i,t))return;e.uniformMatrix4fv(this.addr,!1,t),rB(i,t)}else{if(rF(i,n))return;rN.set(n),e.uniformMatrix4fv(this.addr,!1,rN),rB(i,n)}}function rZ(e,t){let i=this.cache;i[0]!==t&&(e.uniform1i(this.addr,t),i[0]=t)}function rK(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y)&&(e.uniform2i(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(rF(i,t))return;e.uniform2iv(this.addr,t),rB(i,t)}}function rJ(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(e.uniform3i(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else{if(rF(i,t))return;e.uniform3iv(this.addr,t),rB(i,t)}}function r$(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(e.uniform4i(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(rF(i,t))return;e.uniform4iv(this.addr,t),rB(i,t)}}function rQ(e,t){let i=this.cache;i[0]!==t&&(e.uniform1ui(this.addr,t),i[0]=t)}function r1(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y)&&(e.uniform2ui(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(rF(i,t))return;e.uniform2uiv(this.addr,t),rB(i,t)}}function r2(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(e.uniform3ui(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else{if(rF(i,t))return;e.uniform3uiv(this.addr,t),rB(i,t)}}function r3(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(e.uniform4ui(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(rF(i,t))return;e.uniform4uiv(this.addr,t),rB(i,t)}}function r4(e,t,i){let n;let r=this.cache,a=i.allocateTextureUnit();r[0]!==a&&(e.uniform1i(this.addr,a),r[0]=a),this.type===e.SAMPLER_2D_SHADOW?(rR.compareFunction=515,n=rR):n=rA,i.setTexture2D(t||n,a)}function r6(e,t,i){let n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(e.uniform1i(this.addr,r),n[0]=r),i.setTexture3D(t||rP,r)}function r0(e,t,i){let n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(e.uniform1i(this.addr,r),n[0]=r),i.setTextureCube(t||rL,r)}function r5(e,t,i){let n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(e.uniform1i(this.addr,r),n[0]=r),i.setTexture2DArray(t||rC,r)}function r8(e,t){e.uniform1fv(this.addr,t)}function r7(e,t){let i=rz(t,this.size,2);e.uniform2fv(this.addr,i)}function r9(e,t){let i=rz(t,this.size,3);e.uniform3fv(this.addr,i)}function ae(e,t){let i=rz(t,this.size,4);e.uniform4fv(this.addr,i)}function at(e,t){let i=rz(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,i)}function ai(e,t){let i=rz(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,i)}function an(e,t){let i=rz(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,i)}function ar(e,t){e.uniform1iv(this.addr,t)}function aa(e,t){e.uniform2iv(this.addr,t)}function as(e,t){e.uniform3iv(this.addr,t)}function ao(e,t){e.uniform4iv(this.addr,t)}function al(e,t){e.uniform1uiv(this.addr,t)}function ah(e,t){e.uniform2uiv(this.addr,t)}function ac(e,t){e.uniform3uiv(this.addr,t)}function aq(e,t){e.uniform4uiv(this.addr,t)}function au(e,t,i){let n=this.cache,r=t.length,a=rH(i,r);rF(n,a)||(e.uniform1iv(this.addr,a),rB(n,a));for(let e=0;e!==r;++e)i.setTexture2D(t[e]||rA,a[e])}function ad(e,t,i){let n=this.cache,r=t.length,a=rH(i,r);rF(n,a)||(e.uniform1iv(this.addr,a),rB(n,a));for(let e=0;e!==r;++e)i.setTexture3D(t[e]||rP,a[e])}function am(e,t,i){let n=this.cache,r=t.length,a=rH(i,r);rF(n,a)||(e.uniform1iv(this.addr,a),rB(n,a));for(let e=0;e!==r;++e)i.setTextureCube(t[e]||rL,a[e])}function ap(e,t,i){let n=this.cache,r=t.length,a=rH(i,r);rF(n,a)||(e.uniform1iv(this.addr,a),rB(n,a));for(let e=0;e!==r;++e)i.setTexture2DArray(t[e]||rC,a[e])}class af{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.type=t.type,this.setValue=function(e){switch(e){case 5126:return rV;case 35664:return rk;case 35665:return rG;case 35666:return rW;case 35674:return rX;case 35675:return rj;case 35676:return rY;case 5124:case 35670:return rZ;case 35667:case 35671:return rK;case 35668:case 35672:return rJ;case 35669:case 35673:return r$;case 5125:return rQ;case 36294:return r1;case 36295:return r2;case 36296:return r3;case 35678:case 36198:case 36298:case 36306:case 35682:return r4;case 35679:case 36299:case 36307:return r6;case 35680:case 36300:case 36308:case 36293:return r0;case 36289:case 36303:case 36311:case 36292:return r5}}(t.type)}}class a_{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=function(e){switch(e){case 5126:return r8;case 35664:return r7;case 35665:return r9;case 35666:return ae;case 35674:return at;case 35675:return ai;case 35676:return an;case 5124:case 35670:return ar;case 35667:case 35671:return aa;case 35668:case 35672:return as;case 35669:case 35673:return ao;case 5125:return al;case 36294:return ah;case 36295:return ac;case 36296:return aq;case 35678:case 36198:case 36298:case 36306:case 35682:return au;case 35679:case 36299:case 36307:return ad;case 35680:case 36300:case 36308:case 36293:return am;case 36289:case 36303:case 36311:case 36292:return ap}}(t.type)}}class ag{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,i){let n=this.seq;for(let r=0,a=n.length;r!==a;++r){let a=n[r];a.setValue(e,t[a.id],i)}}}const ax=/(\w+)(\])?(\[|\.)?/g;function av(e,t){e.seq.push(t),e.map[t.id]=t}class ay{constructor(e,t){this.seq=[],this.map={};let i=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let n=0;n<i;++n){let i=e.getActiveUniform(t,n),r=e.getUniformLocation(t,i.name);!function(e,t,i){let n=e.name,r=n.length;for(ax.lastIndex=0;;){let a=ax.exec(n),s=ax.lastIndex,o=a[1],l="]"===a[2],h=a[3];if(l&&(o|=0),void 0===h||"["===h&&s+2===r){av(i,void 0===h?new af(o,e,t):new a_(o,e,t));break}{let e=i.map[o];void 0===e&&av(i,e=new ag(o)),i=e}}}(i,r,this)}}setValue(e,t,i,n){let r=this.map[t];void 0!==r&&r.setValue(e,i,n)}setOptional(e,t,i){let n=t[i];void 0!==n&&this.setValue(e,i,n)}static upload(e,t,i,n){for(let r=0,a=t.length;r!==a;++r){let a=t[r],s=i[a.id];!1!==s.needsUpdate&&a.setValue(e,s.value,n)}}static seqWithValue(e,t){let i=[];for(let n=0,r=e.length;n!==r;++n){let r=e[n];r.id in t&&i.push(r)}return i}}function aM(e,t,i){let n=e.createShader(t);return e.shaderSource(n,i),e.compileShader(n),n}let aS=0;const aE=new P;function aT(e,t,i){let n=e.getShaderParameter(t,e.COMPILE_STATUS),r=e.getShaderInfoLog(t).trim();if(n&&""===r)return"";let a=/ERROR: 0:(\d+)/.exec(r);if(!a)return r;{let n=parseInt(a[1]);return i.toUpperCase()+"\n\n"+r+"\n\n"+function(e,t){let i=e.split("\n"),n=[],r=Math.max(t-6,0),a=Math.min(t+6,i.length);for(let e=r;e<a;e++){let r=e+1;n.push(`${r===t?">":" "} ${r}: ${i[e]}`)}return n.join("\n")}(e.getShaderSource(t),n)}}const ab=new Q;function aw(e){return""!==e}function aA(e,t){let i=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,i).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function aR(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const aC=/^[ \t]*#include +<([\w\d./]+)>/gm;function aP(e){return e.replace(aC,aD)}const aL=new Map;function aD(e,t){let i=n4[t];if(void 0===i){let e=aL.get(t);if(void 0!==e)i=n4[e],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e);else throw Error("Can not resolve #include <"+t+">")}return aP(i)}const aU=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function aN(e){return e.replace(aU,aI)}function aI(e,t,i,n){let r="";for(let e=parseInt(t);e<parseInt(i);e++)r+=n.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return r}function aO(e){let t=`precision ${e.precision} float;
	precision ${e.precision} int;
	precision ${e.precision} sampler2D;
	precision ${e.precision} samplerCube;
	precision ${e.precision} sampler3D;
	precision ${e.precision} sampler2DArray;
	precision ${e.precision} sampler2DShadow;
	precision ${e.precision} samplerCubeShadow;
	precision ${e.precision} sampler2DArrayShadow;
	precision ${e.precision} isampler2D;
	precision ${e.precision} isampler3D;
	precision ${e.precision} isamplerCube;
	precision ${e.precision} isampler2DArray;
	precision ${e.precision} usampler2D;
	precision ${e.precision} usampler3D;
	precision ${e.precision} usamplerCube;
	precision ${e.precision} usampler2DArray;
	`;return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function az(e,t,i,n){let r,a,s,o,l,h;let c=e.getContext(),q=i.defines,u=i.vertexShader,d=i.fragmentShader,m=(l="SHADOWMAP_TYPE_BASIC",1===i.shadowMapType?l="SHADOWMAP_TYPE_PCF":2===i.shadowMapType?l="SHADOWMAP_TYPE_PCF_SOFT":3===i.shadowMapType&&(l="SHADOWMAP_TYPE_VSM"),l),p=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case 301:case 302:t="ENVMAP_TYPE_CUBE";break;case 306:t="ENVMAP_TYPE_CUBE_UV"}return t}(i),f=(h="ENVMAP_MODE_REFLECTION",i.envMap&&302===i.envMapMode&&(h="ENVMAP_MODE_REFRACTION"),h),_=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(i),g=function(e){let t=e.envMapCubeUVHeight;if(null===t)return null;let i=Math.log2(t)-2;return{texelWidth:1/(3*Math.max(Math.pow(2,i),112)),texelHeight:1/t,maxMip:i}}(i),M=[i.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",i.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(aw).join("\n"),S=function(e){let t=[];for(let i in e){let n=e[i];!1!==n&&t.push("#define "+i+" "+n)}return t.join("\n")}(q),E=c.createProgram(),T=i.glslVersion?"#version "+i.glslVersion+"\n":"";i.isRawShaderMaterial?((r=["#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,S].filter(aw).join("\n")).length>0&&(r+="\n"),(a=["#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,S].filter(aw).join("\n")).length>0&&(a+="\n")):(r=[aO(i),"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,S,i.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",i.batching?"#define USE_BATCHING":"",i.batchingColor?"#define USE_BATCHING_COLOR":"",i.instancing?"#define USE_INSTANCING":"",i.instancingColor?"#define USE_INSTANCING_COLOR":"",i.instancingMorph?"#define USE_INSTANCING_MORPH":"",i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+f:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.displacementMap?"#define USE_DISPLACEMENTMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.anisotropy?"#define USE_ANISOTROPY":"",i.anisotropyMap?"#define USE_ANISOTROPYMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaHash?"#define USE_ALPHAHASH":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.mapUv?"#define MAP_UV "+i.mapUv:"",i.alphaMapUv?"#define ALPHAMAP_UV "+i.alphaMapUv:"",i.lightMapUv?"#define LIGHTMAP_UV "+i.lightMapUv:"",i.aoMapUv?"#define AOMAP_UV "+i.aoMapUv:"",i.emissiveMapUv?"#define EMISSIVEMAP_UV "+i.emissiveMapUv:"",i.bumpMapUv?"#define BUMPMAP_UV "+i.bumpMapUv:"",i.normalMapUv?"#define NORMALMAP_UV "+i.normalMapUv:"",i.displacementMapUv?"#define DISPLACEMENTMAP_UV "+i.displacementMapUv:"",i.metalnessMapUv?"#define METALNESSMAP_UV "+i.metalnessMapUv:"",i.roughnessMapUv?"#define ROUGHNESSMAP_UV "+i.roughnessMapUv:"",i.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+i.anisotropyMapUv:"",i.clearcoatMapUv?"#define CLEARCOATMAP_UV "+i.clearcoatMapUv:"",i.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+i.clearcoatNormalMapUv:"",i.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+i.clearcoatRoughnessMapUv:"",i.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+i.iridescenceMapUv:"",i.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+i.iridescenceThicknessMapUv:"",i.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+i.sheenColorMapUv:"",i.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+i.sheenRoughnessMapUv:"",i.specularMapUv?"#define SPECULARMAP_UV "+i.specularMapUv:"",i.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+i.specularColorMapUv:"",i.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+i.specularIntensityMapUv:"",i.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+i.transmissionMapUv:"",i.thicknessMapUv?"#define THICKNESSMAP_UV "+i.thicknessMapUv:"",i.vertexTangents&&!1===i.flatShading?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&!1===i.flatShading?"#define USE_MORPHNORMALS":"",i.morphColors?"#define USE_MORPHCOLORS":"",i.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+i.morphTextureStride:"",i.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+i.morphTargetsCount:"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+m:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.numLightProbes>0?"#define USE_LIGHT_PROBES":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(aw).join("\n"),a=[aO(i),"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,S,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+p:"",i.envMap?"#define "+f:"",i.envMap?"#define "+_:"",g?"#define CUBEUV_TEXEL_WIDTH "+g.texelWidth:"",g?"#define CUBEUV_TEXEL_HEIGHT "+g.texelHeight:"",g?"#define CUBEUV_MAX_MIP "+g.maxMip+".0":"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.anisotropy?"#define USE_ANISOTROPY":"",i.anisotropyMap?"#define USE_ANISOTROPYMAP":"",i.clearcoat?"#define USE_CLEARCOAT":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.dispersion?"#define USE_DISPERSION":"",i.iridescence?"#define USE_IRIDESCENCE":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaTest?"#define USE_ALPHATEST":"",i.alphaHash?"#define USE_ALPHAHASH":"",i.sheen?"#define USE_SHEEN":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.vertexTangents&&!1===i.flatShading?"#define USE_TANGENT":"",i.vertexColors||i.instancingColor||i.batchingColor?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+m:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.numLightProbes>0?"#define USE_LIGHT_PROBES":"",i.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",i.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==i.toneMapping?"#define TONE_MAPPING":"",0!==i.toneMapping?n4.tonemapping_pars_fragment:"",0!==i.toneMapping?function(e,t){let i;switch(t){case 1:i="Linear";break;case 2:i="Reinhard";break;case 3:i="Cineon";break;case 4:i="ACESFilmic";break;case 6:i="AgX";break;case 7:i="Neutral";break;case 5:i="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),i="Linear"}return"vec3 "+e+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.opaque?"#define OPAQUE":"",n4.colorspace_pars_fragment,function(e,t){let i=function(e){F._getMatrix(aE,F.workingColorSpace,e);let t=`mat3( ${aE.elements.map(e=>e.toFixed(4))} )`;switch(F.getTransfer(e)){case x:return[t,"LinearTransferOETF"];case v:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",e),[t,"LinearTransferOETF"]}}(t);return`vec4 ${e}( vec4 value ) {
	return ${i[1]}( vec4( value.rgb * ${i[0]}, value.a ) );
}`}("linearToOutputTexel",i.outputColorSpace),function(){F.getLuminanceCoefficients(ab);let e=ab.x.toFixed(4),t=ab.y.toFixed(4),i=ab.z.toFixed(4);return`float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( ${e}, ${t}, ${i} );
	return dot( weights, rgb );
}`}(),i.useDepthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(aw).join("\n")),u=aR(u=aA(u=aP(u),i),i),d=aR(d=aA(d=aP(d),i),i),u=aN(u),d=aN(d),!0!==i.isRawShaderMaterial&&(T="#version 300 es\n",r=[M,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+r,a=["#define varying in",i.glslVersion===y?"":"layout(location = 0) out highp vec4 pc_fragColor;",i.glslVersion===y?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+a);let b=T+r+u,w=T+a+d,A=aM(c,c.VERTEX_SHADER,b),R=aM(c,c.FRAGMENT_SHADER,w);function C(t){if(e.debug.checkShaderErrors){let i=c.getProgramInfoLog(E).trim(),n=c.getShaderInfoLog(A).trim(),s=c.getShaderInfoLog(R).trim(),o=!0,l=!0;if(!1===c.getProgramParameter(E,c.LINK_STATUS)){if(o=!1,"function"==typeof e.debug.onShaderError)e.debug.onShaderError(c,E,A,R);else{let e=aT(c,A,"vertex"),n=aT(c,R,"fragment");console.error("THREE.WebGLProgram: Shader Error "+c.getError()+" - VALIDATE_STATUS "+c.getProgramParameter(E,c.VALIDATE_STATUS)+"\n\nMaterial Name: "+t.name+"\nMaterial Type: "+t.type+"\n\nProgram Info Log: "+i+"\n"+e+"\n"+n)}}else""!==i?console.warn("THREE.WebGLProgram: Program Info Log:",i):(""===n||""===s)&&(l=!1);l&&(t.diagnostics={runnable:o,programLog:i,vertexShader:{log:n,prefix:r},fragmentShader:{log:s,prefix:a}})}c.deleteShader(A),c.deleteShader(R),s=new ay(c,E),o=function(e,t){let i={},n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let r=0;r<n;r++){let n=e.getActiveAttrib(t,r),a=n.name,s=1;n.type===e.FLOAT_MAT2&&(s=2),n.type===e.FLOAT_MAT3&&(s=3),n.type===e.FLOAT_MAT4&&(s=4),i[a]={type:n.type,location:e.getAttribLocation(t,a),locationSize:s}}return i}(c,E)}c.attachShader(E,A),c.attachShader(E,R),void 0!==i.index0AttributeName?c.bindAttribLocation(E,0,i.index0AttributeName):!0===i.morphTargets&&c.bindAttribLocation(E,0,"position"),c.linkProgram(E),this.getUniforms=function(){return void 0===s&&C(this),s},this.getAttributes=function(){return void 0===o&&C(this),o};let P=!1===i.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===P&&(P=c.getProgramParameter(E,37297)),P},this.destroy=function(){n.releaseStatesOfProgram(this),c.deleteProgram(E),this.program=void 0},this.type=i.shaderType,this.name=i.shaderName,this.id=aS++,this.cacheKey=t,this.usedTimes=1,this.program=E,this.vertexShader=A,this.fragmentShader=R,this}let aF=0;class aB{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){let t=e.vertexShader,i=e.fragmentShader,n=this._getShaderStage(t),r=this._getShaderStage(i),a=this._getShaderCacheForMaterial(e);return!1===a.has(n)&&(a.add(n),n.usedTimes++),!1===a.has(r)&&(a.add(r),r.usedTimes++),this}remove(e){for(let t of this.materialCache.get(e))t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){let t=this.materialCache,i=t.get(e);return void 0===i&&(i=new Set,t.set(e,i)),i}_getShaderStage(e){let t=this.shaderCache,i=t.get(e);return void 0===i&&(i=new aH(e),t.set(e,i)),i}}class aH{constructor(e){this.id=aF++,this.code=e,this.usedTimes=0}}function aV(e,t,i,n,r,a,s){let o=new eB,l=new aB,h=new Set,c=[],q=r.logarithmicDepthBuffer,u=r.vertexTextures,d=r.precision,m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function p(e){return(h.add(e),0===e)?"uv":`uv${e}`}return{getParameters:function(a,o,c,f,_){let x,y,M,S;let E=f.fog,T=_.geometry,b=a.isMeshStandardMaterial?f.environment:null,w=(a.isMeshStandardMaterial?i:t).get(a.envMap||b),A=w&&306===w.mapping?w.image.height:null,R=m[a.type];null!==a.precision&&(d=r.getMaxPrecision(a.precision))!==a.precision&&console.warn("THREE.WebGLProgram.getParameters:",a.precision,"not supported, using",d,"instead.");let C=T.morphAttributes.position||T.morphAttributes.normal||T.morphAttributes.color,P=void 0!==C?C.length:0,L=0;if(void 0!==T.morphAttributes.position&&(L=1),void 0!==T.morphAttributes.normal&&(L=2),void 0!==T.morphAttributes.color&&(L=3),R){let e=n0[R];x=e.vertexShader,y=e.fragmentShader}else x=a.vertexShader,y=a.fragmentShader,l.update(a),M=l.getVertexShaderID(a),S=l.getFragmentShaderID(a);let D=e.getRenderTarget(),U=e.state.buffers.depth.getReversed(),N=!0===_.isInstancedMesh,I=!0===_.isBatchedMesh,O=!!a.map,z=!!a.matcap,B=!!w,H=!!a.aoMap,V=!!a.lightMap,k=!!a.bumpMap,G=!!a.normalMap,W=!!a.displacementMap,X=!!a.emissiveMap,j=!!a.metalnessMap,Y=!!a.roughnessMap,Z=a.anisotropy>0,K=a.clearcoat>0,J=a.dispersion>0,$=a.iridescence>0,Q=a.sheen>0,ee=a.transmission>0,et=Z&&!!a.anisotropyMap,ei=K&&!!a.clearcoatMap,en=K&&!!a.clearcoatNormalMap,er=K&&!!a.clearcoatRoughnessMap,ea=$&&!!a.iridescenceMap,es=$&&!!a.iridescenceThicknessMap,eo=Q&&!!a.sheenColorMap,el=Q&&!!a.sheenRoughnessMap,eh=!!a.specularMap,ec=!!a.specularColorMap,eq=!!a.specularIntensityMap,eu=ee&&!!a.transmissionMap,ed=ee&&!!a.thicknessMap,em=!!a.gradientMap,ep=!!a.alphaMap,ef=a.alphaTest>0,e_=!!a.alphaHash,eg=!!a.extensions,ex=0;a.toneMapped&&(null===D||!0===D.isXRRenderTarget)&&(ex=e.toneMapping);let ev={shaderID:R,shaderType:a.type,shaderName:a.name,vertexShader:x,fragmentShader:y,defines:a.defines,customVertexShaderID:M,customFragmentShaderID:S,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:d,batching:I,batchingColor:I&&null!==_._colorsTexture,instancing:N,instancingColor:N&&null!==_.instanceColor,instancingMorph:N&&null!==_.morphTexture,supportsVertexTextures:u,outputColorSpace:null===D?e.outputColorSpace:!0===D.isXRRenderTarget?D.texture.colorSpace:g,alphaToCoverage:!!a.alphaToCoverage,map:O,matcap:z,envMap:B,envMapMode:B&&w.mapping,envMapCubeUVHeight:A,aoMap:H,lightMap:V,bumpMap:k,normalMap:G,displacementMap:u&&W,emissiveMap:X,normalMapObjectSpace:G&&1===a.normalMapType,normalMapTangentSpace:G&&0===a.normalMapType,metalnessMap:j,roughnessMap:Y,anisotropy:Z,anisotropyMap:et,clearcoat:K,clearcoatMap:ei,clearcoatNormalMap:en,clearcoatRoughnessMap:er,dispersion:J,iridescence:$,iridescenceMap:ea,iridescenceThicknessMap:es,sheen:Q,sheenColorMap:eo,sheenRoughnessMap:el,specularMap:eh,specularColorMap:ec,specularIntensityMap:eq,transmission:ee,transmissionMap:eu,thicknessMap:ed,gradientMap:em,opaque:!1===a.transparent&&1===a.blending&&!1===a.alphaToCoverage,alphaMap:ep,alphaTest:ef,alphaHash:e_,combine:a.combine,mapUv:O&&p(a.map.channel),aoMapUv:H&&p(a.aoMap.channel),lightMapUv:V&&p(a.lightMap.channel),bumpMapUv:k&&p(a.bumpMap.channel),normalMapUv:G&&p(a.normalMap.channel),displacementMapUv:W&&p(a.displacementMap.channel),emissiveMapUv:X&&p(a.emissiveMap.channel),metalnessMapUv:j&&p(a.metalnessMap.channel),roughnessMapUv:Y&&p(a.roughnessMap.channel),anisotropyMapUv:et&&p(a.anisotropyMap.channel),clearcoatMapUv:ei&&p(a.clearcoatMap.channel),clearcoatNormalMapUv:en&&p(a.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:er&&p(a.clearcoatRoughnessMap.channel),iridescenceMapUv:ea&&p(a.iridescenceMap.channel),iridescenceThicknessMapUv:es&&p(a.iridescenceThicknessMap.channel),sheenColorMapUv:eo&&p(a.sheenColorMap.channel),sheenRoughnessMapUv:el&&p(a.sheenRoughnessMap.channel),specularMapUv:eh&&p(a.specularMap.channel),specularColorMapUv:ec&&p(a.specularColorMap.channel),specularIntensityMapUv:eq&&p(a.specularIntensityMap.channel),transmissionMapUv:eu&&p(a.transmissionMap.channel),thicknessMapUv:ed&&p(a.thicknessMap.channel),alphaMapUv:ep&&p(a.alphaMap.channel),vertexTangents:!!T.attributes.tangent&&(G||Z),vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!T.attributes.color&&4===T.attributes.color.itemSize,pointsUvs:!0===_.isPoints&&!!T.attributes.uv&&(O||ep),fog:!!E,useFog:!0===a.fog,fogExp2:!!E&&E.isFogExp2,flatShading:!0===a.flatShading,sizeAttenuation:!0===a.sizeAttenuation,logarithmicDepthBuffer:q,reverseDepthBuffer:U,skinning:!0===_.isSkinnedMesh,morphTargets:void 0!==T.morphAttributes.position,morphNormals:void 0!==T.morphAttributes.normal,morphColors:void 0!==T.morphAttributes.color,morphTargetsCount:P,morphTextureStride:L,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:a.dithering,shadowMapEnabled:e.shadowMap.enabled&&c.length>0,shadowMapType:e.shadowMap.type,toneMapping:ex,decodeVideoTexture:O&&!0===a.map.isVideoTexture&&F.getTransfer(a.map.colorSpace)===v,decodeVideoTextureEmissive:X&&!0===a.emissiveMap.isVideoTexture&&F.getTransfer(a.emissiveMap.colorSpace)===v,premultipliedAlpha:a.premultipliedAlpha,doubleSided:2===a.side,flipSided:1===a.side,useDepthPacking:a.depthPacking>=0,depthPacking:a.depthPacking||0,index0AttributeName:a.index0AttributeName,extensionClipCullDistance:eg&&!0===a.extensions.clipCullDistance&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(eg&&!0===a.extensions.multiDraw||I)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:a.customProgramCacheKey()};return ev.vertexUv1s=h.has(1),ev.vertexUv2s=h.has(2),ev.vertexUv3s=h.has(3),h.clear(),ev},getProgramCacheKey:function(t){let i=[];if(t.shaderID?i.push(t.shaderID):(i.push(t.customVertexShaderID),i.push(t.customFragmentShaderID)),void 0!==t.defines)for(let e in t.defines)i.push(e),i.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(i.push(t.precision),i.push(t.outputColorSpace),i.push(t.envMapMode),i.push(t.envMapCubeUVHeight),i.push(t.mapUv),i.push(t.alphaMapUv),i.push(t.lightMapUv),i.push(t.aoMapUv),i.push(t.bumpMapUv),i.push(t.normalMapUv),i.push(t.displacementMapUv),i.push(t.emissiveMapUv),i.push(t.metalnessMapUv),i.push(t.roughnessMapUv),i.push(t.anisotropyMapUv),i.push(t.clearcoatMapUv),i.push(t.clearcoatNormalMapUv),i.push(t.clearcoatRoughnessMapUv),i.push(t.iridescenceMapUv),i.push(t.iridescenceThicknessMapUv),i.push(t.sheenColorMapUv),i.push(t.sheenRoughnessMapUv),i.push(t.specularMapUv),i.push(t.specularColorMapUv),i.push(t.specularIntensityMapUv),i.push(t.transmissionMapUv),i.push(t.thicknessMapUv),i.push(t.combine),i.push(t.fogExp2),i.push(t.sizeAttenuation),i.push(t.morphTargetsCount),i.push(t.morphAttributeCount),i.push(t.numDirLights),i.push(t.numPointLights),i.push(t.numSpotLights),i.push(t.numSpotLightMaps),i.push(t.numHemiLights),i.push(t.numRectAreaLights),i.push(t.numDirLightShadows),i.push(t.numPointLightShadows),i.push(t.numSpotLightShadows),i.push(t.numSpotLightShadowsWithMaps),i.push(t.numLightProbes),i.push(t.shadowMapType),i.push(t.toneMapping),i.push(t.numClippingPlanes),i.push(t.numClipIntersection),i.push(t.depthPacking),o.disableAll(),t.supportsVertexTextures&&o.enable(0),t.instancing&&o.enable(1),t.instancingColor&&o.enable(2),t.instancingMorph&&o.enable(3),t.matcap&&o.enable(4),t.envMap&&o.enable(5),t.normalMapObjectSpace&&o.enable(6),t.normalMapTangentSpace&&o.enable(7),t.clearcoat&&o.enable(8),t.iridescence&&o.enable(9),t.alphaTest&&o.enable(10),t.vertexColors&&o.enable(11),t.vertexAlphas&&o.enable(12),t.vertexUv1s&&o.enable(13),t.vertexUv2s&&o.enable(14),t.vertexUv3s&&o.enable(15),t.vertexTangents&&o.enable(16),t.anisotropy&&o.enable(17),t.alphaHash&&o.enable(18),t.batching&&o.enable(19),t.dispersion&&o.enable(20),t.batchingColor&&o.enable(21),i.push(o.mask),o.disableAll(),t.fog&&o.enable(0),t.useFog&&o.enable(1),t.flatShading&&o.enable(2),t.logarithmicDepthBuffer&&o.enable(3),t.reverseDepthBuffer&&o.enable(4),t.skinning&&o.enable(5),t.morphTargets&&o.enable(6),t.morphNormals&&o.enable(7),t.morphColors&&o.enable(8),t.premultipliedAlpha&&o.enable(9),t.shadowMapEnabled&&o.enable(10),t.doubleSided&&o.enable(11),t.flipSided&&o.enable(12),t.useDepthPacking&&o.enable(13),t.dithering&&o.enable(14),t.transmission&&o.enable(15),t.sheen&&o.enable(16),t.opaque&&o.enable(17),t.pointsUvs&&o.enable(18),t.decodeVideoTexture&&o.enable(19),t.decodeVideoTextureEmissive&&o.enable(20),t.alphaToCoverage&&o.enable(21),i.push(o.mask),i.push(e.outputColorSpace)),i.push(t.customProgramCacheKey),i.join()},getUniforms:function(e){let t;let i=m[e.type];if(i){let e=n0[i];t=tY.clone(e.uniforms)}else t=e.uniforms;return t},acquireProgram:function(t,i){let n;for(let e=0,t=c.length;e<t;e++){let t=c[e];if(t.cacheKey===i){n=t,++n.usedTimes;break}}return void 0===n&&(n=new az(e,i,t,a),c.push(n)),n},releaseProgram:function(e){if(0==--e.usedTimes){let t=c.indexOf(e);c[t]=c[c.length-1],c.pop(),e.destroy()}},releaseShaderCache:function(e){l.remove(e)},programs:c,dispose:function(){l.dispose()}}}function ak(){let e=new WeakMap;return{has:function(t){return e.has(t)},get:function(t){let i=e.get(t);return void 0===i&&(i={},e.set(t,i)),i},remove:function(t){e.delete(t)},update:function(t,i,n){e.get(t)[i]=n},dispose:function(){e=new WeakMap}}}function aG(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function aW(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function aX(){let e=[],t=0,i=[],n=[],r=[];function a(i,n,r,a,s,o){let l=e[t];return void 0===l?(l={id:i.id,object:i,geometry:n,material:r,groupOrder:a,renderOrder:i.renderOrder,z:s,group:o},e[t]=l):(l.id=i.id,l.object=i,l.geometry=n,l.material=r,l.groupOrder=a,l.renderOrder=i.renderOrder,l.z=s,l.group=o),t++,l}return{opaque:i,transmissive:n,transparent:r,init:function(){t=0,i.length=0,n.length=0,r.length=0},push:function(e,t,s,o,l,h){let c=a(e,t,s,o,l,h);s.transmission>0?n.push(c):!0===s.transparent?r.push(c):i.push(c)},unshift:function(e,t,s,o,l,h){let c=a(e,t,s,o,l,h);s.transmission>0?n.unshift(c):!0===s.transparent?r.unshift(c):i.unshift(c)},finish:function(){for(let i=t,n=e.length;i<n;i++){let t=e[i];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(e,t){i.length>1&&i.sort(e||aG),n.length>1&&n.sort(t||aW),r.length>1&&r.sort(t||aW)}}}function aj(){let e=new WeakMap;return{get:function(t,i){let n;let r=e.get(t);return void 0===r?(n=new aX,e.set(t,[n])):i>=r.length?(n=new aX,r.push(n)):n=r[i],n},dispose:function(){e=new WeakMap}}}function aY(){let e={};return{get:function(t){let i;if(void 0!==e[t.id])return e[t.id];switch(t.type){case"DirectionalLight":i={direction:new Q,color:new tq};break;case"SpotLight":i={position:new Q,direction:new Q,color:new tq,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new Q,color:new tq,distance:0,decay:0};break;case"HemisphereLight":i={direction:new Q,skyColor:new tq,groundColor:new tq};break;case"RectAreaLight":i={color:new tq,position:new Q,halfWidth:new Q,halfHeight:new Q}}return e[t.id]=i,i}}}let aZ=0;function aK(e,t){return 2*!!t.castShadow-2*!!e.castShadow+ +!!t.map-+!!e.map}function aJ(e){let t=new aY,i=function(){let e={};return{get:function(t){let i;if(void 0!==e[t.id])return e[t.id];switch(t.type){case"DirectionalLight":case"SpotLight":i={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new C};break;case"PointLight":i={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new C,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=i,i}}}(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let e=0;e<9;e++)n.probe.push(new Q);let r=new Q,a=new eR,s=new eR;return{setup:function(r){let a=0,s=0,o=0;for(let e=0;e<9;e++)n.probe[e].set(0,0,0);let l=0,h=0,c=0,q=0,u=0,d=0,m=0,p=0,f=0,_=0,g=0;r.sort(aK);for(let e=0,x=r.length;e<x;e++){let x=r[e],v=x.color,y=x.intensity,M=x.distance,S=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)a+=v.r*y,s+=v.g*y,o+=v.b*y;else if(x.isLightProbe){for(let e=0;e<9;e++)n.probe[e].addScaledVector(x.sh.coefficients[e],y);g++}else if(x.isDirectionalLight){let e=t.get(x);if(e.color.copy(x.color).multiplyScalar(x.intensity),x.castShadow){let e=x.shadow,t=i.get(x);t.shadowIntensity=e.intensity,t.shadowBias=e.bias,t.shadowNormalBias=e.normalBias,t.shadowRadius=e.radius,t.shadowMapSize=e.mapSize,n.directionalShadow[l]=t,n.directionalShadowMap[l]=S,n.directionalShadowMatrix[l]=x.shadow.matrix,d++}n.directional[l]=e,l++}else if(x.isSpotLight){let e=t.get(x);e.position.setFromMatrixPosition(x.matrixWorld),e.color.copy(v).multiplyScalar(y),e.distance=M,e.coneCos=Math.cos(x.angle),e.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),e.decay=x.decay,n.spot[c]=e;let r=x.shadow;if(x.map&&(n.spotLightMap[f]=x.map,f++,r.updateMatrices(x),x.castShadow&&_++),n.spotLightMatrix[c]=r.matrix,x.castShadow){let e=i.get(x);e.shadowIntensity=r.intensity,e.shadowBias=r.bias,e.shadowNormalBias=r.normalBias,e.shadowRadius=r.radius,e.shadowMapSize=r.mapSize,n.spotShadow[c]=e,n.spotShadowMap[c]=S,p++}c++}else if(x.isRectAreaLight){let e=t.get(x);e.color.copy(v).multiplyScalar(y),e.halfWidth.set(.5*x.width,0,0),e.halfHeight.set(0,.5*x.height,0),n.rectArea[q]=e,q++}else if(x.isPointLight){let e=t.get(x);if(e.color.copy(x.color).multiplyScalar(x.intensity),e.distance=x.distance,e.decay=x.decay,x.castShadow){let e=x.shadow,t=i.get(x);t.shadowIntensity=e.intensity,t.shadowBias=e.bias,t.shadowNormalBias=e.normalBias,t.shadowRadius=e.radius,t.shadowMapSize=e.mapSize,t.shadowCameraNear=e.camera.near,t.shadowCameraFar=e.camera.far,n.pointShadow[h]=t,n.pointShadowMap[h]=S,n.pointShadowMatrix[h]=x.shadow.matrix,m++}n.point[h]=e,h++}else if(x.isHemisphereLight){let e=t.get(x);e.skyColor.copy(x.color).multiplyScalar(y),e.groundColor.copy(x.groundColor).multiplyScalar(y),n.hemi[u]=e,u++}}q>0&&(!0===e.has("OES_texture_float_linear")?(n.rectAreaLTC1=n6.LTC_FLOAT_1,n.rectAreaLTC2=n6.LTC_FLOAT_2):(n.rectAreaLTC1=n6.LTC_HALF_1,n.rectAreaLTC2=n6.LTC_HALF_2)),n.ambient[0]=a,n.ambient[1]=s,n.ambient[2]=o;let x=n.hash;(x.directionalLength!==l||x.pointLength!==h||x.spotLength!==c||x.rectAreaLength!==q||x.hemiLength!==u||x.numDirectionalShadows!==d||x.numPointShadows!==m||x.numSpotShadows!==p||x.numSpotMaps!==f||x.numLightProbes!==g)&&(n.directional.length=l,n.spot.length=c,n.rectArea.length=q,n.point.length=h,n.hemi.length=u,n.directionalShadow.length=d,n.directionalShadowMap.length=d,n.pointShadow.length=m,n.pointShadowMap.length=m,n.spotShadow.length=p,n.spotShadowMap.length=p,n.directionalShadowMatrix.length=d,n.pointShadowMatrix.length=m,n.spotLightMatrix.length=p+f-_,n.spotLightMap.length=f,n.numSpotLightShadowsWithMaps=_,n.numLightProbes=g,x.directionalLength=l,x.pointLength=h,x.spotLength=c,x.rectAreaLength=q,x.hemiLength=u,x.numDirectionalShadows=d,x.numPointShadows=m,x.numSpotShadows=p,x.numSpotMaps=f,x.numLightProbes=g,n.version=aZ++)},setupView:function(e,t){let i=0,o=0,l=0,h=0,c=0,q=t.matrixWorldInverse;for(let t=0,u=e.length;t<u;t++){let u=e[t];if(u.isDirectionalLight){let e=n.directional[i];e.direction.setFromMatrixPosition(u.matrixWorld),r.setFromMatrixPosition(u.target.matrixWorld),e.direction.sub(r),e.direction.transformDirection(q),i++}else if(u.isSpotLight){let e=n.spot[l];e.position.setFromMatrixPosition(u.matrixWorld),e.position.applyMatrix4(q),e.direction.setFromMatrixPosition(u.matrixWorld),r.setFromMatrixPosition(u.target.matrixWorld),e.direction.sub(r),e.direction.transformDirection(q),l++}else if(u.isRectAreaLight){let e=n.rectArea[h];e.position.setFromMatrixPosition(u.matrixWorld),e.position.applyMatrix4(q),s.identity(),a.copy(u.matrixWorld),a.premultiply(q),s.extractRotation(a),e.halfWidth.set(.5*u.width,0,0),e.halfHeight.set(0,.5*u.height,0),e.halfWidth.applyMatrix4(s),e.halfHeight.applyMatrix4(s),h++}else if(u.isPointLight){let e=n.point[o];e.position.setFromMatrixPosition(u.matrixWorld),e.position.applyMatrix4(q),o++}else if(u.isHemisphereLight){let e=n.hemi[c];e.direction.setFromMatrixPosition(u.matrixWorld),e.direction.transformDirection(q),c++}}},state:n}}function a$(e){let t=new aJ(e),i=[],n=[],r={lightsArray:i,shadowsArray:n,camera:null,lights:t,transmissionRenderTarget:{}};return{init:function(e){r.camera=e,i.length=0,n.length=0},state:r,setupLights:function(){t.setup(i)},setupLightsView:function(e){t.setupView(i,e)},pushLight:function(e){i.push(e)},pushShadow:function(e){n.push(e)}}}function aQ(e){let t=new WeakMap;return{get:function(i,n=0){let r;let a=t.get(i);return void 0===a?(r=new a$(e),t.set(i,[r])):n>=a.length?(r=new a$(e),a.push(r)):r=a[n],r},dispose:function(){t=new WeakMap}}}function a1(e,t,i){let n=new ia,r=new C,a=new C,s=new Y,o=new nc({depthPacking:3201}),l=new nq,h={},c=i.maxTextureSize,q={0:1,1:0,2:2},u=new tZ({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new C},radius:{value:4}},vertexShader:"void main() {\n	gl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),d=u.clone();d.defines.HORIZONTAL_PASS=1;let m=new tC;m.setAttribute("position",new tx(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));let p=new tV(m,u),f=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1;let _=this.type;function g(t,i,n,r){let a=null,s=!0===n.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(void 0!==s)a=s;else if(a=!0===n.isPointLight?l:o,e.localClippingEnabled&&!0===i.clipShadows&&Array.isArray(i.clippingPlanes)&&0!==i.clippingPlanes.length||i.displacementMap&&0!==i.displacementScale||i.alphaMap&&i.alphaTest>0||i.map&&i.alphaTest>0){let e=a.uuid,t=i.uuid,n=h[e];void 0===n&&(n={},h[e]=n);let r=n[t];void 0===r&&(r=a.clone(),n[t]=r,i.addEventListener("dispose",x)),a=r}return a.visible=i.visible,a.wireframe=i.wireframe,3===r?a.side=null!==i.shadowSide?i.shadowSide:i.side:a.side=null!==i.shadowSide?i.shadowSide:q[i.side],a.alphaMap=i.alphaMap,a.alphaTest=i.alphaTest,a.map=i.map,a.clipShadows=i.clipShadows,a.clippingPlanes=i.clippingPlanes,a.clipIntersection=i.clipIntersection,a.displacementMap=i.displacementMap,a.displacementScale=i.displacementScale,a.displacementBias=i.displacementBias,a.wireframeLinewidth=i.wireframeLinewidth,a.linewidth=i.linewidth,!0===n.isPointLight&&!0===a.isMeshDistanceMaterial&&(e.properties.get(a).light=n),a}function x(e){for(let t in e.target.removeEventListener("dispose",x),h){let i=h[t],n=e.target.uuid;n in i&&(i[n].dispose(),delete i[n])}}this.render=function(i,o,l){if(!1===f.enabled||!1===f.autoUpdate&&!1===f.needsUpdate||0===i.length)return;let h=e.getRenderTarget(),q=e.getActiveCubeFace(),m=e.getActiveMipmapLevel(),x=e.state;x.setBlending(0),x.buffers.color.setClear(1,1,1,1),x.buffers.depth.setTest(!0),x.setScissorTest(!1);let v=3!==_&&3===this.type,y=3===_&&3!==this.type;for(let h=0,q=i.length;h<q;h++){let q=i[h],m=q.shadow;if(void 0===m){console.warn("THREE.WebGLShadowMap:",q,"has no shadow.");continue}if(!1===m.autoUpdate&&!1===m.needsUpdate)continue;r.copy(m.mapSize);let f=m.getFrameExtents();if(r.multiply(f),a.copy(m.mapSize),(r.x>c||r.y>c)&&(r.x>c&&(a.x=Math.floor(c/f.x),r.x=a.x*f.x,m.mapSize.x=a.x),r.y>c&&(a.y=Math.floor(c/f.y),r.y=a.y*f.y,m.mapSize.y=a.y)),null===m.map||!0===v||!0===y){let e=3!==this.type?{minFilter:1003,magFilter:1003}:{};null!==m.map&&m.map.dispose(),m.map=new K(r.x,r.y,e),m.map.texture.name=q.name+".shadowMap",m.camera.updateProjectionMatrix()}e.setRenderTarget(m.map),e.clear();let _=m.getViewportCount();for(let i=0;i<_;i++){let r=m.getViewport(i);s.set(a.x*r.x,a.y*r.y,a.x*r.z,a.y*r.w),x.viewport(s),m.updateMatrices(q,i),n=m.getFrustum(),function i(r,a,s,o,l){if(!1===r.visible)return;if(r.layers.test(a.layers)&&(r.isMesh||r.isLine||r.isPoints)&&(r.castShadow||r.receiveShadow&&3===l)&&(!r.frustumCulled||n.intersectsObject(r))){r.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,r.matrixWorld);let i=t.update(r),n=r.material;if(Array.isArray(n)){let t=i.groups;for(let h=0,c=t.length;h<c;h++){let c=t[h],q=n[c.materialIndex];if(q&&q.visible){let t=g(r,q,o,l);r.onBeforeShadow(e,r,a,s,i,t,c),e.renderBufferDirect(s,null,i,t,r,c),r.onAfterShadow(e,r,a,s,i,t,c)}}}else if(n.visible){let t=g(r,n,o,l);r.onBeforeShadow(e,r,a,s,i,t,null),e.renderBufferDirect(s,null,i,t,r,null),r.onAfterShadow(e,r,a,s,i,t,null)}}let h=r.children;for(let e=0,t=h.length;e<t;e++)i(h[e],a,s,o,l)}(o,l,m.camera,q,this.type)}!0!==m.isPointLightShadow&&3===this.type&&function(i,n){let a=t.update(p);u.defines.VSM_SAMPLES!==i.blurSamples&&(u.defines.VSM_SAMPLES=i.blurSamples,d.defines.VSM_SAMPLES=i.blurSamples,u.needsUpdate=!0,d.needsUpdate=!0),null===i.mapPass&&(i.mapPass=new K(r.x,r.y)),u.uniforms.shadow_pass.value=i.map.texture,u.uniforms.resolution.value=i.mapSize,u.uniforms.radius.value=i.radius,e.setRenderTarget(i.mapPass),e.clear(),e.renderBufferDirect(n,null,a,u,p,null),d.uniforms.shadow_pass.value=i.mapPass.texture,d.uniforms.resolution.value=i.mapSize,d.uniforms.radius.value=i.radius,e.setRenderTarget(i.map),e.clear(),e.renderBufferDirect(n,null,a,d,p,null)}(m,l),m.needsUpdate=!1}_=this.type,f.needsUpdate=!1,e.setRenderTarget(h,q,m)}}const a2={0:1,2:6,4:7,3:5,1:0,6:2,7:4,5:3};function a3(e,t){let i=new function(){let t=!1,i=new Y,n=null,r=new Y(0,0,0,0);return{setMask:function(i){n===i||t||(e.colorMask(i,i,i,i),n=i)},setLocked:function(e){t=e},setClear:function(t,n,a,s,o){!0===o&&(t*=s,n*=s,a*=s),i.set(t,n,a,s),!1===r.equals(i)&&(e.clearColor(t,n,a,s),r.copy(i))},reset:function(){t=!1,n=null,r.set(-1,0,0,0)}}},n=new function(){let i=!1,n=!1,r=null,a=null,s=null;return{setReversed:function(e){if(n!==e){let e=t.get("EXT_clip_control");n?e.clipControlEXT(e.LOWER_LEFT_EXT,e.ZERO_TO_ONE_EXT):e.clipControlEXT(e.LOWER_LEFT_EXT,e.NEGATIVE_ONE_TO_ONE_EXT);let i=s;s=null,this.setClear(i)}n=e},getReversed:function(){return n},setTest:function(t){t?F(e.DEPTH_TEST):B(e.DEPTH_TEST)},setMask:function(t){r===t||i||(e.depthMask(t),r=t)},setFunc:function(t){if(n&&(t=a2[t]),a!==t){switch(t){case 0:e.depthFunc(e.NEVER);break;case 1:e.depthFunc(e.ALWAYS);break;case 2:e.depthFunc(e.LESS);break;case 3:default:e.depthFunc(e.LEQUAL);break;case 4:e.depthFunc(e.EQUAL);break;case 5:e.depthFunc(e.GEQUAL);break;case 6:e.depthFunc(e.GREATER);break;case 7:e.depthFunc(e.NOTEQUAL)}a=t}},setLocked:function(e){i=e},setClear:function(t){s!==t&&(n&&(t=1-t),e.clearDepth(t),s=t)},reset:function(){i=!1,r=null,a=null,s=null,n=!1}}},r=new function(){let t=!1,i=null,n=null,r=null,a=null,s=null,o=null,l=null,h=null;return{setTest:function(i){t||(i?F(e.STENCIL_TEST):B(e.STENCIL_TEST))},setMask:function(n){i===n||t||(e.stencilMask(n),i=n)},setFunc:function(t,i,s){(n!==t||r!==i||a!==s)&&(e.stencilFunc(t,i,s),n=t,r=i,a=s)},setOp:function(t,i,n){(s!==t||o!==i||l!==n)&&(e.stencilOp(t,i,n),s=t,o=i,l=n)},setLocked:function(e){t=e},setClear:function(t){h!==t&&(e.clearStencil(t),h=t)},reset:function(){t=!1,i=null,n=null,r=null,a=null,s=null,o=null,l=null,h=null}}},a=new WeakMap,s=new WeakMap,o={},l={},h=new WeakMap,c=[],q=null,u=!1,d=null,m=null,p=null,f=null,_=null,g=null,x=null,v=new tq(0,0,0),y=0,M=!1,S=null,E=null,T=null,b=null,w=null,A=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),R=!1,C=e.getParameter(e.VERSION);-1!==C.indexOf("WebGL")?R=parseFloat(/^WebGL (\d)/.exec(C)[1])>=1:-1!==C.indexOf("OpenGL ES")&&(R=parseFloat(/^OpenGL ES (\d)/.exec(C)[1])>=2);let P=null,L={},D=e.getParameter(e.SCISSOR_BOX),U=e.getParameter(e.VIEWPORT),N=new Y().fromArray(D),I=new Y().fromArray(U);function O(t,i,n,r){let a=new Uint8Array(4),s=e.createTexture();e.bindTexture(t,s),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let s=0;s<n;s++)t===e.TEXTURE_3D||t===e.TEXTURE_2D_ARRAY?e.texImage3D(i,0,e.RGBA,1,1,r,0,e.RGBA,e.UNSIGNED_BYTE,a):e.texImage2D(i+s,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,a);return s}let z={};function F(t){!0!==o[t]&&(e.enable(t),o[t]=!0)}function B(t){!1!==o[t]&&(e.disable(t),o[t]=!1)}z[e.TEXTURE_2D]=O(e.TEXTURE_2D,e.TEXTURE_2D,1),z[e.TEXTURE_CUBE_MAP]=O(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),z[e.TEXTURE_2D_ARRAY]=O(e.TEXTURE_2D_ARRAY,e.TEXTURE_2D_ARRAY,1,1),z[e.TEXTURE_3D]=O(e.TEXTURE_3D,e.TEXTURE_3D,1,1),i.setClear(0,0,0,1),n.setClear(1),r.setClear(0),F(e.DEPTH_TEST),n.setFunc(3),G(!1),W(1),F(e.CULL_FACE),k(0);let H={100:e.FUNC_ADD,101:e.FUNC_SUBTRACT,102:e.FUNC_REVERSE_SUBTRACT};H[103]=e.MIN,H[104]=e.MAX;let V={200:e.ZERO,201:e.ONE,202:e.SRC_COLOR,204:e.SRC_ALPHA,210:e.SRC_ALPHA_SATURATE,208:e.DST_COLOR,206:e.DST_ALPHA,203:e.ONE_MINUS_SRC_COLOR,205:e.ONE_MINUS_SRC_ALPHA,209:e.ONE_MINUS_DST_COLOR,207:e.ONE_MINUS_DST_ALPHA,211:e.CONSTANT_COLOR,212:e.ONE_MINUS_CONSTANT_COLOR,213:e.CONSTANT_ALPHA,214:e.ONE_MINUS_CONSTANT_ALPHA};function k(t,i,n,r,a,s,o,l,h,c){if(0===t){!0===u&&(B(e.BLEND),u=!1);return}if(!1===u&&(F(e.BLEND),u=!0),5!==t){if(t!==d||c!==M){if((100!==m||100!==_)&&(e.blendEquation(e.FUNC_ADD),m=100,_=100),c)switch(t){case 1:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.ONE,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}p=null,f=null,g=null,x=null,v.set(0,0,0),y=0,d=t,M=c}return}a=a||i,s=s||n,o=o||r,(i!==m||a!==_)&&(e.blendEquationSeparate(H[i],H[a]),m=i,_=a),(n!==p||r!==f||s!==g||o!==x)&&(e.blendFuncSeparate(V[n],V[r],V[s],V[o]),p=n,f=r,g=s,x=o),(!1===l.equals(v)||h!==y)&&(e.blendColor(l.r,l.g,l.b,h),v.copy(l),y=h),d=t,M=!1}function G(t){S!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),S=t)}function W(t){0!==t?(F(e.CULL_FACE),t!==E&&(1===t?e.cullFace(e.BACK):2===t?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):B(e.CULL_FACE),E=t}function X(t,i,n){t?(F(e.POLYGON_OFFSET_FILL),(b!==i||w!==n)&&(e.polygonOffset(i,n),b=i,w=n)):B(e.POLYGON_OFFSET_FILL)}return{buffers:{color:i,depth:n,stencil:r},enable:F,disable:B,bindFramebuffer:function(t,i){return l[t]!==i&&(e.bindFramebuffer(t,i),l[t]=i,t===e.DRAW_FRAMEBUFFER&&(l[e.FRAMEBUFFER]=i),t===e.FRAMEBUFFER&&(l[e.DRAW_FRAMEBUFFER]=i),!0)},drawBuffers:function(t,i){let n=c,r=!1;if(t){void 0===(n=h.get(i))&&(n=[],h.set(i,n));let a=t.textures;if(n.length!==a.length||n[0]!==e.COLOR_ATTACHMENT0){for(let t=0,i=a.length;t<i;t++)n[t]=e.COLOR_ATTACHMENT0+t;n.length=a.length,r=!0}}else n[0]!==e.BACK&&(n[0]=e.BACK,r=!0);r&&e.drawBuffers(n)},useProgram:function(t){return q!==t&&(e.useProgram(t),q=t,!0)},setBlending:k,setMaterial:function(t,a){2===t.side?B(e.CULL_FACE):F(e.CULL_FACE);let s=1===t.side;a&&(s=!s),G(s),1===t.blending&&!1===t.transparent?k(0):k(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.blendColor,t.blendAlpha,t.premultipliedAlpha),n.setFunc(t.depthFunc),n.setTest(t.depthTest),n.setMask(t.depthWrite),i.setMask(t.colorWrite);let o=t.stencilWrite;r.setTest(o),o&&(r.setMask(t.stencilWriteMask),r.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),r.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),X(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?F(e.SAMPLE_ALPHA_TO_COVERAGE):B(e.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:G,setCullFace:W,setLineWidth:function(t){t!==T&&(R&&e.lineWidth(t),T=t)},setPolygonOffset:X,setScissorTest:function(t){t?F(e.SCISSOR_TEST):B(e.SCISSOR_TEST)},activeTexture:function(t){void 0===t&&(t=e.TEXTURE0+A-1),P!==t&&(e.activeTexture(t),P=t)},bindTexture:function(t,i,n){void 0===n&&(n=null===P?e.TEXTURE0+A-1:P);let r=L[n];void 0===r&&(r={type:void 0,texture:void 0},L[n]=r),(r.type!==t||r.texture!==i)&&(P!==n&&(e.activeTexture(n),P=n),e.bindTexture(t,i||z[t]),r.type=t,r.texture=i)},unbindTexture:function(){let t=L[P];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexImage3D:function(){try{e.compressedTexImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},updateUBOMapping:function(t,i){let n=s.get(i);void 0===n&&(n=new WeakMap,s.set(i,n));let r=n.get(t);void 0===r&&(r=e.getUniformBlockIndex(i,t.name),n.set(t,r))},uniformBlockBinding:function(t,i){let n=s.get(i).get(t);a.get(i)!==n&&(e.uniformBlockBinding(i,n,t.__bindingPointIndex),a.set(i,n))},texStorage2D:function(){try{e.texStorage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texStorage3D:function(){try{e.texStorage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage2D:function(){try{e.texSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage3D:function(){try{e.texSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage2D:function(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage3D:function(){try{e.compressedTexSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===N.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),N.copy(t))},viewport:function(t){!1===I.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),I.copy(t))},reset:function(){e.disable(e.BLEND),e.disable(e.CULL_FACE),e.disable(e.DEPTH_TEST),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SCISSOR_TEST),e.disable(e.STENCIL_TEST),e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO),e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO),e.blendColor(0,0,0,0),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(e.LESS),n.setReversed(!1),e.clearDepth(1),e.stencilMask(0xffffffff),e.stencilFunc(e.ALWAYS,0,0xffffffff),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.clearStencil(0),e.cullFace(e.BACK),e.frontFace(e.CCW),e.polygonOffset(0,0),e.activeTexture(e.TEXTURE0),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),e.bindFramebuffer(e.READ_FRAMEBUFFER,null),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),o={},P=null,L={},l={},h=new WeakMap,c=[],q=null,u=!1,d=null,m=null,p=null,f=null,_=null,g=null,x=null,v=new tq(0,0,0),y=0,M=!1,S=null,E=null,T=null,b=null,w=null,N.set(0,0,e.canvas.width,e.canvas.height),I.set(0,0,e.canvas.width,e.canvas.height),i.reset(),n.reset(),r.reset()}}}function a4(e,t,i,n,r,a,s){let o;let l=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,h="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),c=new C,q=new WeakMap,u=new WeakMap,d=!1;try{d="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){}function m(e,t){return d?new OffscreenCanvas(e,t):U("canvas")}function p(e,t,i){let n=1,r=X(e);if((r.width>i||r.height>i)&&(n=i/Math.max(r.width,r.height)),n<1){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof VideoFrame&&e instanceof VideoFrame){let i=Math.floor(n*r.width),a=Math.floor(n*r.height);void 0===o&&(o=m(i,a));let s=t?m(i,a):o;return s.width=i,s.height=a,s.getContext("2d").drawImage(e,0,0,i,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+i+"x"+a+")."),s}"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+").")}return e}function f(e){return e.generateMipmaps}function _(t){e.generateMipmap(t)}function y(i,n,r,a,s=!1){if(null!==i){if(void 0!==e[i])return e[i];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+i+"'")}let o=n;if(n===e.RED&&(r===e.FLOAT&&(o=e.R32F),r===e.HALF_FLOAT&&(o=e.R16F),r===e.UNSIGNED_BYTE&&(o=e.R8)),n===e.RED_INTEGER&&(r===e.UNSIGNED_BYTE&&(o=e.R8UI),r===e.UNSIGNED_SHORT&&(o=e.R16UI),r===e.UNSIGNED_INT&&(o=e.R32UI),r===e.BYTE&&(o=e.R8I),r===e.SHORT&&(o=e.R16I),r===e.INT&&(o=e.R32I)),n===e.RG&&(r===e.FLOAT&&(o=e.RG32F),r===e.HALF_FLOAT&&(o=e.RG16F),r===e.UNSIGNED_BYTE&&(o=e.RG8)),n===e.RG_INTEGER&&(r===e.UNSIGNED_BYTE&&(o=e.RG8UI),r===e.UNSIGNED_SHORT&&(o=e.RG16UI),r===e.UNSIGNED_INT&&(o=e.RG32UI),r===e.BYTE&&(o=e.RG8I),r===e.SHORT&&(o=e.RG16I),r===e.INT&&(o=e.RG32I)),n===e.RGB_INTEGER&&(r===e.UNSIGNED_BYTE&&(o=e.RGB8UI),r===e.UNSIGNED_SHORT&&(o=e.RGB16UI),r===e.UNSIGNED_INT&&(o=e.RGB32UI),r===e.BYTE&&(o=e.RGB8I),r===e.SHORT&&(o=e.RGB16I),r===e.INT&&(o=e.RGB32I)),n===e.RGBA_INTEGER&&(r===e.UNSIGNED_BYTE&&(o=e.RGBA8UI),r===e.UNSIGNED_SHORT&&(o=e.RGBA16UI),r===e.UNSIGNED_INT&&(o=e.RGBA32UI),r===e.BYTE&&(o=e.RGBA8I),r===e.SHORT&&(o=e.RGBA16I),r===e.INT&&(o=e.RGBA32I)),n===e.RGB&&r===e.UNSIGNED_INT_5_9_9_9_REV&&(o=e.RGB9_E5),n===e.RGBA){let t=s?x:F.getTransfer(a);r===e.FLOAT&&(o=e.RGBA32F),r===e.HALF_FLOAT&&(o=e.RGBA16F),r===e.UNSIGNED_BYTE&&(o=t===v?e.SRGB8_ALPHA8:e.RGBA8),r===e.UNSIGNED_SHORT_4_4_4_4&&(o=e.RGBA4),r===e.UNSIGNED_SHORT_5_5_5_1&&(o=e.RGB5_A1)}return(o===e.R16F||o===e.R32F||o===e.RG16F||o===e.RG32F||o===e.RGBA16F||o===e.RGBA32F)&&t.get("EXT_color_buffer_float"),o}function M(t,i){let n;return t?null===i||1014===i||1020===i?n=e.DEPTH24_STENCIL8:1015===i?n=e.DEPTH32F_STENCIL8:1012===i&&(n=e.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):null===i||1014===i||1020===i?n=e.DEPTH_COMPONENT24:1015===i?n=e.DEPTH_COMPONENT32F:1012===i&&(n=e.DEPTH_COMPONENT16),n}function S(e,t){return!0===f(e)||e.isFramebufferTexture&&1003!==e.minFilter&&1006!==e.minFilter?Math.log2(Math.max(t.width,t.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function E(e){let t=e.target;t.removeEventListener("dispose",E),function(e){let t=n.get(e);if(void 0===t.__webglInit)return;let i=e.source,r=u.get(i);if(r){let n=r[t.__cacheKey];n.usedTimes--,0===n.usedTimes&&b(e),0===Object.keys(r).length&&u.delete(i)}n.remove(e)}(t),t.isVideoTexture&&q.delete(t)}function T(t){let i=t.target;i.removeEventListener("dispose",T),function(t){let i=n.get(t);if(t.depthTexture&&(t.depthTexture.dispose(),n.remove(t.depthTexture)),t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++){if(Array.isArray(i.__webglFramebuffer[t]))for(let n=0;n<i.__webglFramebuffer[t].length;n++)e.deleteFramebuffer(i.__webglFramebuffer[t][n]);else e.deleteFramebuffer(i.__webglFramebuffer[t]);i.__webglDepthbuffer&&e.deleteRenderbuffer(i.__webglDepthbuffer[t])}else{if(Array.isArray(i.__webglFramebuffer))for(let t=0;t<i.__webglFramebuffer.length;t++)e.deleteFramebuffer(i.__webglFramebuffer[t]);else e.deleteFramebuffer(i.__webglFramebuffer);if(i.__webglDepthbuffer&&e.deleteRenderbuffer(i.__webglDepthbuffer),i.__webglMultisampledFramebuffer&&e.deleteFramebuffer(i.__webglMultisampledFramebuffer),i.__webglColorRenderbuffer)for(let t=0;t<i.__webglColorRenderbuffer.length;t++)i.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(i.__webglColorRenderbuffer[t]);i.__webglDepthRenderbuffer&&e.deleteRenderbuffer(i.__webglDepthRenderbuffer)}let r=t.textures;for(let t=0,i=r.length;t<i;t++){let i=n.get(r[t]);i.__webglTexture&&(e.deleteTexture(i.__webglTexture),s.memory.textures--),n.remove(r[t])}n.remove(t)}(i)}function b(t){let i=n.get(t);e.deleteTexture(i.__webglTexture);let r=t.source,a=u.get(r);delete a[i.__cacheKey],s.memory.textures--}let w=0;function A(t,r){let a=n.get(t);if(t.isVideoTexture&&function(e){let t=s.render.frame;q.get(e)!==t&&(q.set(e,t),e.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&a.__version!==t.version){let e=t.image;if(null===e)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(!1===e.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{I(a,t,r);return}}i.bindTexture(e.TEXTURE_2D,a.__webglTexture,e.TEXTURE0+r)}let R={1e3:e.REPEAT,1001:e.CLAMP_TO_EDGE,1002:e.MIRRORED_REPEAT},P={1003:e.NEAREST,1004:e.NEAREST_MIPMAP_NEAREST,1005:e.NEAREST_MIPMAP_LINEAR,1006:e.LINEAR,1007:e.LINEAR_MIPMAP_NEAREST,1008:e.LINEAR_MIPMAP_LINEAR},L={512:e.NEVER,519:e.ALWAYS,513:e.LESS,515:e.LEQUAL,514:e.EQUAL,518:e.GEQUAL,516:e.GREATER,517:e.NOTEQUAL};function D(i,a){if(1015===a.type&&!1===t.has("OES_texture_float_linear")&&(1006===a.magFilter||1007===a.magFilter||1005===a.magFilter||1008===a.magFilter||1006===a.minFilter||1007===a.minFilter||1005===a.minFilter||1008===a.minFilter)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),e.texParameteri(i,e.TEXTURE_WRAP_S,R[a.wrapS]),e.texParameteri(i,e.TEXTURE_WRAP_T,R[a.wrapT]),(i===e.TEXTURE_3D||i===e.TEXTURE_2D_ARRAY)&&e.texParameteri(i,e.TEXTURE_WRAP_R,R[a.wrapR]),e.texParameteri(i,e.TEXTURE_MAG_FILTER,P[a.magFilter]),e.texParameteri(i,e.TEXTURE_MIN_FILTER,P[a.minFilter]),a.compareFunction&&(e.texParameteri(i,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE),e.texParameteri(i,e.TEXTURE_COMPARE_FUNC,L[a.compareFunction])),!0===t.has("EXT_texture_filter_anisotropic")&&1003!==a.magFilter&&(1005===a.minFilter||1008===a.minFilter)&&(1015!==a.type||!1!==t.has("OES_texture_float_linear"))&&(a.anisotropy>1||n.get(a).__currentAnisotropy)){let s=t.get("EXT_texture_filter_anisotropic");e.texParameterf(i,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),n.get(a).__currentAnisotropy=a.anisotropy}}function N(t,i){let n=!1;void 0===t.__webglInit&&(t.__webglInit=!0,i.addEventListener("dispose",E));let r=i.source,a=u.get(r);void 0===a&&(a={},u.set(r,a));let o=function(e){let t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.wrapR||0),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.colorSpace),t.join()}(i);if(o!==t.__cacheKey){void 0===a[o]&&(a[o]={texture:e.createTexture(),usedTimes:0},s.memory.textures++,n=!0),a[o].usedTimes++;let r=a[t.__cacheKey];void 0!==r&&(a[t.__cacheKey].usedTimes--,0===r.usedTimes&&b(i)),t.__cacheKey=o,t.__webglTexture=a[o].texture}return n}function I(t,s,o){let l=e.TEXTURE_2D;(s.isDataArrayTexture||s.isCompressedArrayTexture)&&(l=e.TEXTURE_2D_ARRAY),s.isData3DTexture&&(l=e.TEXTURE_3D);let h=N(t,s),c=s.source;i.bindTexture(l,t.__webglTexture,e.TEXTURE0+o);let q=n.get(c);if(c.version!==q.__version||!0===h){let t;i.activeTexture(e.TEXTURE0+o);let n=F.getPrimaries(F.workingColorSpace),u=""===s.colorSpace?null:F.getPrimaries(s.colorSpace),d=""===s.colorSpace||n===u?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,s.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,s.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,d);let m=p(s.image,!1,r.maxTextureSize);m=W(s,m);let g=a.convert(s.format,s.colorSpace),x=a.convert(s.type),v=y(s.internalFormat,g,x,s.colorSpace,s.isVideoTexture);D(l,s);let E=s.mipmaps,T=!0!==s.isVideoTexture,b=void 0===q.__version||!0===h,w=c.dataReady,A=S(s,m);if(s.isDepthTexture)v=M(1027===s.format,s.type),b&&(T?i.texStorage2D(e.TEXTURE_2D,1,v,m.width,m.height):i.texImage2D(e.TEXTURE_2D,0,v,m.width,m.height,0,g,x,null));else if(s.isDataTexture){if(E.length>0){T&&b&&i.texStorage2D(e.TEXTURE_2D,A,v,E[0].width,E[0].height);for(let n=0,r=E.length;n<r;n++)t=E[n],T?w&&i.texSubImage2D(e.TEXTURE_2D,n,0,0,t.width,t.height,g,x,t.data):i.texImage2D(e.TEXTURE_2D,n,v,t.width,t.height,0,g,x,t.data);s.generateMipmaps=!1}else T?(b&&i.texStorage2D(e.TEXTURE_2D,A,v,m.width,m.height),w&&i.texSubImage2D(e.TEXTURE_2D,0,0,0,m.width,m.height,g,x,m.data)):i.texImage2D(e.TEXTURE_2D,0,v,m.width,m.height,0,g,x,m.data)}else if(s.isCompressedTexture){if(s.isCompressedArrayTexture){T&&b&&i.texStorage3D(e.TEXTURE_2D_ARRAY,A,v,E[0].width,E[0].height,m.depth);for(let n=0,r=E.length;n<r;n++)if(t=E[n],1023!==s.format){if(null!==g){if(T){if(w){if(s.layerUpdates.size>0){let r=n1(t.width,t.height,s.format,s.type);for(let a of s.layerUpdates){let s=t.data.subarray(a*r/t.data.BYTES_PER_ELEMENT,(a+1)*r/t.data.BYTES_PER_ELEMENT);i.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,n,0,0,a,t.width,t.height,1,g,s)}s.clearLayerUpdates()}else i.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,n,0,0,0,t.width,t.height,m.depth,g,t.data)}}else i.compressedTexImage3D(e.TEXTURE_2D_ARRAY,n,v,t.width,t.height,m.depth,0,t.data,0,0)}else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}else T?w&&i.texSubImage3D(e.TEXTURE_2D_ARRAY,n,0,0,0,t.width,t.height,m.depth,g,x,t.data):i.texImage3D(e.TEXTURE_2D_ARRAY,n,v,t.width,t.height,m.depth,0,g,x,t.data)}else{T&&b&&i.texStorage2D(e.TEXTURE_2D,A,v,E[0].width,E[0].height);for(let n=0,r=E.length;n<r;n++)t=E[n],1023!==s.format?null!==g?T?w&&i.compressedTexSubImage2D(e.TEXTURE_2D,n,0,0,t.width,t.height,g,t.data):i.compressedTexImage2D(e.TEXTURE_2D,n,v,t.width,t.height,0,t.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):T?w&&i.texSubImage2D(e.TEXTURE_2D,n,0,0,t.width,t.height,g,x,t.data):i.texImage2D(e.TEXTURE_2D,n,v,t.width,t.height,0,g,x,t.data)}}else if(s.isDataArrayTexture){if(T){if(b&&i.texStorage3D(e.TEXTURE_2D_ARRAY,A,v,m.width,m.height,m.depth),w){if(s.layerUpdates.size>0){let t=n1(m.width,m.height,s.format,s.type);for(let n of s.layerUpdates){let r=m.data.subarray(n*t/m.data.BYTES_PER_ELEMENT,(n+1)*t/m.data.BYTES_PER_ELEMENT);i.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,n,m.width,m.height,1,g,x,r)}s.clearLayerUpdates()}else i.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,m.width,m.height,m.depth,g,x,m.data)}}else i.texImage3D(e.TEXTURE_2D_ARRAY,0,v,m.width,m.height,m.depth,0,g,x,m.data)}else if(s.isData3DTexture)T?(b&&i.texStorage3D(e.TEXTURE_3D,A,v,m.width,m.height,m.depth),w&&i.texSubImage3D(e.TEXTURE_3D,0,0,0,0,m.width,m.height,m.depth,g,x,m.data)):i.texImage3D(e.TEXTURE_3D,0,v,m.width,m.height,m.depth,0,g,x,m.data);else if(s.isFramebufferTexture){if(b){if(T)i.texStorage2D(e.TEXTURE_2D,A,v,m.width,m.height);else{let t=m.width,n=m.height;for(let r=0;r<A;r++)i.texImage2D(e.TEXTURE_2D,r,v,t,n,0,g,x,null),t>>=1,n>>=1}}}else if(E.length>0){if(T&&b){let t=X(E[0]);i.texStorage2D(e.TEXTURE_2D,A,v,t.width,t.height)}for(let n=0,r=E.length;n<r;n++)t=E[n],T?w&&i.texSubImage2D(e.TEXTURE_2D,n,0,0,g,x,t):i.texImage2D(e.TEXTURE_2D,n,v,g,x,t);s.generateMipmaps=!1}else if(T){if(b){let t=X(m);i.texStorage2D(e.TEXTURE_2D,A,v,t.width,t.height)}w&&i.texSubImage2D(e.TEXTURE_2D,0,0,0,g,x,m)}else i.texImage2D(e.TEXTURE_2D,0,v,g,x,m);f(s)&&_(l),q.__version=c.version,s.onUpdate&&s.onUpdate(s)}t.__version=s.version}function O(t,r,s,o,h,c){let q=a.convert(s.format,s.colorSpace),u=a.convert(s.type),d=y(s.internalFormat,q,u,s.colorSpace),m=n.get(r),p=n.get(s);if(p.__renderTarget=r,!m.__hasExternalTextures){let t=Math.max(1,r.width>>c),n=Math.max(1,r.height>>c);h===e.TEXTURE_3D||h===e.TEXTURE_2D_ARRAY?i.texImage3D(h,c,d,t,n,r.depth,0,q,u,null):i.texImage2D(h,c,d,t,n,0,q,u,null)}i.bindFramebuffer(e.FRAMEBUFFER,t),G(r)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,o,h,p.__webglTexture,0,k(r)):(h===e.TEXTURE_2D||h>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&h<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,o,h,p.__webglTexture,c),i.bindFramebuffer(e.FRAMEBUFFER,null)}function z(t,i,n){if(e.bindRenderbuffer(e.RENDERBUFFER,t),i.depthBuffer){let r=i.depthTexture,a=r&&r.isDepthTexture?r.type:null,s=M(i.stencilBuffer,a),o=i.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,h=k(i);G(i)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,h,s,i.width,i.height):n?e.renderbufferStorageMultisample(e.RENDERBUFFER,h,s,i.width,i.height):e.renderbufferStorage(e.RENDERBUFFER,s,i.width,i.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,o,e.RENDERBUFFER,t)}else{let t=i.textures;for(let r=0;r<t.length;r++){let s=t[r],o=a.convert(s.format,s.colorSpace),h=a.convert(s.type),c=y(s.internalFormat,o,h,s.colorSpace),q=k(i);n&&!1===G(i)?e.renderbufferStorageMultisample(e.RENDERBUFFER,q,c,i.width,i.height):G(i)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,q,c,i.width,i.height):e.renderbufferStorage(e.RENDERBUFFER,c,i.width,i.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function B(t){let r=n.get(t),a=!0===t.isWebGLCubeRenderTarget;if(r.__boundDepthTexture!==t.depthTexture){let e=t.depthTexture;if(r.__depthDisposeCallback&&r.__depthDisposeCallback(),e){let t=()=>{delete r.__boundDepthTexture,delete r.__depthDisposeCallback,e.removeEventListener("dispose",t)};e.addEventListener("dispose",t),r.__depthDisposeCallback=t}r.__boundDepthTexture=e}if(t.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw Error("target.depthTexture not supported in Cube render targets");!function(t,r){if(r&&r.isWebGLCubeRenderTarget)throw Error("Depth Texture with cube render targets is not supported");if(i.bindFramebuffer(e.FRAMEBUFFER,t),!(r.depthTexture&&r.depthTexture.isDepthTexture))throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");let a=n.get(r.depthTexture);a.__renderTarget=r,a.__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),A(r.depthTexture,0);let s=a.__webglTexture,o=k(r);if(1026===r.depthTexture.format)G(r)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0,o):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0);else if(1027===r.depthTexture.format)G(r)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0,o):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0);else throw Error("Unknown depthTexture format")}(r.__webglFramebuffer,t)}else if(a){r.__webglDepthbuffer=[];for(let n=0;n<6;n++)if(i.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[n]),void 0===r.__webglDepthbuffer[n])r.__webglDepthbuffer[n]=e.createRenderbuffer(),z(r.__webglDepthbuffer[n],t,!1);else{let i=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,a=r.__webglDepthbuffer[n];e.bindRenderbuffer(e.RENDERBUFFER,a),e.framebufferRenderbuffer(e.FRAMEBUFFER,i,e.RENDERBUFFER,a)}}else if(i.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer),void 0===r.__webglDepthbuffer)r.__webglDepthbuffer=e.createRenderbuffer(),z(r.__webglDepthbuffer,t,!1);else{let i=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,n=r.__webglDepthbuffer;e.bindRenderbuffer(e.RENDERBUFFER,n),e.framebufferRenderbuffer(e.FRAMEBUFFER,i,e.RENDERBUFFER,n)}i.bindFramebuffer(e.FRAMEBUFFER,null)}let H=[],V=[];function k(e){return Math.min(r.maxSamples,e.samples)}function G(e){let i=n.get(e);return e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==i.__useRenderToTexture}function W(e,t){let i=e.colorSpace,n=e.format,r=e.type;return!0===e.isCompressedTexture||!0===e.isVideoTexture||i!==g&&""!==i&&(F.getTransfer(i)===v?(1023!==n||1009!==r)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",i)),t}function X(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement?(c.width=e.naturalWidth||e.width,c.height=e.naturalHeight||e.height):"undefined"!=typeof VideoFrame&&e instanceof VideoFrame?(c.width=e.displayWidth,c.height=e.displayHeight):(c.width=e.width,c.height=e.height),c}this.allocateTextureUnit=function(){let e=w;return e>=r.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+r.maxTextures),w+=1,e},this.resetTextureUnits=function(){w=0},this.setTexture2D=A,this.setTexture2DArray=function(t,r){let a=n.get(t);if(t.version>0&&a.__version!==t.version){I(a,t,r);return}i.bindTexture(e.TEXTURE_2D_ARRAY,a.__webglTexture,e.TEXTURE0+r)},this.setTexture3D=function(t,r){let a=n.get(t);if(t.version>0&&a.__version!==t.version){I(a,t,r);return}i.bindTexture(e.TEXTURE_3D,a.__webglTexture,e.TEXTURE0+r)},this.setTextureCube=function(t,s){let o=n.get(t);if(t.version>0&&o.__version!==t.version){(function(t,s,o){if(6!==s.image.length)return;let l=N(t,s),h=s.source;i.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+o);let c=n.get(h);if(h.version!==c.__version||!0===l){let t;i.activeTexture(e.TEXTURE0+o);let n=F.getPrimaries(F.workingColorSpace),q=""===s.colorSpace?null:F.getPrimaries(s.colorSpace),u=""===s.colorSpace||n===q?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,s.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,s.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,u);let d=s.isCompressedTexture||s.image[0].isCompressedTexture,m=s.image[0]&&s.image[0].isDataTexture,g=[];for(let e=0;e<6;e++)d||m?g[e]=m?s.image[e].image:s.image[e]:g[e]=p(s.image[e],!0,r.maxCubemapSize),g[e]=W(s,g[e]);let x=g[0],v=a.convert(s.format,s.colorSpace),M=a.convert(s.type),E=y(s.internalFormat,v,M,s.colorSpace),T=!0!==s.isVideoTexture,b=void 0===c.__version||!0===l,w=h.dataReady,A=S(s,x);if(D(e.TEXTURE_CUBE_MAP,s),d){T&&b&&i.texStorage2D(e.TEXTURE_CUBE_MAP,A,E,x.width,x.height);for(let n=0;n<6;n++){t=g[n].mipmaps;for(let r=0;r<t.length;r++){let a=t[r];1023!==s.format?null!==v?T?w&&i.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r,0,0,a.width,a.height,v,a.data):i.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r,E,a.width,a.height,0,a.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):T?w&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r,0,0,a.width,a.height,v,M,a.data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r,E,a.width,a.height,0,v,M,a.data)}}}else{if(t=s.mipmaps,T&&b){t.length>0&&A++;let n=X(g[0]);i.texStorage2D(e.TEXTURE_CUBE_MAP,A,E,n.width,n.height)}for(let n=0;n<6;n++)if(m){T?w&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,0,0,g[n].width,g[n].height,v,M,g[n].data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,E,g[n].width,g[n].height,0,v,M,g[n].data);for(let r=0;r<t.length;r++){let a=t[r].image[n].image;T?w&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r+1,0,0,a.width,a.height,v,M,a.data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r+1,E,a.width,a.height,0,v,M,a.data)}}else{T?w&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,0,0,v,M,g[n]):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,E,v,M,g[n]);for(let r=0;r<t.length;r++){let a=t[r];T?w&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r+1,0,0,v,M,a.image[n]):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r+1,E,v,M,a.image[n])}}}f(s)&&_(e.TEXTURE_CUBE_MAP),c.__version=h.version,s.onUpdate&&s.onUpdate(s)}t.__version=s.version})(o,t,s);return}i.bindTexture(e.TEXTURE_CUBE_MAP,o.__webglTexture,e.TEXTURE0+s)},this.rebindTextures=function(t,i,r){let a=n.get(t);void 0!==i&&O(a.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0),void 0!==r&&B(t)},this.setupRenderTarget=function(t){let r=t.texture,o=n.get(t),l=n.get(r);t.addEventListener("dispose",T);let h=t.textures,c=!0===t.isWebGLCubeRenderTarget,q=h.length>1;if(!q&&(void 0===l.__webglTexture&&(l.__webglTexture=e.createTexture()),l.__version=r.version,s.memory.textures++),c){o.__webglFramebuffer=[];for(let t=0;t<6;t++)if(r.mipmaps&&r.mipmaps.length>0){o.__webglFramebuffer[t]=[];for(let i=0;i<r.mipmaps.length;i++)o.__webglFramebuffer[t][i]=e.createFramebuffer()}else o.__webglFramebuffer[t]=e.createFramebuffer()}else{if(r.mipmaps&&r.mipmaps.length>0){o.__webglFramebuffer=[];for(let t=0;t<r.mipmaps.length;t++)o.__webglFramebuffer[t]=e.createFramebuffer()}else o.__webglFramebuffer=e.createFramebuffer();if(q)for(let t=0,i=h.length;t<i;t++){let i=n.get(h[t]);void 0===i.__webglTexture&&(i.__webglTexture=e.createTexture(),s.memory.textures++)}if(t.samples>0&&!1===G(t)){o.__webglMultisampledFramebuffer=e.createFramebuffer(),o.__webglColorRenderbuffer=[],i.bindFramebuffer(e.FRAMEBUFFER,o.__webglMultisampledFramebuffer);for(let i=0;i<h.length;i++){let n=h[i];o.__webglColorRenderbuffer[i]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,o.__webglColorRenderbuffer[i]);let r=a.convert(n.format,n.colorSpace),s=a.convert(n.type),l=y(n.internalFormat,r,s,n.colorSpace,!0===t.isXRRenderTarget),c=k(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,c,l,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+i,e.RENDERBUFFER,o.__webglColorRenderbuffer[i])}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(o.__webglDepthRenderbuffer=e.createRenderbuffer(),z(o.__webglDepthRenderbuffer,t,!0)),i.bindFramebuffer(e.FRAMEBUFFER,null)}}if(c){i.bindTexture(e.TEXTURE_CUBE_MAP,l.__webglTexture),D(e.TEXTURE_CUBE_MAP,r);for(let i=0;i<6;i++)if(r.mipmaps&&r.mipmaps.length>0)for(let n=0;n<r.mipmaps.length;n++)O(o.__webglFramebuffer[i][n],t,r,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+i,n);else O(o.__webglFramebuffer[i],t,r,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+i,0);f(r)&&_(e.TEXTURE_CUBE_MAP),i.unbindTexture()}else if(q){for(let r=0,a=h.length;r<a;r++){let a=h[r],s=n.get(a);i.bindTexture(e.TEXTURE_2D,s.__webglTexture),D(e.TEXTURE_2D,a),O(o.__webglFramebuffer,t,a,e.COLOR_ATTACHMENT0+r,e.TEXTURE_2D,0),f(a)&&_(e.TEXTURE_2D)}i.unbindTexture()}else{let n=e.TEXTURE_2D;if((t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(n=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY),i.bindTexture(n,l.__webglTexture),D(n,r),r.mipmaps&&r.mipmaps.length>0)for(let i=0;i<r.mipmaps.length;i++)O(o.__webglFramebuffer[i],t,r,e.COLOR_ATTACHMENT0,n,i);else O(o.__webglFramebuffer,t,r,e.COLOR_ATTACHMENT0,n,0);f(r)&&_(n),i.unbindTexture()}t.depthBuffer&&B(t)},this.updateRenderTargetMipmap=function(t){let r=t.textures;for(let a=0,s=r.length;a<s;a++){let s=r[a];if(f(s)){let r=t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:t.isWebGL3DRenderTarget?e.TEXTURE_3D:t.isWebGLArrayRenderTarget||t.isCompressedArrayTexture?e.TEXTURE_2D_ARRAY:e.TEXTURE_2D,a=n.get(s).__webglTexture;i.bindTexture(r,a),_(r),i.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(t.samples>0){if(!1===G(t)){let r=t.textures,a=t.width,s=t.height,o=e.COLOR_BUFFER_BIT,l=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,c=n.get(t),q=r.length>1;if(q)for(let t=0;t<r.length;t++)i.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),i.bindFramebuffer(e.FRAMEBUFFER,c.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);i.bindFramebuffer(e.READ_FRAMEBUFFER,c.__webglMultisampledFramebuffer),i.bindFramebuffer(e.DRAW_FRAMEBUFFER,c.__webglFramebuffer);for(let i=0;i<r.length;i++){if(t.resolveDepthBuffer&&(t.depthBuffer&&(o|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&t.resolveStencilBuffer&&(o|=e.STENCIL_BUFFER_BIT)),q){e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,c.__webglColorRenderbuffer[i]);let t=n.get(r[i]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,a,s,0,0,a,s,o,e.NEAREST),!0===h&&(H.length=0,V.length=0,H.push(e.COLOR_ATTACHMENT0+i),t.depthBuffer&&!1===t.resolveDepthBuffer&&(H.push(l),V.push(l),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,V)),e.invalidateFramebuffer(e.READ_FRAMEBUFFER,H))}if(i.bindFramebuffer(e.READ_FRAMEBUFFER,null),i.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),q)for(let t=0;t<r.length;t++){i.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,c.__webglColorRenderbuffer[t]);let a=n.get(r[t]).__webglTexture;i.bindFramebuffer(e.FRAMEBUFFER,c.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,a,0)}i.bindFramebuffer(e.DRAW_FRAMEBUFFER,c.__webglMultisampledFramebuffer)}else if(t.depthBuffer&&!1===t.resolveDepthBuffer&&h){let i=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[i])}}},this.setupDepthRenderbuffer=B,this.setupFrameBufferTexture=O,this.useMultisampledRTT=G}function a6(e,t){return{convert:function(i,n=""){let r;let a=F.getTransfer(n);if(1009===i)return e.UNSIGNED_BYTE;if(1017===i)return e.UNSIGNED_SHORT_4_4_4_4;if(1018===i)return e.UNSIGNED_SHORT_5_5_5_1;if(35902===i)return e.UNSIGNED_INT_5_9_9_9_REV;if(1010===i)return e.BYTE;if(1011===i)return e.SHORT;if(1012===i)return e.UNSIGNED_SHORT;if(1013===i)return e.INT;if(1014===i)return e.UNSIGNED_INT;if(1015===i)return e.FLOAT;if(1016===i)return e.HALF_FLOAT;if(1021===i)return e.ALPHA;if(1022===i)return e.RGB;if(1023===i)return e.RGBA;if(1024===i)return e.LUMINANCE;if(1025===i)return e.LUMINANCE_ALPHA;if(1026===i)return e.DEPTH_COMPONENT;if(1027===i)return e.DEPTH_STENCIL;if(1028===i)return e.RED;if(1029===i)return e.RED_INTEGER;if(1030===i)return e.RG;if(1031===i)return e.RG_INTEGER;if(1033===i)return e.RGBA_INTEGER;if(33776===i||33777===i||33778===i||33779===i){if(a===v){if(null===(r=t.get("WEBGL_compressed_texture_s3tc_srgb")))return null;if(33776===i)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(33777===i)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(33778===i)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(33779===i)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(null===(r=t.get("WEBGL_compressed_texture_s3tc")))return null;if(33776===i)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===i)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===i)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===i)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}}if(35840===i||35841===i||35842===i||35843===i){if(null===(r=t.get("WEBGL_compressed_texture_pvrtc")))return null;if(35840===i)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===i)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===i)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===i)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===i||37492===i||37496===i){if(null===(r=t.get("WEBGL_compressed_texture_etc")))return null;if(36196===i||37492===i)return a===v?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(37496===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(37808===i||37809===i||37810===i||37811===i||37812===i||37813===i||37814===i||37815===i||37816===i||37817===i||37818===i||37819===i||37820===i||37821===i){if(null===(r=t.get("WEBGL_compressed_texture_astc")))return null;if(37808===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===i)return a===v?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(36492===i||36494===i||36495===i){if(null===(r=t.get("EXT_texture_compression_bptc")))return null;if(36492===i)return a===v?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(36494===i)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(36495===i)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(36283===i||36284===i||36285===i||36286===i){if(null===(r=t.get("EXT_texture_compression_rgtc")))return null;if(36492===i)return r.COMPRESSED_RED_RGTC1_EXT;if(36284===i)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(36285===i)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(36286===i)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return 1020===i?e.UNSIGNED_INT_24_8:void 0!==e[i]?e[i]:null}}}const a0=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,a5=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class a8{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,i){if(null===this.texture){let n=new j;e.properties.get(n).__webglTexture=t.texture,(t.depthNear!==i.depthNear||t.depthFar!==i.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=n}}getMesh(e){if(null!==this.texture&&null===this.mesh){let t=e.cameras[0].viewport,i=new tZ({vertexShader:a0,fragmentShader:a5,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new tV(new ne(20,20),i)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class a7 extends M{constructor(e,t){super();let i=this,n=null,r=1,a=null,s="local-floor",o=1,l=null,h=null,c=null,q=null,u=null,d=null,m=new a8,p=t.getContextAttributes(),f=null,_=null,g=[],x=[],v=new C,y=null,M=new t1;M.viewport=new Y;let S=new t1;S.viewport=new Y;let E=[M,S],b=new nH,w=null,A=null;function R(e){let t=x.indexOf(e.inputSource);if(-1===t)return;let i=g[t];void 0!==i&&(i.update(e.inputSource,e.frame,l||a),i.dispatchEvent({type:e.type,data:e.inputSource}))}function P(){n.removeEventListener("select",R),n.removeEventListener("selectstart",R),n.removeEventListener("selectend",R),n.removeEventListener("squeeze",R),n.removeEventListener("squeezestart",R),n.removeEventListener("squeezeend",R),n.removeEventListener("end",P),n.removeEventListener("inputsourceschange",L);for(let e=0;e<g.length;e++){let t=x[e];null!==t&&(x[e]=null,g[e].disconnect(t))}w=null,A=null,m.reset(),e.setRenderTarget(f),u=null,q=null,c=null,n=null,_=null,O.stop(),i.isPresenting=!1,e.setPixelRatio(y),e.setSize(v.width,v.height,!1),i.dispatchEvent({type:"sessionend"})}function L(e){for(let t=0;t<e.removed.length;t++){let i=e.removed[t],n=x.indexOf(i);n>=0&&(x[n]=null,g[n].disconnect(i))}for(let t=0;t<e.added.length;t++){let i=e.added[t],n=x.indexOf(i);if(-1===n){for(let e=0;e<g.length;e++){if(e>=x.length){x.push(i),n=e;break}if(null===x[e]){x[e]=i,n=e;break}}if(-1===n)break}let r=g[n];r&&r.connect(i)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=g[e];return void 0===t&&(t=new t5,g[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=g[e];return void 0===t&&(t=new t5,g[e]=t),t.getGripSpace()},this.getHand=function(e){let t=g[e];return void 0===t&&(t=new t5,g[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){r=e,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){s=e,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||a},this.setReferenceSpace=function(e){l=e},this.getBaseLayer=function(){return null!==q?q:u},this.getBinding=function(){return c},this.getFrame=function(){return d},this.getSession=function(){return n},this.setSession=async function(h){if(null!==(n=h)){if(f=e.getRenderTarget(),n.addEventListener("select",R),n.addEventListener("selectstart",R),n.addEventListener("selectend",R),n.addEventListener("squeeze",R),n.addEventListener("squeezestart",R),n.addEventListener("squeezeend",R),n.addEventListener("end",P),n.addEventListener("inputsourceschange",L),!0!==p.xrCompatible&&await t.makeXRCompatible(),y=e.getPixelRatio(),e.getSize(v),"undefined"!=typeof XRWebGLBinding&&"createProjectionLayer"in XRWebGLBinding.prototype){let i=null,a=null,s=null;p.depth&&(s=p.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,i=p.stencil?1027:1026,a=p.stencil?1020:1014);let o={colorFormat:t.RGBA8,depthFormat:s,scaleFactor:r};q=(c=new XRWebGLBinding(n,t)).createProjectionLayer(o),n.updateRenderState({layers:[q]}),e.setPixelRatio(1),e.setSize(q.textureWidth,q.textureHeight,!1),_=new K(q.textureWidth,q.textureHeight,{format:1023,type:1009,depthTexture:new id(q.textureWidth,q.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,i),stencilBuffer:p.stencil,colorSpace:e.outputColorSpace,samples:4*!!p.antialias,resolveDepthBuffer:!1===q.ignoreDepthValues})}else{let i={antialias:p.antialias,alpha:!0,depth:p.depth,stencil:p.stencil,framebufferScaleFactor:r};u=new XRWebGLLayer(n,t,i),n.updateRenderState({baseLayer:u}),e.setPixelRatio(1),e.setSize(u.framebufferWidth,u.framebufferHeight,!1),_=new K(u.framebufferWidth,u.framebufferHeight,{format:1023,type:1009,colorSpace:e.outputColorSpace,stencilBuffer:p.stencil})}_.isXRRenderTarget=!0,this.setFoveation(o),l=null,a=await n.requestReferenceSpace(s),O.setContext(n),O.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==n)return n.environmentBlendMode},this.getDepthTexture=function(){return m.getDepthTexture()};let D=new Q,U=new Q;function N(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(null===n)return;let t=e.near,i=e.far;null!==m.texture&&(m.depthNear>0&&(t=m.depthNear),m.depthFar>0&&(i=m.depthFar)),b.near=S.near=M.near=t,b.far=S.far=M.far=i,(w!==b.near||A!==b.far)&&(n.updateRenderState({depthNear:b.near,depthFar:b.far}),w=b.near,A=b.far),M.layers.mask=2|e.layers.mask,S.layers.mask=4|e.layers.mask,b.layers.mask=M.layers.mask|S.layers.mask;let r=e.parent,a=b.cameras;N(b,r);for(let e=0;e<a.length;e++)N(a[e],r);2===a.length?function(e,t,i){D.setFromMatrixPosition(t.matrixWorld),U.setFromMatrixPosition(i.matrixWorld);let n=D.distanceTo(U),r=t.projectionMatrix.elements,a=i.projectionMatrix.elements,s=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],h=(r[9]-1)/r[5],c=(r[8]-1)/r[0],q=(a[8]+1)/a[0],u=n/(-c+q),d=-(u*c);if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(d),e.translateZ(u),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===r[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{let t=s+u,i=o+u;e.projectionMatrix.makePerspective(s*c-d,s*q+(n-d),l*o/i*t,h*o/i*t,t,i),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}(b,M,S):b.projectionMatrix.copy(M.projectionMatrix),null===r?e.matrix.copy(b.matrixWorld):(e.matrix.copy(r.matrixWorld),e.matrix.invert(),e.matrix.multiply(b.matrixWorld)),e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(b.projectionMatrix),e.projectionMatrixInverse.copy(b.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*T*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)},this.getCamera=function(){return b},this.getFoveation=function(){if(null!==q||null!==u)return o},this.setFoveation=function(e){o=e,null!==q&&(q.fixedFoveation=e),null!==u&&void 0!==u.fixedFoveation&&(u.fixedFoveation=e)},this.hasDepthSensing=function(){return null!==m.texture},this.getDepthSensingMesh=function(){return m.getMesh(b)};let I=null,O=new n2;O.setAnimationLoop(function(t,r){if(h=r.getViewerPose(l||a),d=r,null!==h){let t=h.views;null!==u&&(e.setRenderTargetFramebuffer(_,u.framebuffer),e.setRenderTarget(_));let i=!1;t.length!==b.cameras.length&&(b.cameras.length=0,i=!0);for(let n=0;n<t.length;n++){let r=t[n],a=null;if(null!==u)a=u.getViewport(r);else{let t=c.getViewSubImage(q,r);a=t.viewport,0===n&&(e.setRenderTargetTextures(_,t.colorTexture,q.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(_))}let s=E[n];void 0===s&&((s=new t1).layers.enable(n),s.viewport=new Y,E[n]=s),s.matrix.fromArray(r.transform.matrix),s.matrix.decompose(s.position,s.quaternion,s.scale),s.projectionMatrix.fromArray(r.projectionMatrix),s.projectionMatrixInverse.copy(s.projectionMatrix).invert(),s.viewport.set(a.x,a.y,a.width,a.height),0===n&&(b.matrix.copy(s.matrix),b.matrix.decompose(b.position,b.quaternion,b.scale)),!0===i&&b.cameras.push(s)}let r=n.enabledFeatures;if(r&&r.includes("depth-sensing")&&"gpu-optimized"==n.depthUsage&&c){let i=c.getDepthInformation(t[0]);i&&i.isValid&&i.texture&&m.init(e,i,n.renderState)}}for(let e=0;e<g.length;e++){let t=x[e],i=g[e];null!==t&&void 0!==i&&i.update(t,r,l||a)}I&&I(t,r),r.detectedPlanes&&i.dispatchEvent({type:"planesdetected",data:r}),d=null}),this.setAnimationLoop=function(e){I=e},this.dispose=function(){}}}const a9=new eF,se=new eR;function st(e,t){function i(e,t){!0===e.matrixAutoUpdate&&e.updateMatrix(),t.value.copy(e.matrix)}function n(e,n){e.opacity.value=n.opacity,n.color&&e.diffuse.value.copy(n.color),n.emissive&&e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(e.map.value=n.map,i(n.map,e.mapTransform)),n.alphaMap&&(e.alphaMap.value=n.alphaMap,i(n.alphaMap,e.alphaMapTransform)),n.bumpMap&&(e.bumpMap.value=n.bumpMap,i(n.bumpMap,e.bumpMapTransform),e.bumpScale.value=n.bumpScale,1===n.side&&(e.bumpScale.value*=-1)),n.normalMap&&(e.normalMap.value=n.normalMap,i(n.normalMap,e.normalMapTransform),e.normalScale.value.copy(n.normalScale),1===n.side&&e.normalScale.value.negate()),n.displacementMap&&(e.displacementMap.value=n.displacementMap,i(n.displacementMap,e.displacementMapTransform),e.displacementScale.value=n.displacementScale,e.displacementBias.value=n.displacementBias),n.emissiveMap&&(e.emissiveMap.value=n.emissiveMap,i(n.emissiveMap,e.emissiveMapTransform)),n.specularMap&&(e.specularMap.value=n.specularMap,i(n.specularMap,e.specularMapTransform)),n.alphaTest>0&&(e.alphaTest.value=n.alphaTest);let r=t.get(n),a=r.envMap,s=r.envMapRotation;a&&(e.envMap.value=a,a9.copy(s),a9.x*=-1,a9.y*=-1,a9.z*=-1,a.isCubeTexture&&!1===a.isRenderTargetTexture&&(a9.y*=-1,a9.z*=-1),e.envMapRotation.value.setFromMatrix4(se.makeRotationFromEuler(a9)),e.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,e.reflectivity.value=n.reflectivity,e.ior.value=n.ior,e.refractionRatio.value=n.refractionRatio),n.lightMap&&(e.lightMap.value=n.lightMap,e.lightMapIntensity.value=n.lightMapIntensity,i(n.lightMap,e.lightMapTransform)),n.aoMap&&(e.aoMap.value=n.aoMap,e.aoMapIntensity.value=n.aoMapIntensity,i(n.aoMap,e.aoMapTransform))}return{refreshFogUniforms:function(t,i){i.color.getRGB(t.fogColor.value,tj(e)),i.isFog?(t.fogNear.value=i.near,t.fogFar.value=i.far):i.isFogExp2&&(t.fogDensity.value=i.density)},refreshMaterialUniforms:function(e,r,a,s,o){r.isMeshBasicMaterial?n(e,r):r.isMeshLambertMaterial?n(e,r):r.isMeshToonMaterial?(n(e,r),r.gradientMap&&(e.gradientMap.value=r.gradientMap)):r.isMeshPhongMaterial?(n(e,r),e.specular.value.copy(r.specular),e.shininess.value=Math.max(r.shininess,1e-4)):r.isMeshStandardMaterial?(n(e,r),e.metalness.value=r.metalness,r.metalnessMap&&(e.metalnessMap.value=r.metalnessMap,i(r.metalnessMap,e.metalnessMapTransform)),e.roughness.value=r.roughness,r.roughnessMap&&(e.roughnessMap.value=r.roughnessMap,i(r.roughnessMap,e.roughnessMapTransform)),r.envMap&&(e.envMapIntensity.value=r.envMapIntensity),r.isMeshPhysicalMaterial&&(e.ior.value=r.ior,r.sheen>0&&(e.sheenColor.value.copy(r.sheenColor).multiplyScalar(r.sheen),e.sheenRoughness.value=r.sheenRoughness,r.sheenColorMap&&(e.sheenColorMap.value=r.sheenColorMap,i(r.sheenColorMap,e.sheenColorMapTransform)),r.sheenRoughnessMap&&(e.sheenRoughnessMap.value=r.sheenRoughnessMap,i(r.sheenRoughnessMap,e.sheenRoughnessMapTransform))),r.clearcoat>0&&(e.clearcoat.value=r.clearcoat,e.clearcoatRoughness.value=r.clearcoatRoughness,r.clearcoatMap&&(e.clearcoatMap.value=r.clearcoatMap,i(r.clearcoatMap,e.clearcoatMapTransform)),r.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=r.clearcoatRoughnessMap,i(r.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)),r.clearcoatNormalMap&&(e.clearcoatNormalMap.value=r.clearcoatNormalMap,i(r.clearcoatNormalMap,e.clearcoatNormalMapTransform),e.clearcoatNormalScale.value.copy(r.clearcoatNormalScale),1===r.side&&e.clearcoatNormalScale.value.negate())),r.dispersion>0&&(e.dispersion.value=r.dispersion),r.iridescence>0&&(e.iridescence.value=r.iridescence,e.iridescenceIOR.value=r.iridescenceIOR,e.iridescenceThicknessMinimum.value=r.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=r.iridescenceThicknessRange[1],r.iridescenceMap&&(e.iridescenceMap.value=r.iridescenceMap,i(r.iridescenceMap,e.iridescenceMapTransform)),r.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=r.iridescenceThicknessMap,i(r.iridescenceThicknessMap,e.iridescenceThicknessMapTransform))),r.transmission>0&&(e.transmission.value=r.transmission,e.transmissionSamplerMap.value=o.texture,e.transmissionSamplerSize.value.set(o.width,o.height),r.transmissionMap&&(e.transmissionMap.value=r.transmissionMap,i(r.transmissionMap,e.transmissionMapTransform)),e.thickness.value=r.thickness,r.thicknessMap&&(e.thicknessMap.value=r.thicknessMap,i(r.thicknessMap,e.thicknessMapTransform)),e.attenuationDistance.value=r.attenuationDistance,e.attenuationColor.value.copy(r.attenuationColor)),r.anisotropy>0&&(e.anisotropyVector.value.set(r.anisotropy*Math.cos(r.anisotropyRotation),r.anisotropy*Math.sin(r.anisotropyRotation)),r.anisotropyMap&&(e.anisotropyMap.value=r.anisotropyMap,i(r.anisotropyMap,e.anisotropyMapTransform))),e.specularIntensity.value=r.specularIntensity,e.specularColor.value.copy(r.specularColor),r.specularColorMap&&(e.specularColorMap.value=r.specularColorMap,i(r.specularColorMap,e.specularColorMapTransform)),r.specularIntensityMap&&(e.specularIntensityMap.value=r.specularIntensityMap,i(r.specularIntensityMap,e.specularIntensityMapTransform)))):r.isMeshMatcapMaterial?(n(e,r),r.matcap&&(e.matcap.value=r.matcap)):r.isMeshDepthMaterial?n(e,r):r.isMeshDistanceMaterial?(n(e,r),function(e,i){let n=t.get(i).light;e.referencePosition.value.setFromMatrixPosition(n.matrixWorld),e.nearDistance.value=n.shadow.camera.near,e.farDistance.value=n.shadow.camera.far}(e,r)):r.isMeshNormalMaterial?n(e,r):r.isLineBasicMaterial?(e.diffuse.value.copy(r.color),e.opacity.value=r.opacity,r.map&&(e.map.value=r.map,i(r.map,e.mapTransform)),r.isLineDashedMaterial&&(e.dashSize.value=r.dashSize,e.totalSize.value=r.dashSize+r.gapSize,e.scale.value=r.scale)):r.isPointsMaterial?(e.diffuse.value.copy(r.color),e.opacity.value=r.opacity,e.size.value=r.size*a,e.scale.value=.5*s,r.map&&(e.map.value=r.map,i(r.map,e.uvTransform)),r.alphaMap&&(e.alphaMap.value=r.alphaMap,i(r.alphaMap,e.alphaMapTransform)),r.alphaTest>0&&(e.alphaTest.value=r.alphaTest)):r.isSpriteMaterial?(e.diffuse.value.copy(r.color),e.opacity.value=r.opacity,e.rotation.value=r.rotation,r.map&&(e.map.value=r.map,i(r.map,e.mapTransform)),r.alphaMap&&(e.alphaMap.value=r.alphaMap,i(r.alphaMap,e.alphaMapTransform)),r.alphaTest>0&&(e.alphaTest.value=r.alphaTest)):r.isShadowMaterial?(e.color.value.copy(r.color),e.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1)}}}function si(e,t,i,n){let r={},a={},s=[],o=e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS);function l(e){let t={boundary:0,storage:0};return"number"==typeof e||"boolean"==typeof e?(t.boundary=4,t.storage=4):e.isVector2?(t.boundary=8,t.storage=8):e.isVector3||e.isColor?(t.boundary=16,t.storage=12):e.isVector4?(t.boundary=16,t.storage=16):e.isMatrix3?(t.boundary=48,t.storage=48):e.isMatrix4?(t.boundary=64,t.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),t}function h(t){let i=t.target;i.removeEventListener("dispose",h);let n=s.indexOf(i.__bindingPointIndex);s.splice(n,1),e.deleteBuffer(r[i.id]),delete r[i.id],delete a[i.id]}return{bind:function(e,t){let i=t.program;n.uniformBlockBinding(e,i)},update:function(i,c){let q=r[i.id];void 0===q&&(function(e){let t=e.uniforms,i=0;for(let e=0,n=t.length;e<n;e++){let n=Array.isArray(t[e])?t[e]:[t[e]];for(let e=0,t=n.length;e<t;e++){let t=n[e],r=Array.isArray(t.value)?t.value:[t.value];for(let e=0,n=r.length;e<n;e++){let n=l(r[e]),a=i%16,s=a%n.boundary,o=a+s;i+=s,0!==o&&16-o<n.storage&&(i+=16-o),t.__data=new Float32Array(n.storage/Float32Array.BYTES_PER_ELEMENT),t.__offset=i,i+=n.storage}}}let n=i%16;n>0&&(i+=16-n),e.__size=i,e.__cache={}}(i),q=function(t){let i=function(){for(let e=0;e<o;e++)if(-1===s.indexOf(e))return s.push(e),e;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();t.__bindingPointIndex=i;let n=e.createBuffer(),r=t.__size,a=t.usage;return e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,r,a),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferBase(e.UNIFORM_BUFFER,i,n),n}(i),r[i.id]=q,i.addEventListener("dispose",h));let u=c.program;n.updateUBOMapping(i,u);let d=t.render.frame;a[i.id]!==d&&(function(t){let i=r[t.id],n=t.uniforms,a=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,i);for(let t=0,i=n.length;t<i;t++){let i=Array.isArray(n[t])?n[t]:[n[t]];for(let n=0,r=i.length;n<r;n++){let r=i[n];if(!0===function(e,t,i,n){let r=e.value,a=t+"_"+i;if(void 0===n[a])return"number"==typeof r||"boolean"==typeof r?n[a]=r:n[a]=r.clone(),!0;{let e=n[a];if("number"==typeof r||"boolean"==typeof r){if(e!==r)return n[a]=r,!0}else if(!1===e.equals(r))return e.copy(r),!0}return!1}(r,t,n,a)){let t=r.__offset,i=Array.isArray(r.value)?r.value:[r.value],n=0;for(let a=0;a<i.length;a++){let s=i[a],o=l(s);"number"==typeof s||"boolean"==typeof s?(r.__data[0]=s,e.bufferSubData(e.UNIFORM_BUFFER,t+n,r.__data)):s.isMatrix3?(r.__data[0]=s.elements[0],r.__data[1]=s.elements[1],r.__data[2]=s.elements[2],r.__data[3]=0,r.__data[4]=s.elements[3],r.__data[5]=s.elements[4],r.__data[6]=s.elements[5],r.__data[7]=0,r.__data[8]=s.elements[6],r.__data[9]=s.elements[7],r.__data[10]=s.elements[8],r.__data[11]=0):(s.toArray(r.__data,n),n+=o.storage/Float32Array.BYTES_PER_ELEMENT)}e.bufferSubData(e.UNIFORM_BUFFER,t,r.__data)}}}e.bindBuffer(e.UNIFORM_BUFFER,null)}(i),a[i.id]=d)},dispose:function(){for(let t in r)e.deleteBuffer(r[t]);s=[],r={},a={}}}}class sn{constructor(e={}){let t,i,n,r,a,s,o,l,h,c,q,u,d,m,p,f,x,v,y,M,S,E,T,b,w;let{canvas:A=function(){let e=U("canvas");return e.style.display="block",e}(),context:R=null,depth:C=!0,stencil:P=!1,alpha:L=!1,antialias:D=!1,premultipliedAlpha:N=!0,preserveDrawingBuffer:O=!1,powerPreference:z="default",failIfMajorPerformanceCaveat:B=!1,reverseDepthBuffer:H=!1}=e;if(this.isWebGLRenderer=!0,null!==R){if("undefined"!=typeof WebGLRenderingContext&&R instanceof WebGLRenderingContext)throw Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");t=R.getContextAttributes().alpha}else t=L;let V=new Uint32Array(4),k=new Int32Array(4),G=null,W=null,X=[],j=[];this.domElement=A,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=_,this.toneMapping=0,this.toneMappingExposure=1;let Z=this,J=!1,$=0,ee=0,et=null,ei=-1,en=null,er=new Y,ea=new Y,es=null,eo=new tq(0),el=0,eh=A.width,ec=A.height,eq=1,eu=null,ed=null,em=new Y(0,0,eh,ec),ep=new Y(0,0,eh,ec),ef=!1,e_=new ia,eg=!1,ex=!1;this.transmissionResolutionScale=1;let ev=new eR,ey=new eR,eM=new Q,eS=new Y,eE={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0},eT=!1;function eb(){return null===et?eq:1}let ew=R;function eA(e,t){return A.getContext(e,t)}try{if("setAttribute"in A&&A.setAttribute("data-engine","three.js r173"),A.addEventListener("webglcontextlost",eL,!1),A.addEventListener("webglcontextrestored",eD,!1),A.addEventListener("webglcontextcreationerror",eU,!1),null===ew){let e="webgl2";if(ew=eA(e,{alpha:!0,depth:C,stencil:P,antialias:D,premultipliedAlpha:N,preserveDrawingBuffer:O,powerPreference:z,failIfMajorPerformanceCaveat:B}),null===ew){if(eA(e))throw Error("Error creating WebGL context with your selected attributes.");throw Error("Error creating WebGL context.")}}}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function eC(){(i=new rM(ew)).init(),T=new a6(ew,i),n=new ri(ew,i,e,T),r=new a3(ew,i),n.reverseDepthBuffer&&H&&r.buffers.depth.setReversed(!0),a=new rT(ew),s=new ak,o=new a4(ew,i,r,s,n,T,a),l=new rr(Z),h=new ry(Z),c=new n3(ew),b=new re(ew,c),q=new rS(ew,c,a,b),u=new rw(ew,q,c,a),M=new rb(ew,n,o),x=new rn(s),d=new aV(Z,l,h,i,n,b,x),m=new st(Z,s),p=new aj,f=new aQ(i),y=new n9(Z,l,h,r,u,t,N),v=new a1(Z,u,n),w=new si(ew,a,n,r),S=new rt(ew,i,a),E=new rE(ew,i,a),a.programs=d.programs,Z.capabilities=n,Z.extensions=i,Z.properties=s,Z.renderLists=p,Z.shadowMap=v,Z.state=r,Z.info=a}eC();let eP=new a7(Z,ew);function eL(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),J=!0}function eD(){console.log("THREE.WebGLRenderer: Context Restored."),J=!1;let e=a.autoReset,t=v.enabled,i=v.autoUpdate,n=v.needsUpdate,r=v.type;eC(),a.autoReset=e,v.enabled=t,v.autoUpdate=i,v.needsUpdate=n,v.type=r}function eU(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function eN(e){let t=e.target;t.removeEventListener("dispose",eN),function(e){let t=s.get(e).programs;void 0!==t&&(t.forEach(function(e){d.releaseProgram(e)}),e.isShaderMaterial&&d.releaseShaderCache(e))}(t),s.remove(t)}function eI(e,t,i){!0===e.transparent&&2===e.side&&!1===e.forceSinglePass?(e.side=1,e.needsUpdate=!0,eX(e,t,i),e.side=0,e.needsUpdate=!0,eX(e,t,i),e.side=2):eX(e,t,i)}this.xr=eP,this.getContext=function(){return ew},this.getContextAttributes=function(){return ew.getContextAttributes()},this.forceContextLoss=function(){let e=i.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){let e=i.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return eq},this.setPixelRatio=function(e){void 0!==e&&(eq=e,this.setSize(eh,ec,!1))},this.getSize=function(e){return e.set(eh,ec)},this.setSize=function(e,t,i=!0){if(eP.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}eh=e,ec=t,A.width=Math.floor(e*eq),A.height=Math.floor(t*eq),!0===i&&(A.style.width=e+"px",A.style.height=t+"px"),this.setViewport(0,0,e,t)},this.getDrawingBufferSize=function(e){return e.set(eh*eq,ec*eq).floor()},this.setDrawingBufferSize=function(e,t,i){eh=e,ec=t,eq=i,A.width=Math.floor(e*i),A.height=Math.floor(t*i),this.setViewport(0,0,e,t)},this.getCurrentViewport=function(e){return e.copy(er)},this.getViewport=function(e){return e.copy(em)},this.setViewport=function(e,t,i,n){e.isVector4?em.set(e.x,e.y,e.z,e.w):em.set(e,t,i,n),r.viewport(er.copy(em).multiplyScalar(eq).round())},this.getScissor=function(e){return e.copy(ep)},this.setScissor=function(e,t,i,n){e.isVector4?ep.set(e.x,e.y,e.z,e.w):ep.set(e,t,i,n),r.scissor(ea.copy(ep).multiplyScalar(eq).round())},this.getScissorTest=function(){return ef},this.setScissorTest=function(e){r.setScissorTest(ef=e)},this.setOpaqueSort=function(e){eu=e},this.setTransparentSort=function(e){ed=e},this.getClearColor=function(e){return e.copy(y.getClearColor())},this.setClearColor=function(){y.setClearColor.apply(y,arguments)},this.getClearAlpha=function(){return y.getClearAlpha()},this.setClearAlpha=function(){y.setClearAlpha.apply(y,arguments)},this.clear=function(e=!0,t=!0,i=!0){let n=0;if(e){let e=!1;if(null!==et){let t=et.texture.format;e=1033===t||1031===t||1029===t}if(e){let e=et.texture.type,t=1009===e||1014===e||1012===e||1020===e||1017===e||1018===e,i=y.getClearColor(),n=y.getClearAlpha(),r=i.r,a=i.g,s=i.b;t?(V[0]=r,V[1]=a,V[2]=s,V[3]=n,ew.clearBufferuiv(ew.COLOR,0,V)):(k[0]=r,k[1]=a,k[2]=s,k[3]=n,ew.clearBufferiv(ew.COLOR,0,k))}else n|=ew.COLOR_BUFFER_BIT}t&&(n|=ew.DEPTH_BUFFER_BIT),i&&(n|=ew.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(0xffffffff)),ew.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){A.removeEventListener("webglcontextlost",eL,!1),A.removeEventListener("webglcontextrestored",eD,!1),A.removeEventListener("webglcontextcreationerror",eU,!1),y.dispose(),p.dispose(),f.dispose(),s.dispose(),l.dispose(),h.dispose(),u.dispose(),b.dispose(),w.dispose(),d.dispose(),eP.dispose(),eP.removeEventListener("sessionstart",ez),eP.removeEventListener("sessionend",eF),eB.stop()},this.renderBufferDirect=function(e,t,a,u,d,p){let f;null===t&&(t=eE);let _=d.isMesh&&0>d.matrixWorld.determinant(),v=function(e,t,i,a,c){var q;!0!==t.isScene&&(t=eE),o.resetTextureUnits();let u=t.fog,d=a.isMeshStandardMaterial?t.environment:null,p=null===et?Z.outputColorSpace:!0===et.isXRRenderTarget?et.texture.colorSpace:g,f=(a.isMeshStandardMaterial?h:l).get(a.envMap||d),_=!0===a.vertexColors&&!!i.attributes.color&&4===i.attributes.color.itemSize,v=!!i.attributes.tangent&&(!!a.normalMap||a.anisotropy>0),y=!!i.morphAttributes.position,S=!!i.morphAttributes.normal,E=!!i.morphAttributes.color,T=0;a.toneMapped&&(null===et||!0===et.isXRRenderTarget)&&(T=Z.toneMapping);let b=i.morphAttributes.position||i.morphAttributes.normal||i.morphAttributes.color,A=void 0!==b?b.length:0,R=s.get(a),C=W.state.lights;if(!0===eg&&(!0===ex||e!==en)){let t=e===en&&a.id===ei;x.setState(a,e,t)}let P=!1;a.version===R.__version?R.needsLights&&R.lightsStateVersion!==C.state.version?P=!0:R.outputColorSpace!==p?P=!0:c.isBatchedMesh&&!1===R.batching?P=!0:c.isBatchedMesh||!0!==R.batching?c.isBatchedMesh&&!0===R.batchingColor&&null===c.colorTexture?P=!0:c.isBatchedMesh&&!1===R.batchingColor&&null!==c.colorTexture?P=!0:c.isInstancedMesh&&!1===R.instancing?P=!0:c.isInstancedMesh||!0!==R.instancing?c.isSkinnedMesh&&!1===R.skinning?P=!0:c.isSkinnedMesh||!0!==R.skinning?c.isInstancedMesh&&!0===R.instancingColor&&null===c.instanceColor?P=!0:c.isInstancedMesh&&!1===R.instancingColor&&null!==c.instanceColor?P=!0:c.isInstancedMesh&&!0===R.instancingMorph&&null===c.morphTexture?P=!0:c.isInstancedMesh&&!1===R.instancingMorph&&null!==c.morphTexture?P=!0:R.envMap!==f?P=!0:!0===a.fog&&R.fog!==u?P=!0:void 0!==R.numClippingPlanes&&(R.numClippingPlanes!==x.numPlanes||R.numIntersection!==x.numIntersection)?P=!0:R.vertexAlphas!==_?P=!0:R.vertexTangents!==v?P=!0:R.morphTargets!==y?P=!0:R.morphNormals!==S?P=!0:R.morphColors!==E?P=!0:R.toneMapping!==T?P=!0:R.morphTargetsCount!==A&&(P=!0):P=!0:P=!0:P=!0:(P=!0,R.__version=a.version);let L=R.currentProgram;!0===P&&(L=eX(a,t,c));let D=!1,U=!1,N=!1,I=L.getUniforms(),O=R.uniforms;if(r.useProgram(L.program)&&(D=!0,U=!0,N=!0),a.id!==ei&&(ei=a.id,U=!0),D||en!==e){r.buffers.depth.getReversed()?(ev.copy(e.projectionMatrix),function(e){let t=e.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}(ev),function(e){let t=e.elements;-1===t[11]?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}(ev),I.setValue(ew,"projectionMatrix",ev)):I.setValue(ew,"projectionMatrix",e.projectionMatrix),I.setValue(ew,"viewMatrix",e.matrixWorldInverse);let t=I.map.cameraPosition;void 0!==t&&t.setValue(ew,eM.setFromMatrixPosition(e.matrixWorld)),n.logarithmicDepthBuffer&&I.setValue(ew,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),(a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshLambertMaterial||a.isMeshBasicMaterial||a.isMeshStandardMaterial||a.isShaderMaterial)&&I.setValue(ew,"isOrthographic",!0===e.isOrthographicCamera),en!==e&&(en=e,U=!0,N=!0)}if(c.isSkinnedMesh){I.setOptional(ew,c,"bindMatrix"),I.setOptional(ew,c,"bindMatrixInverse");let e=c.skeleton;e&&(null===e.boneTexture&&e.computeBoneTexture(),I.setValue(ew,"boneTexture",e.boneTexture,o))}c.isBatchedMesh&&(I.setOptional(ew,c,"batchingTexture"),I.setValue(ew,"batchingTexture",c._matricesTexture,o),I.setOptional(ew,c,"batchingIdTexture"),I.setValue(ew,"batchingIdTexture",c._indirectTexture,o),I.setOptional(ew,c,"batchingColorTexture"),null!==c._colorsTexture&&I.setValue(ew,"batchingColorTexture",c._colorsTexture,o));let z=i.morphAttributes;if((void 0!==z.position||void 0!==z.normal||void 0!==z.color)&&M.update(c,i,L),(U||R.receiveShadow!==c.receiveShadow)&&(R.receiveShadow=c.receiveShadow,I.setValue(ew,"receiveShadow",c.receiveShadow)),a.isMeshGouraudMaterial&&null!==a.envMap&&(O.envMap.value=f,O.flipEnvMap.value=f.isCubeTexture&&!1===f.isRenderTargetTexture?-1:1),a.isMeshStandardMaterial&&null===a.envMap&&null!==t.environment&&(O.envMapIntensity.value=t.environmentIntensity),U&&(I.setValue(ew,"toneMappingExposure",Z.toneMappingExposure),R.needsLights&&(q=N,O.ambientLightColor.needsUpdate=q,O.lightProbe.needsUpdate=q,O.directionalLights.needsUpdate=q,O.directionalLightShadows.needsUpdate=q,O.pointLights.needsUpdate=q,O.pointLightShadows.needsUpdate=q,O.spotLights.needsUpdate=q,O.spotLightShadows.needsUpdate=q,O.rectAreaLights.needsUpdate=q,O.hemisphereLights.needsUpdate=q),u&&!0===a.fog&&m.refreshFogUniforms(O,u),m.refreshMaterialUniforms(O,a,eq,ec,W.state.transmissionRenderTarget[e.id]),ay.upload(ew,ej(R),O,o)),a.isShaderMaterial&&!0===a.uniformsNeedUpdate&&(ay.upload(ew,ej(R),O,o),a.uniformsNeedUpdate=!1),a.isSpriteMaterial&&I.setValue(ew,"center",c.center),I.setValue(ew,"modelViewMatrix",c.modelViewMatrix),I.setValue(ew,"normalMatrix",c.normalMatrix),I.setValue(ew,"modelMatrix",c.matrixWorld),a.isShaderMaterial||a.isRawShaderMaterial){let e=a.uniformsGroups;for(let t=0,i=e.length;t<i;t++){let i=e[t];w.update(i,L),w.bind(i,L)}}return L}(e,t,a,u,d);r.setMaterial(u,_);let y=a.index,T=1;if(!0===u.wireframe){if(void 0===(y=q.getWireframeAttribute(a)))return;T=2}let A=a.drawRange,R=a.attributes.position,C=A.start*T,P=(A.start+A.count)*T;null!==p&&(C=Math.max(C,p.start*T),P=Math.min(P,(p.start+p.count)*T)),null!==y?(C=Math.max(C,0),P=Math.min(P,y.count)):null!=R&&(C=Math.max(C,0),P=Math.min(P,R.count));let L=P-C;if(L<0||L===1/0)return;b.setup(d,u,v,a,y);let D=S;if(null!==y&&(f=c.get(y),(D=E).setIndex(f)),d.isMesh)!0===u.wireframe?(r.setLineWidth(u.wireframeLinewidth*eb()),D.setMode(ew.LINES)):D.setMode(ew.TRIANGLES);else if(d.isLine){let e=u.linewidth;void 0===e&&(e=1),r.setLineWidth(e*eb()),d.isLineSegments?D.setMode(ew.LINES):d.isLineLoop?D.setMode(ew.LINE_LOOP):D.setMode(ew.LINE_STRIP)}else d.isPoints?D.setMode(ew.POINTS):d.isSprite&&D.setMode(ew.TRIANGLES);if(d.isBatchedMesh){if(null!==d._multiDrawInstances)D.renderMultiDrawInstances(d._multiDrawStarts,d._multiDrawCounts,d._multiDrawCount,d._multiDrawInstances);else if(i.get("WEBGL_multi_draw"))D.renderMultiDraw(d._multiDrawStarts,d._multiDrawCounts,d._multiDrawCount);else{let e=d._multiDrawStarts,t=d._multiDrawCounts,i=d._multiDrawCount,n=y?c.get(y).bytesPerElement:1,r=s.get(u).currentProgram.getUniforms();for(let a=0;a<i;a++)r.setValue(ew,"_gl_DrawID",a),D.render(e[a]/n,t[a])}}else if(d.isInstancedMesh)D.renderInstances(C,L,d.count);else if(a.isInstancedBufferGeometry){let e=void 0!==a._maxInstanceCount?a._maxInstanceCount:1/0,t=Math.min(a.instanceCount,e);D.renderInstances(C,L,t)}else D.render(C,L)},this.compile=function(e,t,i=null){null===i&&(i=e),(W=f.get(i)).init(t),j.push(W),i.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&(W.pushLight(e),e.castShadow&&W.pushShadow(e))}),e!==i&&e.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&(W.pushLight(e),e.castShadow&&W.pushShadow(e))}),W.setupLights();let n=new Set;return e.traverse(function(e){if(!(e.isMesh||e.isPoints||e.isLine||e.isSprite))return;let t=e.material;if(t){if(Array.isArray(t))for(let r=0;r<t.length;r++){let a=t[r];eI(a,i,e),n.add(a)}else eI(t,i,e),n.add(t)}}),j.pop(),W=null,n},this.compileAsync=function(e,t,n=null){let r=this.compile(e,t,n);return new Promise(t=>{function n(){if(r.forEach(function(e){s.get(e).currentProgram.isReady()&&r.delete(e)}),0===r.size){t(e);return}setTimeout(n,10)}null!==i.get("KHR_parallel_shader_compile")?n():setTimeout(n,10)})};let eO=null;function ez(){eB.stop()}function eF(){eB.start()}let eB=new n2;function eH(e,t,i,n){if(!1===e.visible)return;if(e.layers.test(t.layers)){if(e.isGroup)i=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)W.pushLight(e),e.castShadow&&W.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||e_.intersectsSprite(e)){n&&eS.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ey);let t=u.update(e),r=e.material;r.visible&&G.push(e,t,r,i,eS.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||e_.intersectsObject(e))){let t=u.update(e),r=e.material;if(n&&(void 0!==e.boundingSphere?(null===e.boundingSphere&&e.computeBoundingSphere(),eS.copy(e.boundingSphere.center)):(null===t.boundingSphere&&t.computeBoundingSphere(),eS.copy(t.boundingSphere.center)),eS.applyMatrix4(e.matrixWorld).applyMatrix4(ey)),Array.isArray(r)){let n=t.groups;for(let a=0,s=n.length;a<s;a++){let s=n[a],o=r[s.materialIndex];o&&o.visible&&G.push(e,t,o,i,eS.z,s)}}else r.visible&&G.push(e,t,r,i,eS.z,null)}}let r=e.children;for(let e=0,a=r.length;e<a;e++)eH(r[e],t,i,n)}function eV(e,t,i,n){let a=e.opaque,s=e.transmissive,o=e.transparent;W.setupLightsView(i),!0===eg&&x.setGlobalState(Z.clippingPlanes,i),n&&r.viewport(er.copy(n)),a.length>0&&eG(a,t,i),s.length>0&&eG(s,t,i),o.length>0&&eG(o,t,i),r.buffers.depth.setTest(!0),r.buffers.depth.setMask(!0),r.buffers.color.setMask(!0),r.setPolygonOffset(!1)}function ek(e,t,n,r){if(null!==(!0===n.isScene?n.overrideMaterial:null))return;void 0===W.state.transmissionRenderTarget[r.id]&&(W.state.transmissionRenderTarget[r.id]=new K(1,1,{generateMipmaps:!0,type:i.has("EXT_color_buffer_half_float")||i.has("EXT_color_buffer_float")?1016:1009,minFilter:1008,samples:4,stencilBuffer:P,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:F.workingColorSpace}));let a=W.state.transmissionRenderTarget[r.id],s=r.viewport||er;a.setSize(s.z*Z.transmissionResolutionScale,s.w*Z.transmissionResolutionScale);let l=Z.getRenderTarget();Z.setRenderTarget(a),Z.getClearColor(eo),(el=Z.getClearAlpha())<1&&Z.setClearColor(0xffffff,.5),Z.clear(),eT&&y.render(n);let h=Z.toneMapping;Z.toneMapping=0;let c=r.viewport;if(void 0!==r.viewport&&(r.viewport=void 0),W.setupLightsView(r),!0===eg&&x.setGlobalState(Z.clippingPlanes,r),eG(e,n,r),o.updateMultisampleRenderTarget(a),o.updateRenderTargetMipmap(a),!1===i.has("WEBGL_multisampled_render_to_texture")){let e=!1;for(let i=0,a=t.length;i<a;i++){let a=t[i],s=a.object,o=a.geometry,l=a.material,h=a.group;if(2===l.side&&s.layers.test(r.layers)){let t=l.side;l.side=1,l.needsUpdate=!0,eW(s,n,r,o,l,h),l.side=t,l.needsUpdate=!0,e=!0}}!0===e&&(o.updateMultisampleRenderTarget(a),o.updateRenderTargetMipmap(a))}Z.setRenderTarget(l),Z.setClearColor(eo,el),void 0!==c&&(r.viewport=c),Z.toneMapping=h}function eG(e,t,i){let n=!0===t.isScene?t.overrideMaterial:null;for(let r=0,a=e.length;r<a;r++){let a=e[r],s=a.object,o=a.geometry,l=null===n?a.material:n,h=a.group;s.layers.test(i.layers)&&eW(s,t,i,o,l,h)}}function eW(e,t,i,n,r,a){e.onBeforeRender(Z,t,i,n,r,a),e.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),r.onBeforeRender(Z,t,i,n,e,a),!0===r.transparent&&2===r.side&&!1===r.forceSinglePass?(r.side=1,r.needsUpdate=!0,Z.renderBufferDirect(i,t,n,r,e,a),r.side=0,r.needsUpdate=!0,Z.renderBufferDirect(i,t,n,r,e,a),r.side=2):Z.renderBufferDirect(i,t,n,r,e,a),e.onAfterRender(Z,t,i,n,r,a)}function eX(e,t,i){!0!==t.isScene&&(t=eE);let n=s.get(e),r=W.state.lights,a=W.state.shadowsArray,o=r.state.version,c=d.getParameters(e,r.state,a,t,i),q=d.getProgramCacheKey(c),u=n.programs;n.environment=e.isMeshStandardMaterial?t.environment:null,n.fog=t.fog,n.envMap=(e.isMeshStandardMaterial?h:l).get(e.envMap||n.environment),n.envMapRotation=null!==n.environment&&null===e.envMap?t.environmentRotation:e.envMapRotation,void 0===u&&(e.addEventListener("dispose",eN),u=new Map,n.programs=u);let m=u.get(q);if(void 0!==m){if(n.currentProgram===m&&n.lightsStateVersion===o)return eY(e,c),m}else c.uniforms=d.getUniforms(e),e.onBeforeCompile(c,Z),m=d.acquireProgram(c,q),u.set(q,m),n.uniforms=c.uniforms;let p=n.uniforms;return(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(p.clippingPlanes=x.uniform),eY(e,c),n.needsLights=e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights,n.lightsStateVersion=o,n.needsLights&&(p.ambientLightColor.value=r.state.ambient,p.lightProbe.value=r.state.probe,p.directionalLights.value=r.state.directional,p.directionalLightShadows.value=r.state.directionalShadow,p.spotLights.value=r.state.spot,p.spotLightShadows.value=r.state.spotShadow,p.rectAreaLights.value=r.state.rectArea,p.ltc_1.value=r.state.rectAreaLTC1,p.ltc_2.value=r.state.rectAreaLTC2,p.pointLights.value=r.state.point,p.pointLightShadows.value=r.state.pointShadow,p.hemisphereLights.value=r.state.hemi,p.directionalShadowMap.value=r.state.directionalShadowMap,p.directionalShadowMatrix.value=r.state.directionalShadowMatrix,p.spotShadowMap.value=r.state.spotShadowMap,p.spotLightMatrix.value=r.state.spotLightMatrix,p.spotLightMap.value=r.state.spotLightMap,p.pointShadowMap.value=r.state.pointShadowMap,p.pointShadowMatrix.value=r.state.pointShadowMatrix),n.currentProgram=m,n.uniformsList=null,m}function ej(e){if(null===e.uniformsList){let t=e.currentProgram.getUniforms();e.uniformsList=ay.seqWithValue(t.seq,e.uniforms)}return e.uniformsList}function eY(e,t){let i=s.get(e);i.outputColorSpace=t.outputColorSpace,i.batching=t.batching,i.batchingColor=t.batchingColor,i.instancing=t.instancing,i.instancingColor=t.instancingColor,i.instancingMorph=t.instancingMorph,i.skinning=t.skinning,i.morphTargets=t.morphTargets,i.morphNormals=t.morphNormals,i.morphColors=t.morphColors,i.morphTargetsCount=t.morphTargetsCount,i.numClippingPlanes=t.numClippingPlanes,i.numIntersection=t.numClipIntersection,i.vertexAlphas=t.vertexAlphas,i.vertexTangents=t.vertexTangents,i.toneMapping=t.toneMapping}eB.setAnimationLoop(function(e){eO&&eO(e)}),"undefined"!=typeof self&&eB.setContext(self),this.setAnimationLoop=function(e){eO=e,eP.setAnimationLoop(e),null===e?eB.stop():eB.start()},eP.addEventListener("sessionstart",ez),eP.addEventListener("sessionend",eF),this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(!0===J)return;if(!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===eP.enabled&&!0===eP.isPresenting&&(!0===eP.cameraAutoUpdate&&eP.updateCamera(t),t=eP.getCamera()),!0===e.isScene&&e.onBeforeRender(Z,e,t,et),(W=f.get(e,j.length)).init(t),j.push(W),ey.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),e_.setFromProjectionMatrix(ey),ex=this.localClippingEnabled,eg=x.init(this.clippingPlanes,ex),(G=p.get(e,X.length)).init(),X.push(G),!0===eP.enabled&&!0===eP.isPresenting){let e=Z.xr.getDepthSensingMesh();null!==e&&eH(e,t,-1/0,Z.sortObjects)}eH(e,t,0,Z.sortObjects),G.finish(),!0===Z.sortObjects&&G.sort(eu,ed),(eT=!1===eP.enabled||!1===eP.isPresenting||!1===eP.hasDepthSensing())&&y.addToRenderList(G,e),this.info.render.frame++,!0===eg&&x.beginShadows();let i=W.state.shadowsArray;v.render(i,e,t),!0===eg&&x.endShadows(),!0===this.info.autoReset&&this.info.reset();let n=G.opaque,r=G.transmissive;if(W.setupLights(),t.isArrayCamera){let i=t.cameras;if(r.length>0)for(let t=0,a=i.length;t<a;t++)ek(n,r,e,i[t]);eT&&y.render(e);for(let t=0,n=i.length;t<n;t++){let n=i[t];eV(G,e,n,n.viewport)}}else r.length>0&&ek(n,r,e,t),eT&&y.render(e),eV(G,e,t);null!==et&&0===ee&&(o.updateMultisampleRenderTarget(et),o.updateRenderTargetMipmap(et)),!0===e.isScene&&e.onAfterRender(Z,e,t),b.resetDefaultState(),ei=-1,en=null,j.pop(),j.length>0?(W=j[j.length-1],!0===eg&&x.setGlobalState(Z.clippingPlanes,W.state.camera)):W=null,X.pop(),G=X.length>0?X[X.length-1]:null},this.getActiveCubeFace=function(){return $},this.getActiveMipmapLevel=function(){return ee},this.getRenderTarget=function(){return et},this.setRenderTargetTextures=function(e,t,n){s.get(e.texture).__webglTexture=t,s.get(e.depthTexture).__webglTexture=n;let r=s.get(e);r.__hasExternalTextures=!0,r.__autoAllocateDepthBuffer=void 0===n,r.__autoAllocateDepthBuffer||!0!==i.has("WEBGL_multisampled_render_to_texture")||(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),r.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(e,t){let i=s.get(e);i.__webglFramebuffer=t,i.__useDefaultFramebuffer=void 0===t};let eZ=ew.createFramebuffer();this.setRenderTarget=function(e,t=0,i=0){et=e,$=t,ee=i;let n=!0,a=null,l=!1,h=!1;if(e){let c=s.get(e);if(void 0!==c.__useDefaultFramebuffer)r.bindFramebuffer(ew.FRAMEBUFFER,null),n=!1;else if(void 0===c.__webglFramebuffer)o.setupRenderTarget(e);else if(c.__hasExternalTextures)o.rebindTextures(e,s.get(e.texture).__webglTexture,s.get(e.depthTexture).__webglTexture);else if(e.depthBuffer){let t=e.depthTexture;if(c.__boundDepthTexture!==t){if(null!==t&&s.has(t)&&(e.width!==t.image.width||e.height!==t.image.height))throw Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");o.setupDepthRenderbuffer(e)}}let q=e.texture;(q.isData3DTexture||q.isDataArrayTexture||q.isCompressedArrayTexture)&&(h=!0);let u=s.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(a=Array.isArray(u[t])?u[t][i]:u[t],l=!0):a=e.samples>0&&!1===o.useMultisampledRTT(e)?s.get(e).__webglMultisampledFramebuffer:Array.isArray(u)?u[i]:u,er.copy(e.viewport),ea.copy(e.scissor),es=e.scissorTest}else er.copy(em).multiplyScalar(eq).floor(),ea.copy(ep).multiplyScalar(eq).floor(),es=ef;if(0!==i&&(a=eZ),r.bindFramebuffer(ew.FRAMEBUFFER,a)&&n&&r.drawBuffers(e,a),r.viewport(er),r.scissor(ea),r.setScissorTest(es),l){let n=s.get(e.texture);ew.framebufferTexture2D(ew.FRAMEBUFFER,ew.COLOR_ATTACHMENT0,ew.TEXTURE_CUBE_MAP_POSITIVE_X+t,n.__webglTexture,i)}else if(h){let n=s.get(e.texture);ew.framebufferTextureLayer(ew.FRAMEBUFFER,ew.COLOR_ATTACHMENT0,n.__webglTexture,i,t)}else if(null!==e&&0!==i){let t=s.get(e.texture);ew.framebufferTexture2D(ew.FRAMEBUFFER,ew.COLOR_ATTACHMENT0,ew.TEXTURE_2D,t.__webglTexture,i)}ei=-1},this.readRenderTargetPixels=function(e,t,i,a,o,l,h){if(!(e&&e.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let c=s.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==h&&(c=c[h]),c){r.bindFramebuffer(ew.FRAMEBUFFER,c);try{let r=e.texture,s=r.format,h=r.type;if(!n.textureFormatReadable(s)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!n.textureTypeReadable(h)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}t>=0&&t<=e.width-a&&i>=0&&i<=e.height-o&&ew.readPixels(t,i,a,o,T.convert(s),T.convert(h),l)}finally{let e=null!==et?s.get(et).__webglFramebuffer:null;r.bindFramebuffer(ew.FRAMEBUFFER,e)}}},this.readRenderTargetPixelsAsync=async function(e,t,i,a,o,l,h){if(!(e&&e.isWebGLRenderTarget))throw Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let c=s.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==h&&(c=c[h]),c){let h=e.texture,u=h.format,d=h.type;if(!n.textureFormatReadable(u))throw Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!n.textureTypeReadable(d))throw Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(t>=0&&t<=e.width-a&&i>=0&&i<=e.height-o){var q;r.bindFramebuffer(ew.FRAMEBUFFER,c);let e=ew.createBuffer();ew.bindBuffer(ew.PIXEL_PACK_BUFFER,e),ew.bufferData(ew.PIXEL_PACK_BUFFER,l.byteLength,ew.STREAM_READ),ew.readPixels(t,i,a,o,T.convert(u),T.convert(d),0);let n=null!==et?s.get(et).__webglFramebuffer:null;r.bindFramebuffer(ew.FRAMEBUFFER,n);let h=ew.fenceSync(ew.SYNC_GPU_COMMANDS_COMPLETE,0);return ew.flush(),await (q=ew,new Promise(function(e,t){setTimeout(function i(){switch(q.clientWaitSync(h,q.SYNC_FLUSH_COMMANDS_BIT,0)){case q.WAIT_FAILED:t();break;case q.TIMEOUT_EXPIRED:setTimeout(i,4);break;default:e()}},4)})),ew.bindBuffer(ew.PIXEL_PACK_BUFFER,e),ew.getBufferSubData(ew.PIXEL_PACK_BUFFER,0,l),ew.deleteBuffer(e),ew.deleteSync(h),l}throw Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(e,t=null,i=0){!0!==e.isTexture&&(I("WebGLRenderer: copyFramebufferToTexture function signature has changed."),t=arguments[0]||null,e=arguments[1]);let n=Math.pow(2,-i),a=Math.floor(e.image.width*n),s=Math.floor(e.image.height*n),l=null!==t?t.x:0,h=null!==t?t.y:0;o.setTexture2D(e,0),ew.copyTexSubImage2D(ew.TEXTURE_2D,i,0,0,l,h,a,s),r.unbindTexture()};let eK=ew.createFramebuffer(),eJ=ew.createFramebuffer();this.copyTextureToTexture=function(e,t,i=null,n=null,a=0,l=null){let h,c,q,u,d,m,p,f,_,g;!0!==e.isTexture&&(I("WebGLRenderer: copyTextureToTexture function signature has changed."),n=arguments[0]||null,e=arguments[1],t=arguments[2],l=arguments[3]||0,i=null),null===l&&(0!==a?(I("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),l=a,a=0):l=0);let x=e.isCompressedTexture?e.mipmaps[l]:e.image;if(null!==i)h=i.max.x-i.min.x,c=i.max.y-i.min.y,q=i.isBox3?i.max.z-i.min.z:1,u=i.min.x,d=i.min.y,m=i.isBox3?i.min.z:0;else{let t=Math.pow(2,-a);h=Math.floor(x.width*t),c=Math.floor(x.height*t),q=e.isDataArrayTexture?x.depth:e.isData3DTexture?Math.floor(x.depth*t):1,u=0,d=0,m=0}null!==n?(p=n.x,f=n.y,_=n.z):(p=0,f=0,_=0);let v=T.convert(t.format),y=T.convert(t.type);t.isData3DTexture?(o.setTexture3D(t,0),g=ew.TEXTURE_3D):t.isDataArrayTexture||t.isCompressedArrayTexture?(o.setTexture2DArray(t,0),g=ew.TEXTURE_2D_ARRAY):(o.setTexture2D(t,0),g=ew.TEXTURE_2D),ew.pixelStorei(ew.UNPACK_FLIP_Y_WEBGL,t.flipY),ew.pixelStorei(ew.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),ew.pixelStorei(ew.UNPACK_ALIGNMENT,t.unpackAlignment);let M=ew.getParameter(ew.UNPACK_ROW_LENGTH),S=ew.getParameter(ew.UNPACK_IMAGE_HEIGHT),E=ew.getParameter(ew.UNPACK_SKIP_PIXELS),b=ew.getParameter(ew.UNPACK_SKIP_ROWS),w=ew.getParameter(ew.UNPACK_SKIP_IMAGES);ew.pixelStorei(ew.UNPACK_ROW_LENGTH,x.width),ew.pixelStorei(ew.UNPACK_IMAGE_HEIGHT,x.height),ew.pixelStorei(ew.UNPACK_SKIP_PIXELS,u),ew.pixelStorei(ew.UNPACK_SKIP_ROWS,d),ew.pixelStorei(ew.UNPACK_SKIP_IMAGES,m);let A=e.isDataArrayTexture||e.isData3DTexture,R=t.isDataArrayTexture||t.isData3DTexture;if(e.isDepthTexture){let i=s.get(e),n=s.get(t),o=s.get(i.__renderTarget),g=s.get(n.__renderTarget);r.bindFramebuffer(ew.READ_FRAMEBUFFER,o.__webglFramebuffer),r.bindFramebuffer(ew.DRAW_FRAMEBUFFER,g.__webglFramebuffer);for(let i=0;i<q;i++)A&&(ew.framebufferTextureLayer(ew.READ_FRAMEBUFFER,ew.COLOR_ATTACHMENT0,s.get(e).__webglTexture,a,m+i),ew.framebufferTextureLayer(ew.DRAW_FRAMEBUFFER,ew.COLOR_ATTACHMENT0,s.get(t).__webglTexture,l,_+i)),ew.blitFramebuffer(u,d,h,c,p,f,h,c,ew.DEPTH_BUFFER_BIT,ew.NEAREST);r.bindFramebuffer(ew.READ_FRAMEBUFFER,null),r.bindFramebuffer(ew.DRAW_FRAMEBUFFER,null)}else if(0!==a||e.isRenderTargetTexture||s.has(e)){let i=s.get(e),n=s.get(t);r.bindFramebuffer(ew.READ_FRAMEBUFFER,eK),r.bindFramebuffer(ew.DRAW_FRAMEBUFFER,eJ);for(let e=0;e<q;e++)A?ew.framebufferTextureLayer(ew.READ_FRAMEBUFFER,ew.COLOR_ATTACHMENT0,i.__webglTexture,a,m+e):ew.framebufferTexture2D(ew.READ_FRAMEBUFFER,ew.COLOR_ATTACHMENT0,ew.TEXTURE_2D,i.__webglTexture,a),R?ew.framebufferTextureLayer(ew.DRAW_FRAMEBUFFER,ew.COLOR_ATTACHMENT0,n.__webglTexture,l,_+e):ew.framebufferTexture2D(ew.DRAW_FRAMEBUFFER,ew.COLOR_ATTACHMENT0,ew.TEXTURE_2D,n.__webglTexture,l),0!==a?ew.blitFramebuffer(u,d,h,c,p,f,h,c,ew.COLOR_BUFFER_BIT,ew.NEAREST):R?ew.copyTexSubImage3D(g,l,p,f,_+e,u,d,h,c):ew.copyTexSubImage2D(g,l,p,f,u,d,h,c);r.bindFramebuffer(ew.READ_FRAMEBUFFER,null),r.bindFramebuffer(ew.DRAW_FRAMEBUFFER,null)}else R?e.isDataTexture||e.isData3DTexture?ew.texSubImage3D(g,l,p,f,_,h,c,q,v,y,x.data):t.isCompressedArrayTexture?ew.compressedTexSubImage3D(g,l,p,f,_,h,c,q,v,x.data):ew.texSubImage3D(g,l,p,f,_,h,c,q,v,y,x):e.isDataTexture?ew.texSubImage2D(ew.TEXTURE_2D,l,p,f,h,c,v,y,x.data):e.isCompressedTexture?ew.compressedTexSubImage2D(ew.TEXTURE_2D,l,p,f,x.width,x.height,v,x.data):ew.texSubImage2D(ew.TEXTURE_2D,l,p,f,h,c,v,y,x);ew.pixelStorei(ew.UNPACK_ROW_LENGTH,M),ew.pixelStorei(ew.UNPACK_IMAGE_HEIGHT,S),ew.pixelStorei(ew.UNPACK_SKIP_PIXELS,E),ew.pixelStorei(ew.UNPACK_SKIP_ROWS,b),ew.pixelStorei(ew.UNPACK_SKIP_IMAGES,w),0===l&&t.generateMipmaps&&ew.generateMipmap(g),r.unbindTexture()},this.copyTextureToTexture3D=function(e,t,i=null,n=null,r=0){return!0!==e.isTexture&&(I("WebGLRenderer: copyTextureToTexture3D function signature has changed."),i=arguments[0]||null,n=arguments[1]||null,e=arguments[2],t=arguments[3],r=arguments[4]||0),I('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(e,t,i,n,r)},this.initRenderTarget=function(e){void 0===s.get(e).__webglFramebuffer&&o.setupRenderTarget(e)},this.initTexture=function(e){e.isCubeTexture?o.setTextureCube(e,0):e.isData3DTexture?o.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?o.setTexture2DArray(e,0):o.setTexture2D(e,0),r.unbindTexture()},this.resetState=function(){$=0,ee=0,et=null,r.reset(),b.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return 2e3}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;let t=this.getContext();t.drawingBufferColorspace=F._getDrawingBufferColorSpace(e),t.unpackColorSpace=F._getUnpackColorSpace()}}const sr={type:"change"},sa={type:"start"},ss={type:"end"},so=new eA,sl=new it,sh=Math.cos(70*E),sc=new Q,sq=2*Math.PI,su={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};class sd extends nQ{constructor(e,t=null){super(e,t),this.state=su.NONE,this.enabled=!0,this.target=new Q,this.cursor=new Q,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:p.ROTATE,MIDDLE:p.DOLLY,RIGHT:p.PAN},this.touches={ONE:f.ROTATE,TWO:f.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new Q,this._lastQuaternion=new $,this._lastTargetPosition=new Q,this._quat=new $().setFromUnitVectors(e.up,new Q(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new nJ,this._sphericalDelta=new nJ,this._scale=1,this._panOffset=new Q,this._rotateStart=new C,this._rotateEnd=new C,this._rotateDelta=new C,this._panStart=new C,this._panEnd=new C,this._panDelta=new C,this._dollyStart=new C,this._dollyEnd=new C,this._dollyDelta=new C,this._dollyDirection=new Q,this._mouse=new C,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=sp.bind(this),this._onPointerDown=sm.bind(this),this._onPointerUp=sf.bind(this),this._onContextMenu=sS.bind(this),this._onMouseWheel=sx.bind(this),this._onKeyDown=sv.bind(this),this._onTouchStart=sy.bind(this),this._onTouchMove=sM.bind(this),this._onMouseDown=s_.bind(this),this._onMouseMove=sg.bind(this),this._interceptControlDown=sE.bind(this),this._interceptControlUp=sT.bind(this),null!==this.domElement&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(e){e.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=e}stopListenToKeyEvents(){null!==this._domElementKeyEvents&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(sr),this.update(),this.state=su.NONE}update(e=null){let t=this.object.position;sc.copy(t).sub(this.target),sc.applyQuaternion(this._quat),this._spherical.setFromVector3(sc),this.autoRotate&&this.state===su.NONE&&this._rotateLeft(this._getAutoRotationAngle(e)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let i=this.minAzimuthAngle,n=this.maxAzimuthAngle;isFinite(i)&&isFinite(n)&&(i<-Math.PI?i+=sq:i>Math.PI&&(i-=sq),n<-Math.PI?n+=sq:n>Math.PI&&(n-=sq),i<=n?this._spherical.theta=Math.max(i,Math.min(n,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(i+n)/2?Math.max(i,this._spherical.theta):Math.min(n,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),!0===this.enableDamping?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let r=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{let e=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),r=e!=this._spherical.radius}if(sc.setFromSpherical(this._spherical),sc.applyQuaternion(this._quatInverse),t.copy(this.target).add(sc),this.object.lookAt(this.target),!0===this.enableDamping?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let e=null;if(this.object.isPerspectiveCamera){let t=sc.length();e=this._clampDistance(t*this._scale);let i=t-e;this.object.position.addScaledVector(this._dollyDirection,i),this.object.updateMatrixWorld(),r=!!i}else if(this.object.isOrthographicCamera){let t=new Q(this._mouse.x,this._mouse.y,0);t.unproject(this.object);let i=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),r=i!==this.object.zoom;let n=new Q(this._mouse.x,this._mouse.y,0);n.unproject(this.object),this.object.position.sub(n).add(t),this.object.updateMatrixWorld(),e=sc.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;null!==e&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(e).add(this.object.position):(so.origin.copy(this.object.position),so.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(so.direction))<sh?this.object.lookAt(this.target):(sl.setFromNormalAndCoplanarPoint(this.object.up,this.target),so.intersectPlane(sl,this.target))))}else if(this.object.isOrthographicCamera){let e=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),e!==this.object.zoom&&(this.object.updateProjectionMatrix(),r=!0)}return this._scale=1,this._performCursorZoom=!1,!!(r||this._lastPosition.distanceToSquared(this.object.position)>1e-6||8*(1-this._lastQuaternion.dot(this.object.quaternion))>1e-6||this._lastTargetPosition.distanceToSquared(this.target)>1e-6)&&(this.dispatchEvent(sr),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0)}_getAutoRotationAngle(e){return null!==e?sq/60*this.autoRotateSpeed*e:sq/60/60*this.autoRotateSpeed}_getZoomScale(e){let t=Math.abs(.01*e);return Math.pow(.95,this.zoomSpeed*t)}_rotateLeft(e){this._sphericalDelta.theta-=e}_rotateUp(e){this._sphericalDelta.phi-=e}_panLeft(e,t){sc.setFromMatrixColumn(t,0),sc.multiplyScalar(-e),this._panOffset.add(sc)}_panUp(e,t){!0===this.screenSpacePanning?sc.setFromMatrixColumn(t,1):(sc.setFromMatrixColumn(t,0),sc.crossVectors(this.object.up,sc)),sc.multiplyScalar(e),this._panOffset.add(sc)}_pan(e,t){let i=this.domElement;if(this.object.isPerspectiveCamera){let n=this.object.position;sc.copy(n).sub(this.target);let r=sc.length();r*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*e*r/i.clientHeight,this.object.matrix),this._panUp(2*t*r/i.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(e*(this.object.right-this.object.left)/this.object.zoom/i.clientWidth,this.object.matrix),this._panUp(t*(this.object.top-this.object.bottom)/this.object.zoom/i.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(e,t){if(!this.zoomToCursor)return;this._performCursorZoom=!0;let i=this.domElement.getBoundingClientRect(),n=e-i.left,r=t-i.top,a=i.width,s=i.height;this._mouse.x=n/a*2-1,this._mouse.y=-(r/s*2)+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(e){return Math.max(this.minDistance,Math.min(this.maxDistance,e))}_handleMouseDownRotate(e){this._rotateStart.set(e.clientX,e.clientY)}_handleMouseDownDolly(e){this._updateZoomParameters(e.clientX,e.clientX),this._dollyStart.set(e.clientX,e.clientY)}_handleMouseDownPan(e){this._panStart.set(e.clientX,e.clientY)}_handleMouseMoveRotate(e){this._rotateEnd.set(e.clientX,e.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);let t=this.domElement;this._rotateLeft(sq*this._rotateDelta.x/t.clientHeight),this._rotateUp(sq*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(e){this._dollyEnd.set(e.clientX,e.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(e){this._panEnd.set(e.clientX,e.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(e){this._updateZoomParameters(e.clientX,e.clientY),e.deltaY<0?this._dollyIn(this._getZoomScale(e.deltaY)):e.deltaY>0&&this._dollyOut(this._getZoomScale(e.deltaY)),this.update()}_handleKeyDown(e){let t=!1;switch(e.code){case this.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(sq*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),t=!0;break;case this.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(-sq*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),t=!0;break;case this.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(sq*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),t=!0;break;case this.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(-sq*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),this.update())}_handleTouchStartRotate(e){if(1===this._pointers.length)this._rotateStart.set(e.pageX,e.pageY);else{let t=this._getSecondPointerPosition(e),i=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);this._rotateStart.set(i,n)}}_handleTouchStartPan(e){if(1===this._pointers.length)this._panStart.set(e.pageX,e.pageY);else{let t=this._getSecondPointerPosition(e),i=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);this._panStart.set(i,n)}}_handleTouchStartDolly(e){let t=this._getSecondPointerPosition(e),i=e.pageX-t.x,n=e.pageY-t.y,r=Math.sqrt(i*i+n*n);this._dollyStart.set(0,r)}_handleTouchStartDollyPan(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enablePan&&this._handleTouchStartPan(e)}_handleTouchStartDollyRotate(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enableRotate&&this._handleTouchStartRotate(e)}_handleTouchMoveRotate(e){if(1==this._pointers.length)this._rotateEnd.set(e.pageX,e.pageY);else{let t=this._getSecondPointerPosition(e),i=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);this._rotateEnd.set(i,n)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);let t=this.domElement;this._rotateLeft(sq*this._rotateDelta.x/t.clientHeight),this._rotateUp(sq*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(e){if(1===this._pointers.length)this._panEnd.set(e.pageX,e.pageY);else{let t=this._getSecondPointerPosition(e),i=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);this._panEnd.set(i,n)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(e){let t=this._getSecondPointerPosition(e),i=e.pageX-t.x,n=e.pageY-t.y,r=Math.sqrt(i*i+n*n);this._dollyEnd.set(0,r),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);let a=(e.pageX+t.x)*.5,s=(e.pageY+t.y)*.5;this._updateZoomParameters(a,s)}_handleTouchMoveDollyPan(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enablePan&&this._handleTouchMovePan(e)}_handleTouchMoveDollyRotate(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enableRotate&&this._handleTouchMoveRotate(e)}_addPointer(e){this._pointers.push(e.pointerId)}_removePointer(e){delete this._pointerPositions[e.pointerId];for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId){this._pointers.splice(t,1);return}}_isTrackingPointer(e){for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId)return!0;return!1}_trackPointer(e){let t=this._pointerPositions[e.pointerId];void 0===t&&(t=new C,this._pointerPositions[e.pointerId]=t),t.set(e.pageX,e.pageY)}_getSecondPointerPosition(e){let t=e.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[t]}_customWheelEvent(e){let t=e.deltaMode,i={clientX:e.clientX,clientY:e.clientY,deltaY:e.deltaY};switch(t){case 1:i.deltaY*=16;break;case 2:i.deltaY*=100}return e.ctrlKey&&!this._controlActive&&(i.deltaY*=10),i}}function sm(e){!1!==this.enabled&&(0===this._pointers.length&&(this.domElement.setPointerCapture(e.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),this._isTrackingPointer(e)||(this._addPointer(e),"touch"===e.pointerType?this._onTouchStart(e):this._onMouseDown(e)))}function sp(e){!1!==this.enabled&&("touch"===e.pointerType?this._onTouchMove(e):this._onMouseMove(e))}function sf(e){switch(this._removePointer(e),this._pointers.length){case 0:this.domElement.releasePointerCapture(e.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(ss),this.state=su.NONE;break;case 1:let t=this._pointers[0],i=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:i.x,pageY:i.y})}}function s_(e){let t;switch(e.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case p.DOLLY:if(!1===this.enableZoom)return;this._handleMouseDownDolly(e),this.state=su.DOLLY;break;case p.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===this.enablePan)return;this._handleMouseDownPan(e),this.state=su.PAN}else{if(!1===this.enableRotate)return;this._handleMouseDownRotate(e),this.state=su.ROTATE}break;case p.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===this.enableRotate)return;this._handleMouseDownRotate(e),this.state=su.ROTATE}else{if(!1===this.enablePan)return;this._handleMouseDownPan(e),this.state=su.PAN}break;default:this.state=su.NONE}this.state!==su.NONE&&this.dispatchEvent(sa)}function sg(e){switch(this.state){case su.ROTATE:if(!1===this.enableRotate)return;this._handleMouseMoveRotate(e);break;case su.DOLLY:if(!1===this.enableZoom)return;this._handleMouseMoveDolly(e);break;case su.PAN:if(!1===this.enablePan)return;this._handleMouseMovePan(e)}}function sx(e){!1!==this.enabled&&!1!==this.enableZoom&&this.state===su.NONE&&(e.preventDefault(),this.dispatchEvent(sa),this._handleMouseWheel(this._customWheelEvent(e)),this.dispatchEvent(ss))}function sv(e){!1!==this.enabled&&this._handleKeyDown(e)}function sy(e){switch(this._trackPointer(e),this._pointers.length){case 1:switch(this.touches.ONE){case f.ROTATE:if(!1===this.enableRotate)return;this._handleTouchStartRotate(e),this.state=su.TOUCH_ROTATE;break;case f.PAN:if(!1===this.enablePan)return;this._handleTouchStartPan(e),this.state=su.TOUCH_PAN;break;default:this.state=su.NONE}break;case 2:switch(this.touches.TWO){case f.DOLLY_PAN:if(!1===this.enableZoom&&!1===this.enablePan)return;this._handleTouchStartDollyPan(e),this.state=su.TOUCH_DOLLY_PAN;break;case f.DOLLY_ROTATE:if(!1===this.enableZoom&&!1===this.enableRotate)return;this._handleTouchStartDollyRotate(e),this.state=su.TOUCH_DOLLY_ROTATE;break;default:this.state=su.NONE}break;default:this.state=su.NONE}this.state!==su.NONE&&this.dispatchEvent(sa)}function sM(e){switch(this._trackPointer(e),this.state){case su.TOUCH_ROTATE:if(!1===this.enableRotate)return;this._handleTouchMoveRotate(e),this.update();break;case su.TOUCH_PAN:if(!1===this.enablePan)return;this._handleTouchMovePan(e),this.update();break;case su.TOUCH_DOLLY_PAN:if(!1===this.enableZoom&&!1===this.enablePan)return;this._handleTouchMoveDollyPan(e),this.update();break;case su.TOUCH_DOLLY_ROTATE:if(!1===this.enableZoom&&!1===this.enableRotate)return;this._handleTouchMoveDollyRotate(e),this.update();break;default:this.state=su.NONE}}function sS(e){!1!==this.enabled&&e.preventDefault()}function sE(e){"Control"===e.key&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function sT(e){"Control"===e.key&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}class sb extends nE{constructor(e){super(e)}load(e,t,i,n){let r=this,a=new nw(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(e){let i=r.parse(JSON.parse(e));t&&t(i)},i,n)}parse(e){return new sw(e)}}class sw{constructor(e){this.isFont=!0,this.type="Font",this.data=e}generateShapes(e,t=100){let i=[],n=function(e,t,i){let n=Array.from(e),r=t/i.resolution,a=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*r,s=[],o=0,l=0;for(let e=0;e<n.length;e++){let t=n[e];if("\n"===t)o=0,l-=a;else{let e=function(e,t,i,n,r){let a,s,o,l,h,c,q,u;let d=r.glyphs[e]||r.glyphs["?"];if(!d){console.error('THREE.Font: character "'+e+'" does not exists in font family '+r.familyName+".");return}let m=new n$;if(d.o){let e=d._cachedOutline||(d._cachedOutline=d.o.split(" "));for(let r=0,d=e.length;r<d;)switch(e[r++]){case"m":a=e[r++]*t+i,s=e[r++]*t+n,m.moveTo(a,s);break;case"l":a=e[r++]*t+i,s=e[r++]*t+n,m.lineTo(a,s);break;case"q":o=e[r++]*t+i,l=e[r++]*t+n,h=e[r++]*t+i,c=e[r++]*t+n,m.quadraticCurveTo(h,c,o,l);break;case"b":o=e[r++]*t+i,l=e[r++]*t+n,h=e[r++]*t+i,c=e[r++]*t+n,q=e[r++]*t+i,u=e[r++]*t+n,m.bezierCurveTo(h,c,q,u,o,l)}}return{offsetX:d.ha*t,path:m}}(t,r,o,l,i);o+=e.offsetX,s.push(e.path)}}return s}(e,t,this.data);for(let e=0,t=n.length;e<t;e++)i.push(...n[e].toShapes());return i}}class sA extends i5{constructor(e,t={}){let i=t.font;if(void 0===i)super();else{let n=i.generateShapes(e,t.size);void 0===t.depth&&(t.depth=50),void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),super(n,t)}this.type="TextGeometry"}}var sR={};sR=JSON.parse('{"glyphs":{"0":{"ha":794,"x_min":68,"x_max":726,"o":"m 726 479 q 708 271 726 363 q 651 115 690 179 q 548 17 611 50 q 396 -17 485 -17 q 212 42 285 -17 q 103 213 139 101 q 68 479 68 324 q 101 747 68 636 q 206 916 133 857 q 396 975 278 975 q 581 917 507 975 q 690 747 654 858 q 726 479 726 636 m 190 479 q 210 262 190 349 q 276 131 231 175 q 396 88 321 88 q 516 131 471 88 q 582 261 561 174 q 603 479 603 349 q 582 698 603 611 q 516 828 561 785 q 396 871 471 871 q 276 828 321 871 q 210 698 231 785 q 190 479 190 611 z "},"1":{"ha":794,"x_min":124,"x_max":493,"o":"m 493 0 l 374 0 l 374 669 q 374 738 374 710 q 376 790 375 767 q 379 840 378 814 q 339 803 357 818 q 293 764 321 788 l 188 678 l 124 760 l 392 968 l 493 968 l 493 0 z "},"2":{"ha":794,"x_min":67,"x_max":722,"o":"m 722 0 l 67 0 l 67 101 l 296 325 q 444 476 386 413 q 529 594 501 539 q 557 710 557 650 q 536 799 557 763 q 476 853 515 835 q 382 871 438 871 q 255 846 310 871 q 143 776 200 821 l 78 858 q 163 918 117 892 q 265 960 210 944 q 383 975 319 975 q 544 944 478 975 q 647 857 611 914 q 682 721 682 800 q 654 580 682 644 q 576 454 626 515 q 454 324 525 393 l 239 117 l 239 111 l 722 111 l 722 0 z "},"3":{"ha":794,"x_min":63,"x_max":715,"o":"m 685 736 q 660 624 685 672 q 588 547 635 576 q 479 506 542 518 l 479 501 q 657 427 599 488 q 715 272 715 367 q 675 122 715 188 q 551 20 635 57 q 335 -17 467 -17 q 190 -5 257 -17 q 63 38 124 7 l 63 151 q 197 103 125 121 q 336 86 269 86 q 528 136 469 86 q 588 275 588 186 q 555 372 588 335 q 460 426 522 408 q 310 443 397 443 l 214 443 l 214 547 l 311 547 q 448 569 393 547 q 531 632 503 592 q 560 726 560 672 q 511 834 560 796 q 379 872 463 872 q 242 849 299 872 q 129 789 185 825 l 68 872 q 199 944 121 914 q 378 975 278 975 q 609 907 533 975 q 685 736 685 839 z "},"4":{"ha":794,"x_min":29,"x_max":767,"o":"m 767 218 l 622 218 l 622 0 l 504 0 l 504 218 l 29 218 l 29 321 l 496 965 l 622 965 l 622 328 l 767 328 l 767 218 m 504 328 l 504 615 q 507 740 504 689 q 511 838 510 792 l 506 838 q 475 780 494 811 q 440 728 456 749 l 149 328 l 504 328 z "},"5":{"ha":794,"x_min":88,"x_max":715,"o":"m 344 -17 q 201 -3 268 -17 q 88 38 133 11 l 88 153 q 209 105 138 122 q 346 88 281 88 q 474 110 419 88 q 560 178 529 132 q 590 294 590 224 q 531 440 590 389 q 342 490 471 490 q 253 483 303 490 q 172 469 203 476 l 111 508 l 147 958 l 646 958 l 646 847 l 253 847 l 229 578 q 293 588 253 582 q 382 593 333 593 q 558 559 483 593 q 674 461 633 525 q 715 307 715 397 q 671 134 715 207 q 544 22 626 61 q 344 -17 461 -17 z "},"6":{"ha":794,"x_min":76,"x_max":729,"o":"m 76 410 q 88 574 76 493 q 129 728 100 656 q 210 856 158 800 q 340 943 261 911 q 531 975 418 975 q 595 972 560 975 q 653 963 631 969 l 653 860 q 597 871 628 867 q 533 875 565 875 q 374 844 438 875 q 273 760 310 814 q 219 638 236 707 q 199 490 203 568 l 207 490 q 260 550 228 524 q 337 592 292 576 q 442 607 382 607 q 592 572 528 607 q 693 472 657 538 q 729 311 729 406 q 690 137 729 210 q 581 24 651 64 q 414 -15 511 -15 q 282 10 343 -15 q 174 88 221 36 q 102 221 128 140 q 76 410 76 301 m 413 88 q 554 142 500 88 q 608 311 608 197 q 560 458 608 404 q 417 511 513 511 q 303 485 351 511 q 227 418 254 458 q 200 335 200 378 q 213 247 200 290 q 253 167 226 203 q 320 109 281 131 q 413 88 360 88 z "},"7":{"ha":794,"x_min":61,"x_max":726,"o":"m 197 0 l 596 847 l 61 847 l 61 958 l 726 958 l 726 865 l 331 0 l 197 0 z "},"8":{"ha":794,"x_min":68,"x_max":725,"o":"m 396 975 q 550 949 483 975 q 655 871 617 922 q 693 744 693 819 q 667 644 693 688 q 599 567 642 600 q 504 508 556 535 q 615 444 565 479 q 695 361 665 408 q 725 247 725 314 q 685 107 725 167 q 572 15 644 47 q 400 -17 499 -17 q 219 14 293 -17 q 106 103 144 44 q 68 243 68 161 q 97 358 68 310 q 172 442 125 407 q 274 501 219 478 q 185 563 225 529 q 123 641 146 596 q 100 746 100 686 q 139 871 100 819 q 244 949 178 922 q 396 975 311 975 m 188 243 q 239 127 188 174 q 397 81 290 81 q 552 127 499 81 q 606 247 606 174 q 580 328 606 293 q 508 392 554 364 q 397 443 461 421 l 375 451 q 272 397 314 426 q 209 329 231 367 q 188 243 188 292 m 394 876 q 269 841 318 876 q 219 739 219 806 q 244 657 219 690 q 310 600 268 624 q 401 556 351 576 q 488 599 450 575 q 549 658 526 624 q 572 739 572 692 q 524 841 572 806 q 394 876 475 876 z "},"9":{"ha":794,"x_min":69,"x_max":722,"o":"m 722 550 q 710 385 722 467 q 669 231 699 303 q 589 103 640 158 q 458 15 538 47 q 267 -17 379 -17 q 202 -13 239 -17 q 142 -3 165 -10 l 142 101 q 200 88 167 93 q 264 83 233 83 q 424 114 361 83 q 525 197 488 144 q 579 319 563 250 q 599 467 596 389 l 590 467 q 538 410 569 436 q 460 367 506 383 q 354 351 415 351 q 205 386 269 351 q 105 487 140 421 q 69 646 69 553 q 109 821 69 747 q 219 935 149 894 q 386 975 290 975 q 518 949 457 975 q 625 871 579 924 q 697 738 671 818 q 722 550 722 658 m 386 872 q 245 817 300 872 q 190 647 190 763 q 237 502 190 556 q 381 449 283 449 q 496 474 447 449 q 572 541 544 500 q 599 625 599 582 q 585 713 599 669 q 546 792 572 756 q 479 851 519 829 q 386 872 439 872 z "},"\\u0000":{"ha":0,"x_min":0,"x_max":0,"o":""},"\\r":{"ha":400,"x_min":0,"x_max":0,"o":""}," ":{"ha":400,"x_min":0,"x_max":0,"o":""},"ಀ":{"ha":772,"x_min":51,"x_max":721,"o":"m 386 57 q 202 92 276 57 q 90 193 128 128 q 51 350 51 258 q 56 424 51 390 q 67 481 60 458 l 176 460 q 168 411 171 438 q 165 358 165 385 q 194 242 165 286 q 272 180 222 199 q 386 161 322 161 q 501 180 451 161 q 579 242 551 199 q 607 358 607 286 q 604 411 607 385 q 596 460 601 438 l 706 481 q 717 425 713 458 q 721 354 721 392 q 683 198 721 265 q 572 94 646 131 q 386 57 497 57 m 386 275 q 324 300 349 275 q 299 361 299 325 q 323 425 299 400 q 386 450 347 450 q 448 425 424 450 q 472 361 472 400 q 448 300 472 325 q 386 275 424 275 z "},"ಁ":{"ha":0,"x_min":-628,"x_max":-144,"o":"m -386 831 q -518 856 -464 831 q -600 929 -572 881 q -628 1046 -628 978 q -625 1085 -628 1065 q -617 1122 -622 1106 l -522 1103 q -528 1074 -526 1089 q -529 1049 -529 1060 q -509 971 -529 999 q -456 932 -489 943 q -386 921 -422 921 q -286 950 -329 921 q -243 1051 -243 979 q -244 1076 -243 1063 q -250 1103 -246 1089 l -154 1122 q -147 1085 -150 1106 q -144 1046 -144 1064 q -174 931 -144 979 q -257 856 -203 882 q -386 831 -311 831 m -387 979 q -437 999 -418 979 q -457 1050 -457 1018 q -437 1099 -457 1079 q -387 1119 -418 1119 q -337 1099 -357 1119 q -317 1050 -317 1079 q -337 999 -317 1018 q -387 979 -357 979 z "},"ಂ":{"ha":764,"x_min":51,"x_max":713,"o":"m 376 -17 q 205 25 278 -17 q 92 146 132 67 q 51 338 51 225 q 91 524 51 443 q 205 649 131 604 q 383 694 279 694 q 569 647 497 694 q 677 520 642 600 q 713 339 713 440 q 674 156 713 236 q 560 29 635 75 q 376 -17 486 -17 m 379 88 q 547 158 494 88 q 599 338 599 229 q 543 522 599 454 q 385 590 488 590 q 258 558 307 590 q 188 469 210 525 q 165 342 165 413 q 222 156 165 224 q 379 88 278 88 z "},"ಃ":{"ha":424,"x_min":46,"x_max":378,"o":"m 46 532 q 92 648 46 601 q 211 694 138 694 q 333 648 288 694 q 378 532 378 601 q 333 417 378 464 q 211 371 289 371 q 91 417 136 371 q 46 532 46 464 m 135 533 q 154 479 135 501 q 211 457 174 457 q 269 479 250 457 q 289 533 289 501 q 269 587 289 565 q 211 608 249 608 q 155 587 175 608 q 135 533 135 565 m 46 146 q 92 262 46 215 q 211 308 138 308 q 333 262 288 308 q 378 146 378 215 q 333 30 378 76 q 211 -17 289 -17 q 91 31 136 -17 q 46 146 46 78 m 135 146 q 154 92 135 114 q 211 69 174 69 q 269 92 250 69 q 289 146 289 114 q 269 200 289 178 q 211 222 249 222 q 155 200 175 222 q 135 146 135 178 z "},"಄":{"ha":1450,"x_min":61,"x_max":1389,"o":"m 194 749 q 177 635 182 690 q 172 519 172 581 q 239 171 172 315 q 432 -49 306 26 q 739 -125 558 -125 q 1029 -62 910 -125 q 1211 122 1149 1 q 1274 414 1274 243 q 1222 683 1274 569 q 1075 857 1171 796 q 846 918 979 918 q 653 878 740 918 q 513 752 565 838 q 460 532 460 667 q 535 300 460 382 q 739 218 610 218 q 931 276 865 218 q 997 442 997 333 q 956 583 997 532 q 835 633 914 633 q 744 608 776 633 q 711 533 711 582 q 731 473 711 494 q 785 451 750 451 q 831 458 814 451 q 867 478 849 464 l 918 396 q 864 366 900 379 q 781 353 828 353 q 688 376 728 353 q 625 439 647 399 q 603 533 603 479 q 630 628 603 583 q 710 700 657 672 q 839 728 763 728 q 979 691 918 728 q 1074 590 1040 654 q 1108 442 1108 525 q 1063 269 1108 340 q 935 160 1018 197 q 739 122 851 122 q 532 172 619 122 q 397 315 444 222 q 349 533 349 407 q 411 787 349 678 q 586 956 474 896 q 846 1017 699 1017 q 1055 979 957 1017 q 1228 867 1153 942 q 1346 678 1303 792 q 1389 414 1389 565 q 1304 55 1389 197 q 1072 -158 1219 -87 q 736 -228 925 -228 q 454 -178 579 -228 q 242 -32 329 -128 q 108 201 154 64 q 61 513 61 339 q 67 631 61 571 q 85 754 74 692 l 194 749 z "},"ಅ":{"ha":1199,"x_min":51,"x_max":1147,"o":"m 585 96 q 835 133 736 96 q 984 251 935 171 q 1033 456 1033 331 q 1017 569 1033 518 q 967 649 1000 619 q 882 679 933 679 q 822 656 850 679 q 793 582 793 633 q 813 519 793 547 q 866 469 832 490 q 943 433 900 447 l 943 335 l 518 335 l 518 440 l 767 440 q 724 486 742 461 q 695 541 706 511 q 685 608 685 571 q 706 691 685 651 q 772 756 728 731 q 881 782 815 782 q 1025 740 965 782 q 1116 626 1085 699 q 1147 458 1147 553 q 1081 187 1147 292 q 888 33 1014 82 q 588 -17 763 -17 q 290 41 410 -17 q 111 200 171 99 q 51 432 51 301 q 89 622 51 544 q 191 741 126 700 q 336 782 256 782 q 442 760 397 782 q 510 696 486 738 q 535 596 535 654 q 508 489 535 536 q 427 414 481 442 q 294 386 374 386 q 204 401 244 386 q 135 439 164 417 q 88 483 107 461 l 121 575 q 156 537 133 558 q 210 499 178 515 q 286 483 243 483 q 393 514 360 483 q 426 592 426 544 q 401 660 426 636 q 336 685 376 685 q 208 620 254 685 q 163 438 163 556 l 163 432 q 186 308 163 368 q 260 199 210 247 q 390 124 310 151 q 585 96 471 96 z "},"ಆ":{"ha":1168,"x_min":51,"x_max":1126,"o":"m 604 -17 q 297 41 419 -17 q 113 200 174 99 q 51 432 51 301 q 89 622 51 544 q 191 741 126 700 q 336 782 256 782 q 442 760 397 782 q 510 696 486 738 q 535 596 535 654 q 508 489 535 536 q 427 414 481 442 q 294 386 374 386 q 204 401 244 386 q 135 439 164 417 q 88 483 107 461 l 121 575 q 156 537 133 558 q 210 499 178 515 q 286 483 243 483 q 393 514 360 483 q 426 592 426 544 q 401 660 426 636 q 336 685 376 685 q 208 620 254 685 q 163 438 163 556 l 163 432 q 186 308 163 368 q 263 199 210 247 q 401 124 315 151 q 613 96 488 96 q 824 121 743 96 q 944 188 906 146 q 982 282 982 231 q 961 345 982 322 q 901 382 940 368 q 889 394 896 385 q 875 406 882 404 q 738 485 790 439 q 685 613 685 532 q 745 738 685 693 q 899 782 806 782 q 1029 753 979 782 q 1103 681 1079 725 q 1126 585 1126 636 q 1092 473 1126 521 q 1010 393 1058 425 q 911 349 965 363 q 765 335 857 335 l 485 335 l 485 440 l 869 440 q 937 465 904 446 q 992 516 969 485 q 1014 585 1014 547 q 985 656 1014 626 q 897 686 956 686 q 822 662 849 686 q 794 600 794 638 q 830 526 794 556 q 929 468 865 496 q 972 451 949 460 q 1014 428 996 442 q 1072 365 1050 403 q 1094 272 1094 326 q 1072 167 1094 218 q 993 74 1049 115 q 843 8 938 32 q 604 -17 749 -17 z "},"ಇ":{"ha":988,"x_min":36,"x_max":936,"o":"m 446 -17 q 295 10 354 -17 q 208 85 236 38 q 179 194 179 133 q 247 338 179 285 q 438 392 314 392 q 583 369 518 392 q 702 303 649 346 q 797 201 756 261 q 867 80 840 144 q 907 -54 893 15 l 792 -76 q 727 111 772 28 q 610 242 682 194 q 438 290 539 290 q 329 265 367 290 q 292 196 292 240 q 330 117 292 146 q 453 88 368 88 q 626 117 556 88 q 740 197 696 146 q 803 313 783 247 q 822 450 822 378 q 781 619 822 567 q 667 672 739 672 q 567 628 606 672 q 518 511 528 585 l 408 511 q 358 631 399 590 q 258 672 317 672 q 176 645 203 672 q 150 574 150 618 q 158 520 150 547 q 174 476 165 493 l 68 443 q 46 503 56 469 q 36 582 36 538 q 65 688 36 643 q 143 758 94 733 q 250 782 192 782 q 347 766 306 782 q 422 714 389 750 q 485 619 456 678 l 442 613 q 511 719 472 683 q 593 769 550 756 q 678 782 636 782 q 828 733 771 782 q 910 608 885 685 q 936 450 936 532 q 924 338 936 397 q 883 222 911 279 q 806 117 854 165 l 776 96 q 638 16 719 49 q 446 -17 557 -17 z "},"ಈ":{"ha":1403,"x_min":28,"x_max":1376,"o":"m 494 -17 q 292 26 382 -17 q 151 153 203 69 q 99 354 99 236 q 120 494 99 432 q 181 601 142 556 q 274 678 219 647 l 299 658 l 99 658 l 99 765 l 593 765 q 699 772 668 765 q 744 790 729 779 q 769 822 763 804 q 775 858 775 839 q 753 948 775 904 q 685 1038 731 992 l 775 1097 q 864 967 840 1025 q 888 850 888 910 q 876 785 888 824 q 831 717 865 746 q 788 687 813 700 q 729 667 763 674 l 722 678 q 812 599 775 644 q 868 494 849 554 q 888 354 888 435 q 840 163 888 247 q 706 31 793 79 q 494 -17 618 -17 m 494 93 q 653 131 590 93 q 746 233 715 169 q 776 375 776 297 q 776 399 776 386 q 774 422 775 413 q 724 552 763 499 q 628 633 686 606 q 496 661 569 661 q 356 632 417 661 q 259 549 296 603 q 213 419 222 494 q 210 398 211 410 q 210 375 210 386 q 288 167 210 240 q 494 93 365 93 m 1114 108 q 1202 133 1175 111 q 1229 185 1229 154 q 1207 258 1229 225 q 1128 347 1185 292 l 1082 393 q 1022 474 1049 429 q 996 568 996 518 q 1015 645 996 608 q 1076 705 1035 682 q 1185 728 1118 728 q 1327 676 1278 728 q 1376 551 1376 625 q 1348 441 1376 483 q 1272 376 1319 399 q 1162 344 1224 353 q 1033 336 1100 336 l 28 336 l 28 433 l 1068 433 q 1165 441 1118 433 q 1242 474 1213 449 q 1272 547 1272 499 q 1248 611 1272 589 q 1185 633 1224 633 q 1122 613 1146 633 q 1099 556 1099 592 q 1126 481 1099 515 q 1185 418 1154 446 l 1204 401 q 1308 277 1276 329 q 1339 164 1339 225 q 1319 87 1339 122 q 1251 28 1299 51 q 1125 0 1204 6 l 1114 108 z "},"ಉ":{"ha":1697,"x_min":51,"x_max":1646,"o":"m 1342 -17 q 1210 4 1269 -17 q 1113 65 1150 25 q 1067 133 1085 96 q 1040 224 1049 169 q 1031 363 1031 279 l 1031 467 q 1021 575 1031 533 q 990 639 1011 617 q 952 666 975 657 q 899 675 929 675 q 819 656 849 675 q 776 600 789 636 q 763 515 763 564 q 766 431 763 465 q 773 365 769 397 q 776 290 776 333 q 735 123 776 192 q 617 19 693 54 q 439 -17 542 -17 q 230 40 317 -17 q 97 198 143 97 q 51 432 51 299 q 89 622 51 543 q 191 741 126 700 q 336 782 256 782 q 442 760 397 782 q 510 696 486 738 q 535 596 535 654 q 508 489 535 536 q 427 414 481 442 q 294 386 374 386 q 204 401 244 386 q 135 439 164 417 q 88 483 107 461 l 121 575 q 156 537 133 558 q 210 499 178 515 q 286 483 243 483 q 393 514 360 483 q 426 592 426 544 q 401 660 426 636 q 336 685 376 685 q 207 619 254 685 q 160 438 160 554 l 160 432 q 176 301 160 363 q 225 193 192 240 q 313 119 258 146 q 442 93 367 93 q 577 122 529 93 q 644 199 625 151 q 663 300 663 246 q 659 379 663 343 q 652 450 656 415 q 649 521 649 485 q 679 663 649 604 q 767 751 710 721 q 903 782 824 782 q 993 769 954 782 q 1063 728 1032 756 q 1108 671 1090 704 q 1134 588 1125 638 q 1143 467 1143 539 l 1143 353 q 1158 218 1143 267 q 1204 139 1174 169 q 1262 105 1228 117 q 1342 93 1296 93 q 1444 116 1401 93 q 1509 187 1486 139 q 1532 308 1532 235 q 1508 455 1532 388 q 1434 581 1483 522 q 1311 692 1385 640 l 1390 785 q 1535 642 1479 717 q 1619 485 1592 568 q 1646 307 1646 403 q 1610 134 1646 207 q 1506 22 1574 61 q 1342 -17 1438 -17 z "},"ಊ":{"ha":2218,"x_min":51,"x_max":2165,"o":"m 1283 -17 q 1183 -1 1228 -17 q 1101 54 1138 15 q 1050 141 1069 89 q 1031 283 1031 193 l 1031 467 q 1021 575 1031 533 q 990 639 1011 617 q 952 666 975 657 q 899 675 929 675 q 819 656 849 675 q 776 600 789 636 q 763 515 763 564 q 766 431 763 465 q 773 365 769 397 q 776 290 776 333 q 735 123 776 192 q 617 19 693 54 q 439 -17 542 -17 q 230 40 317 -17 q 97 198 143 97 q 51 432 51 299 q 89 622 51 543 q 191 741 126 700 q 336 782 256 782 q 442 760 397 782 q 510 696 486 738 q 535 596 535 654 q 508 489 535 536 q 427 414 481 442 q 294 386 374 386 q 204 401 244 386 q 135 439 164 417 q 88 483 107 461 l 121 575 q 156 537 133 558 q 210 499 178 515 q 286 483 243 483 q 393 514 360 483 q 426 592 426 544 q 401 660 426 636 q 336 685 376 685 q 207 619 254 685 q 160 438 160 554 l 160 432 q 176 301 160 363 q 225 193 192 240 q 313 119 258 146 q 442 93 367 93 q 577 122 529 93 q 644 199 625 151 q 663 300 663 246 q 659 379 663 343 q 652 450 656 415 q 649 521 649 485 q 679 663 649 604 q 767 751 710 721 q 903 782 824 782 q 993 769 954 782 q 1063 728 1032 756 q 1108 671 1090 704 q 1134 588 1125 638 q 1143 467 1143 539 l 1143 306 q 1158 174 1143 213 q 1197 117 1174 136 q 1237 97 1214 103 q 1288 90 1260 90 q 1388 131 1353 90 q 1422 264 1422 171 q 1420 328 1422 294 q 1415 394 1418 361 q 1413 450 1413 426 q 1458 628 1413 554 q 1582 742 1503 703 q 1763 782 1661 782 q 1941 747 1865 782 q 2066 649 2017 711 q 2140 506 2115 588 q 2165 331 2165 424 q 2131 147 2165 225 q 2032 26 2097 68 q 1872 -17 1967 -17 q 1741 13 1794 -17 q 1660 94 1688 43 q 1633 206 1633 144 q 1654 307 1633 267 q 1710 367 1675 347 q 1788 388 1746 388 q 1866 362 1839 388 q 1893 294 1893 336 q 1872 232 1893 256 q 1817 208 1850 208 q 1759 229 1779 208 q 1739 292 1739 250 l 1750 294 q 1737 256 1740 274 q 1733 215 1733 238 q 1765 126 1733 165 q 1872 86 1796 86 q 1968 115 1928 86 q 2030 197 2008 143 q 2051 328 2051 251 q 2021 498 2051 419 q 1927 625 1990 576 q 1764 674 1864 674 q 1637 646 1690 674 q 1555 565 1583 618 q 1526 436 1526 513 q 1529 373 1526 403 q 1534 314 1532 343 q 1536 250 1536 285 q 1474 56 1536 128 q 1283 -17 1411 -17 z "},"ಋ":{"ha":1654,"x_min":38,"x_max":1603,"o":"m 260 -17 q 101 37 158 -17 q 43 167 43 90 q 70 265 43 225 q 142 325 97 304 q 242 346 188 346 q 370 299 322 346 q 418 175 418 253 q 406 103 418 138 q 374 39 393 68 l 285 54 q 318 108 306 81 q 331 163 331 135 q 305 230 331 210 q 243 250 279 250 q 171 227 193 250 q 149 165 149 204 q 176 103 149 128 q 254 78 203 78 q 305 81 282 78 q 347 90 328 85 q 358 92 353 93 q 367 92 363 90 q 443 155 415 111 q 483 257 471 199 q 494 378 494 315 q 487 462 494 421 q 464 540 479 503 q 426 608 449 578 q 375 658 404 638 q 363 663 369 663 q 350 665 357 663 q 303 683 328 676 q 249 689 278 689 q 170 664 197 689 q 143 601 143 639 q 165 540 143 563 q 231 517 188 517 q 299 537 272 517 q 325 604 325 557 q 312 666 325 638 q 279 713 299 694 l 368 728 q 400 665 388 700 q 413 590 413 629 q 363 467 413 514 q 228 421 313 421 q 135 442 178 421 q 65 503 92 463 q 38 600 38 543 q 64 692 38 651 q 139 758 90 733 q 254 782 188 782 q 415 743 349 782 q 524 644 482 704 q 587 515 567 583 q 607 385 607 446 q 590 240 607 311 q 534 110 574 168 q 427 18 494 53 q 260 -17 360 -17 m 801 -17 q 616 37 694 -17 q 474 171 538 90 l 546 246 q 665 133 604 172 q 803 93 725 93 q 935 147 889 93 q 981 292 981 201 q 945 458 981 383 q 845 585 910 532 q 694 663 781 638 l 886 668 q 998 573 951 626 q 1069 451 1044 519 q 1094 299 1094 383 q 1080 187 1094 243 q 1031 85 1065 131 q 941 11 997 39 q 801 -17 885 -17 m 632 658 l 632 765 l 788 765 q 893 772 863 765 q 939 790 924 779 q 963 822 957 804 q 969 858 969 839 q 947 948 969 904 q 879 1038 925 992 l 969 1097 q 1058 967 1035 1025 q 1082 850 1082 910 q 1071 785 1082 824 q 1025 717 1060 747 q 941 672 989 686 q 813 658 893 658 l 632 658 m 1310 -17 q 1126 37 1204 -17 q 983 171 1047 90 l 1056 246 q 1174 133 1114 172 q 1315 93 1235 93 q 1443 147 1397 93 q 1489 292 1489 201 q 1455 463 1489 389 q 1360 590 1421 536 q 1217 678 1299 643 l 1276 785 q 1444 669 1371 739 q 1560 507 1518 600 q 1603 299 1603 414 q 1571 137 1603 208 q 1474 24 1539 65 q 1310 -17 1410 -17 z "},"ಌ":{"ha":981,"x_min":36,"x_max":965,"o":"m 965 51 q 857 -2 915 18 q 726 -22 799 -22 q 606 -3 661 -22 q 519 60 551 17 q 488 174 488 103 q 509 260 488 222 q 570 333 531 299 q 665 404 610 367 q 742 462 714 438 q 782 511 769 486 q 794 571 794 536 q 764 644 794 617 q 681 672 733 672 q 570 628 613 672 q 518 511 528 583 l 408 511 q 358 631 399 590 q 258 672 317 672 q 176 645 203 672 q 150 574 150 618 q 158 520 150 547 q 174 476 165 493 l 68 443 q 46 503 56 469 q 36 582 36 538 q 65 688 36 643 q 143 758 94 733 q 250 782 192 782 q 347 766 306 782 q 422 714 389 750 q 485 619 456 678 l 442 613 q 513 716 474 679 q 597 767 551 753 q 689 782 642 782 q 807 753 758 782 q 882 675 856 724 q 908 569 908 626 q 887 471 908 514 q 825 392 865 428 q 731 319 785 356 q 660 269 689 292 q 617 225 632 247 q 601 175 601 203 q 619 119 601 138 q 665 94 638 100 q 722 88 693 88 q 822 105 775 88 q 908 149 869 122 l 965 51 z "},"ಎ":{"ha":1093,"x_min":40,"x_max":1042,"o":"m 799 -17 q 683 1 728 -17 q 608 55 639 19 q 547 140 578 90 l 590 146 q 513 44 554 79 q 423 -3 472 10 q 311 -17 374 -17 q 172 14 233 -17 q 75 100 110 44 q 40 232 40 156 q 65 342 40 293 q 138 421 90 392 q 251 450 185 450 q 369 415 325 450 q 414 321 414 381 q 410 276 414 299 q 396 239 406 254 l 301 247 q 307 270 304 258 q 310 292 310 282 q 293 338 310 322 q 247 353 276 353 q 176 323 204 353 q 147 236 147 293 q 190 133 147 174 q 322 93 233 93 q 463 142 418 93 q 514 271 507 190 l 619 271 q 674 135 626 178 q 789 93 722 93 q 896 147 864 93 q 928 286 928 200 q 882 464 928 388 q 753 592 836 540 q 562 669 671 643 q 325 694 453 694 l 339 810 q 595 780 482 807 q 792 704 708 753 q 932 591 876 656 q 1015 449 988 526 q 1042 288 1042 372 q 1008 113 1042 181 q 918 15 974 46 q 799 -17 863 -17 z "},"ಏ":{"ha":1093,"x_min":40,"x_max":1042,"o":"m 799 -17 q 683 1 728 -17 q 608 55 639 19 q 547 140 578 90 l 590 146 q 513 44 554 79 q 423 -3 472 10 q 311 -17 374 -17 q 172 14 233 -17 q 75 100 110 44 q 40 232 40 156 q 65 342 40 293 q 138 421 90 392 q 251 450 185 450 q 369 415 325 450 q 414 321 414 381 q 410 276 414 299 q 396 239 406 254 l 301 247 q 307 270 304 258 q 310 292 310 282 q 293 338 310 322 q 247 353 276 353 q 176 323 204 353 q 147 236 147 293 q 190 133 147 174 q 322 93 233 93 q 463 142 418 93 q 514 271 507 190 l 619 271 q 674 135 626 178 q 789 93 722 93 q 896 147 864 93 q 928 286 928 200 q 898 446 928 379 q 819 558 868 513 q 708 634 769 604 q 583 682 647 664 l 599 685 q 503 567 563 603 q 371 532 443 532 q 292 544 332 532 q 216 585 251 556 q 159 667 181 615 q 136 799 138 719 l 243 810 q 283 672 250 708 q 371 636 315 636 q 467 676 429 636 q 518 810 504 715 q 767 734 667 786 q 928 610 867 682 q 1015 456 989 539 q 1042 288 1042 374 q 1008 113 1042 181 q 918 15 974 46 q 799 -17 863 -17 z "},"ಐ":{"ha":1121,"x_min":47,"x_max":1063,"o":"m 797 -17 q 688 2 732 -17 q 614 56 644 21 q 553 142 583 92 l 597 146 q 520 44 561 79 q 430 -3 479 10 q 318 -17 381 -17 q 178 14 240 -17 q 82 100 117 44 q 47 232 47 156 q 72 342 47 293 q 144 421 97 392 q 258 450 192 450 q 376 415 332 450 q 421 321 421 381 q 417 276 421 299 q 403 239 413 254 l 308 247 q 314 269 311 256 q 317 292 317 282 q 300 338 317 322 q 254 353 283 353 q 183 323 211 353 q 154 236 154 293 q 197 133 154 174 q 329 93 240 93 q 469 142 425 93 q 521 271 514 190 l 626 271 q 682 135 633 178 q 786 93 731 93 q 912 159 875 93 q 949 349 949 225 q 926 519 949 446 q 858 632 903 592 q 746 672 813 672 q 663 651 697 672 q 608 594 628 629 q 579 517 588 560 l 471 517 q 412 631 457 589 q 293 672 367 672 q 206 647 231 672 q 182 585 182 622 q 185 551 182 567 q 193 521 188 535 l 85 494 q 73 538 78 514 q 68 590 68 563 q 127 728 68 675 q 292 782 186 782 q 388 767 344 782 q 469 722 432 753 q 535 644 506 692 l 522 643 q 629 750 568 718 q 754 782 690 782 q 913 733 843 782 q 1022 588 982 683 q 1063 350 1063 492 q 1026 136 1063 217 q 930 19 990 56 q 797 -17 869 -17 z "},"ಒ":{"ha":1076,"x_min":36,"x_max":1035,"o":"m 779 -17 q 635 20 694 -17 q 528 144 576 57 l 571 144 q 501 47 539 82 q 415 -2 463 13 q 303 -17 367 -17 q 172 13 225 -17 q 94 90 119 43 q 68 189 68 138 q 91 292 68 249 q 157 372 114 335 q 260 446 200 408 q 344 511 313 481 q 376 586 376 542 q 365 637 376 615 q 330 669 354 658 q 264 681 306 681 q 176 655 204 681 q 149 586 149 629 q 156 544 149 564 q 176 504 163 524 l 79 461 q 47 530 57 496 q 36 599 36 564 q 61 689 36 647 q 137 756 86 731 q 265 782 188 782 q 400 752 351 782 q 469 678 449 722 q 489 588 489 633 q 467 498 489 538 q 406 424 446 458 q 311 353 367 389 q 215 279 247 311 q 182 196 182 247 q 218 117 182 142 q 310 93 254 93 q 447 142 403 93 q 497 271 492 190 l 603 271 q 660 135 610 178 q 779 93 711 93 q 888 131 856 93 q 921 219 921 169 q 905 301 921 263 q 861 371 889 339 l 960 435 q 1015 338 996 389 q 1035 222 1035 286 q 1008 98 1035 151 q 924 14 981 44 q 779 -17 868 -17 z "},"ಓ":{"ha":1076,"x_min":36,"x_max":1035,"o":"m 201 738 q 122 819 151 775 q 92 914 92 863 q 113 1000 92 961 q 185 1063 135 1039 q 318 1090 235 1088 l 329 982 q 231 960 261 981 q 201 901 201 940 q 228 833 201 864 q 301 775 256 803 l 201 738 m 779 -17 q 635 20 694 -17 q 528 144 576 57 l 571 144 q 501 47 539 82 q 415 -2 463 13 q 303 -17 367 -17 q 172 13 225 -17 q 94 90 119 43 q 68 189 68 138 q 91 292 68 249 q 157 372 114 335 q 260 446 200 408 q 344 511 313 481 q 376 586 376 542 q 365 637 376 615 q 330 669 354 658 q 264 681 306 681 q 176 655 204 681 q 149 586 149 629 q 156 544 149 564 q 176 504 163 524 l 79 461 q 47 530 57 496 q 36 599 36 564 q 61 689 36 647 q 137 756 86 731 q 265 782 188 782 q 400 752 351 782 q 469 678 449 722 q 489 588 489 633 q 467 498 489 538 q 406 424 446 458 q 311 353 367 389 q 215 279 247 311 q 182 196 182 247 q 218 117 182 142 q 310 93 254 93 q 447 142 403 93 q 497 271 492 190 l 603 271 q 660 135 610 178 q 779 93 711 93 q 888 131 856 93 q 921 219 921 169 q 905 301 921 263 q 861 371 889 339 l 960 435 q 1015 338 996 389 q 1035 222 1035 286 q 1008 98 1035 151 q 924 14 981 44 q 779 -17 868 -17 z "},"ಔ":{"ha":1081,"x_min":36,"x_max":1035,"o":"m 779 -17 q 635 20 694 -17 q 528 144 576 57 l 571 144 q 501 47 539 82 q 415 -2 463 13 q 303 -17 367 -17 q 172 13 225 -17 q 94 90 119 43 q 68 189 68 138 q 91 292 68 249 q 157 372 114 335 q 260 446 200 408 q 344 511 313 481 q 376 586 376 542 q 365 637 376 615 q 330 669 354 658 q 264 681 306 681 q 176 655 204 681 q 149 586 149 629 q 156 544 149 564 q 176 504 163 524 l 79 461 q 47 530 57 496 q 36 599 36 564 q 61 689 36 647 q 138 756 86 731 q 265 782 189 782 q 398 752 349 782 q 468 678 447 722 q 489 588 489 633 q 467 498 489 538 q 406 424 446 458 q 311 353 367 389 q 215 279 247 311 q 182 196 182 247 q 218 117 182 142 q 310 93 254 93 q 447 142 403 93 q 497 271 492 190 l 603 271 q 661 135 610 178 q 779 93 713 93 q 888 131 856 93 q 921 219 921 169 q 905 301 921 263 q 861 371 889 339 l 960 435 q 1015 338 996 389 q 1035 222 1035 286 q 1008 98 1035 151 q 924 14 981 44 q 779 -17 868 -17 m 100 692 l 100 782 l 231 782 q 313 788 288 782 q 354 804 339 794 q 378 833 372 817 q 383 868 383 850 q 371 927 383 899 q 332 985 358 956 l 449 994 q 482 938 468 969 q 496 863 496 906 q 474 779 496 815 q 396 717 451 743 q 329 697 368 703 q 233 692 290 692 l 100 692 m 760 453 q 644 481 692 453 q 572 556 597 508 q 546 661 546 604 q 589 790 546 747 q 693 833 632 833 q 770 809 743 833 q 797 743 797 785 q 777 683 797 706 q 725 660 757 660 q 667 680 686 660 q 647 736 647 700 l 658 750 q 644 708 649 725 q 640 671 640 690 q 652 611 640 639 q 690 567 664 583 q 758 550 715 550 q 871 596 829 550 q 913 738 913 642 q 895 838 913 794 q 844 911 878 881 q 790 949 821 933 q 711 972 758 964 q 589 979 664 979 l 57 979 l 57 1086 l 606 1086 q 752 1074 690 1086 q 859 1040 814 1063 q 938 983 904 1018 q 1002 880 979 942 q 1025 738 1025 818 q 992 585 1025 649 q 900 487 960 521 q 760 453 840 453 z "},"ಕ":{"ha":797,"x_min":50,"x_max":757,"o":"m 393 -17 q 226 15 296 -17 q 118 105 156 47 q 81 239 81 163 q 95 322 81 283 q 139 392 110 361 q 211 446 168 424 l 231 426 l 50 425 l 50 521 l 339 521 q 365 549 354 532 q 375 589 375 567 q 369 626 375 608 q 351 660 363 644 l 414 676 l 463 660 q 479 622 474 642 q 485 588 485 603 q 480 549 485 565 q 467 521 475 533 l 749 521 l 749 425 l 563 428 l 583 442 q 653 397 624 426 q 700 328 683 368 q 717 242 717 289 q 681 107 717 165 q 573 16 644 49 q 393 -17 501 -17 m 399 92 q 558 140 510 92 q 606 256 606 188 q 582 345 606 307 q 513 404 558 383 q 399 425 467 425 q 283 403 329 425 q 214 344 236 382 q 192 256 192 306 q 243 137 192 182 q 399 92 294 92 m 50 658 l 50 765 l 464 765 q 569 772 539 765 q 614 790 600 779 q 638 822 632 804 q 644 858 644 839 q 622 948 644 904 q 554 1038 600 992 l 644 1097 q 733 967 710 1025 q 757 850 757 910 q 747 785 757 824 q 700 717 736 747 q 617 672 665 686 q 489 658 569 658 l 50 658 z "},"ಖ":{"ha":1179,"x_min":33,"x_max":1128,"o":"m 825 -17 q 706 6 761 -17 q 603 60 650 28 q 515 126 556 93 q 504 136 510 132 q 493 144 499 140 q 381 224 438 189 q 250 260 324 260 q 169 235 193 260 q 144 178 144 210 q 170 116 144 144 q 264 88 196 88 q 391 113 339 88 q 475 184 443 139 q 522 289 507 229 q 536 417 536 349 q 513 559 536 500 q 446 650 489 618 q 344 682 403 682 q 256 658 293 682 q 219 576 219 633 q 226 539 219 561 q 253 506 232 517 l 222 492 q 242 565 222 542 q 300 589 263 589 q 353 567 332 589 q 374 507 374 546 q 347 442 374 468 q 269 417 321 417 q 164 458 208 417 q 119 578 119 499 q 150 689 119 643 q 231 758 181 735 q 343 782 282 782 q 514 734 446 782 q 616 605 582 686 q 650 424 650 524 q 632 274 650 342 q 578 153 614 206 q 441 24 522 65 q 263 -17 360 -17 q 96 34 158 -17 q 33 181 33 85 q 56 265 33 225 q 127 331 79 306 q 250 357 175 357 q 358 342 310 357 q 449 303 407 328 q 529 250 492 279 l 556 231 q 658 154 614 185 q 742 108 701 124 q 828 93 782 93 q 967 156 919 93 q 1014 325 1014 218 q 968 516 1014 432 q 841 663 922 600 q 653 765 760 725 l 713 874 q 927 746 833 824 q 1074 563 1021 668 q 1128 326 1128 458 q 1095 151 1128 229 q 996 28 1063 74 q 825 -17 929 -17 z "},"ಗ":{"ha":900,"x_min":65,"x_max":831,"o":"m 453 661 q 349 633 392 661 q 276 557 306 604 q 228 450 247 510 q 210 372 217 415 q 199 275 203 329 q 196 153 196 221 l 196 0 l 69 0 l 69 176 q 87 383 69 286 q 149 557 104 481 q 275 679 193 633 l 299 658 l 65 658 l 65 765 l 536 765 q 642 772 611 765 q 688 790 672 779 q 712 822 706 804 q 718 858 718 839 q 696 948 718 904 q 628 1038 674 992 l 718 1097 q 807 967 783 1025 q 831 850 831 910 q 806 756 831 796 q 738 692 781 715 q 640 663 696 668 l 649 668 q 767 533 728 610 q 818 366 806 456 q 831 181 831 276 l 831 0 l 704 0 l 704 153 q 700 280 704 222 q 688 385 696 338 q 667 467 681 432 q 584 609 633 557 q 453 661 535 661 z "},"ಘ":{"ha":1383,"x_min":43,"x_max":1346,"o":"m 314 -17 q 174 14 236 -17 q 78 100 113 44 q 43 232 43 156 q 68 342 43 293 q 140 421 93 392 q 254 450 188 450 q 372 415 328 450 q 417 321 417 381 q 413 276 417 299 q 399 239 408 254 l 304 247 q 310 270 307 258 q 313 292 313 282 q 296 338 313 322 q 250 353 279 353 q 178 323 207 353 q 150 236 150 293 q 193 133 150 174 q 325 93 236 93 q 465 142 421 93 q 517 271 510 190 l 622 271 q 677 135 629 178 q 792 93 725 93 q 872 114 842 93 q 917 167 903 135 q 931 232 931 200 q 905 351 931 296 q 821 464 879 406 l 918 529 l 907 454 q 980 381 950 415 q 1026 313 1010 347 q 1043 236 1043 278 q 1009 99 1043 156 q 920 13 975 42 q 801 -17 865 -17 q 686 1 731 -17 q 611 55 642 19 q 550 140 581 90 l 593 146 q 516 44 557 79 q 426 -3 475 10 q 314 -17 376 -17 m 506 -200 l 517 21 l 624 21 l 635 -200 l 506 -200 m 557 413 q 501 436 524 413 q 478 493 478 460 q 501 553 478 529 q 557 576 524 576 q 615 553 592 576 q 639 493 639 529 q 615 436 639 460 q 557 413 592 413 m 43 658 l 43 765 l 785 765 q 890 772 860 765 q 936 790 921 779 q 960 822 954 804 q 967 858 967 839 q 944 948 967 904 q 876 1038 922 992 l 967 1097 q 1056 967 1032 1025 q 1079 850 1079 910 q 1068 785 1079 824 q 1022 717 1057 747 q 938 672 986 686 q 810 658 890 658 l 43 658 m 1135 286 q 1052 301 1089 286 q 979 349 1015 315 q 897 438 943 382 l 918 529 q 984 448 954 481 q 1047 399 1014 415 q 1124 383 1079 383 q 1208 415 1183 383 q 1233 490 1233 447 q 1200 605 1233 553 q 1110 696 1167 657 l 1185 783 q 1300 658 1254 732 q 1346 492 1346 585 q 1316 374 1346 419 q 1238 308 1286 329 q 1135 286 1190 286 z "},"ಙ":{"ha":1076,"x_min":36,"x_max":1035,"o":"m 779 -17 q 635 20 694 -17 q 528 144 576 57 l 569 144 q 500 47 538 82 q 415 -2 463 13 q 303 -17 367 -17 q 172 13 225 -17 q 94 90 119 43 q 68 189 68 138 q 91 292 68 249 q 157 372 114 335 q 260 446 200 408 q 344 511 313 481 q 376 586 376 542 q 365 637 376 615 q 330 669 354 658 q 264 681 306 681 q 176 655 204 681 q 149 586 149 629 q 156 544 149 564 q 176 504 163 524 l 79 461 q 47 530 57 496 q 36 599 36 564 q 61 689 36 647 q 137 756 86 731 q 265 782 188 782 q 400 753 351 782 q 468 679 449 724 q 488 588 488 635 q 467 498 488 538 q 406 424 446 458 q 311 353 367 389 q 215 279 247 311 q 182 196 182 247 q 218 117 182 142 q 310 93 254 93 q 447 142 403 93 q 497 271 492 190 l 603 271 q 660 135 610 178 q 779 93 711 93 q 889 130 857 93 q 921 215 921 167 q 905 291 921 256 q 861 357 889 326 l 960 421 q 1014 325 993 379 q 1035 210 1035 271 q 1008 93 1035 144 q 924 13 981 42 q 779 -17 868 -17 m 626 364 q 569 388 592 364 q 546 444 546 411 q 569 503 546 479 q 625 528 592 528 q 683 503 660 528 q 707 444 707 479 q 683 388 707 411 q 626 364 660 364 m 740 782 q 871 756 818 782 q 951 683 924 729 q 978 579 978 638 q 973 522 978 550 q 957 469 968 493 l 851 500 q 862 535 858 517 q 865 571 865 553 q 829 653 865 626 q 732 679 793 679 q 582 631 657 679 q 446 492 507 583 l 400 544 l 414 621 q 508 701 461 665 q 612 760 556 738 q 740 782 668 782 z "},"ಚ":{"ha":1107,"x_min":36,"x_max":1065,"o":"m 779 -17 q 677 -1 722 -17 q 596 51 632 15 q 526 144 560 86 l 569 144 q 500 47 538 82 q 415 -2 463 13 q 303 -17 367 -17 q 172 13 225 -17 q 94 90 119 43 q 68 189 68 138 q 91 292 68 249 q 157 372 114 335 q 260 446 200 408 q 344 511 313 481 q 376 586 376 542 q 365 637 376 615 q 330 669 354 658 q 264 681 306 681 q 176 655 204 681 q 149 586 149 629 q 156 544 149 564 q 176 504 163 524 l 79 461 q 47 530 57 496 q 36 599 36 564 q 61 689 36 647 q 137 756 86 731 q 265 782 188 782 q 400 752 351 782 q 469 678 449 722 q 489 588 489 633 q 467 498 489 538 q 406 424 446 458 q 311 353 367 389 q 215 279 247 311 q 182 196 182 247 q 218 117 182 142 q 310 93 254 93 q 447 142 403 93 q 497 271 492 190 l 603 271 q 660 135 610 178 q 779 93 711 93 q 889 131 857 93 q 921 219 921 168 q 902 308 921 267 q 848 382 883 349 q 761 436 813 415 l 838 489 q 943 415 899 454 q 1011 330 988 376 q 1035 222 1035 283 q 1008 98 1035 151 q 924 14 981 44 q 779 -17 868 -17 m 610 424 l 610 521 l 785 521 q 811 549 801 532 q 821 589 821 567 q 814 628 821 608 q 794 663 807 647 l 861 676 l 901 669 q 924 628 917 651 q 931 588 931 606 q 925 549 931 565 q 913 521 919 533 l 1060 521 l 1060 424 l 1001 424 q 945 426 974 424 q 889 431 917 428 l 860 425 l 610 424 m 610 658 l 610 765 l 772 765 q 876 772 846 765 q 922 790 907 779 q 947 822 940 804 q 953 858 953 839 q 931 948 953 904 q 863 1038 908 992 l 953 1097 q 1042 967 1018 1025 q 1065 850 1065 910 q 1054 785 1065 824 q 1008 717 1043 747 q 924 672 972 686 q 797 658 876 658 l 610 658 z "},"ಛ":{"ha":1171,"x_min":58,"x_max":1114,"o":"m 350 -17 q 233 7 286 -17 q 140 77 179 31 q 80 193 101 124 q 58 354 58 263 q 99 588 58 492 q 210 733 140 683 q 365 782 281 782 q 510 732 457 782 q 563 596 563 682 q 535 489 563 536 q 455 414 508 442 q 322 386 401 386 q 194 418 246 386 q 114 483 142 450 l 147 575 q 183 537 161 558 q 237 499 204 515 q 314 483 269 483 q 421 514 388 483 q 454 592 454 544 q 428 660 454 636 q 363 685 403 685 q 276 654 319 685 q 202 551 232 624 q 172 350 172 478 q 187 227 172 276 q 227 148 201 178 q 284 106 253 118 q 349 93 315 93 q 492 146 443 93 q 550 271 540 199 l 656 271 q 713 135 663 178 q 832 93 764 93 q 954 147 908 93 q 1000 292 1000 201 q 965 458 1000 383 q 865 585 929 532 q 714 663 800 638 l 906 668 q 1019 573 972 626 q 1090 451 1065 519 q 1114 299 1114 383 q 1080 133 1114 204 q 982 23 1046 63 q 826 -17 918 -17 q 687 20 746 -17 q 579 146 628 57 l 625 144 q 550 47 589 82 q 463 -2 511 13 q 350 -17 414 -17 m 539 -200 l 550 21 l 657 21 l 668 -200 l 539 -200 m 651 658 l 651 765 l 808 765 q 913 772 882 765 q 958 790 943 779 q 983 822 976 804 q 989 858 989 839 q 967 948 989 904 q 899 1038 944 992 l 989 1097 q 1078 967 1054 1025 q 1101 850 1101 910 q 1090 785 1101 824 q 1044 717 1079 747 q 960 672 1008 686 q 833 658 913 658 l 651 658 z "},"ಜ":{"ha":1076,"x_min":36,"x_max":1035,"o":"m 779 -17 q 635 20 694 -17 q 528 144 576 57 l 571 144 q 501 47 539 82 q 415 -2 463 13 q 303 -17 367 -17 q 172 13 225 -17 q 94 90 119 43 q 68 189 68 138 q 91 292 68 249 q 157 372 114 335 q 260 446 200 408 q 344 511 313 481 q 376 586 376 542 q 365 637 376 615 q 330 669 354 658 q 264 681 306 681 q 176 655 204 681 q 149 586 149 629 q 156 544 149 564 q 176 504 163 524 l 79 461 q 47 530 57 496 q 36 599 36 564 q 61 689 36 647 q 137 756 86 731 q 265 782 188 782 q 400 753 351 782 q 468 679 449 724 q 488 588 488 635 q 467 498 488 538 q 406 424 446 458 q 311 353 367 389 q 215 279 247 311 q 182 196 182 247 q 218 117 182 142 q 310 93 254 93 q 447 142 403 93 q 497 271 492 190 l 603 271 q 660 135 610 178 q 779 93 711 93 q 889 130 857 93 q 921 215 921 167 q 905 291 921 256 q 861 357 889 326 l 960 421 q 1014 325 993 379 q 1035 210 1035 271 q 1008 93 1035 144 q 924 13 981 42 q 779 -17 868 -17 m 718 432 q 578 458 638 432 q 477 525 518 485 q 411 608 436 565 l 386 651 l 439 710 q 579 572 511 608 q 708 535 647 535 q 805 561 769 535 q 840 644 840 588 q 833 704 840 675 q 815 750 825 733 l 924 782 q 945 722 936 760 q 954 650 954 685 q 926 533 954 582 q 847 458 899 483 q 718 432 794 432 z "},"ಝ":{"ha":1915,"x_min":58,"x_max":1864,"o":"m 453 -17 q 251 26 340 -17 q 110 152 161 69 q 58 354 58 235 q 80 494 58 433 q 140 601 101 556 q 233 678 179 647 l 258 658 l 58 658 l 58 765 l 553 765 q 658 772 628 765 q 704 790 689 779 q 728 822 722 804 q 735 858 735 839 q 713 948 735 904 q 644 1038 690 992 l 735 1097 q 824 967 800 1025 q 847 850 847 910 q 836 785 847 824 q 790 717 825 747 q 747 687 772 700 q 689 667 722 674 l 682 678 q 772 599 735 644 q 828 494 808 554 q 847 354 847 435 q 800 163 847 246 q 665 31 753 79 q 453 -17 576 -17 m 454 96 q 610 134 549 96 q 703 236 672 172 q 733 378 733 300 q 697 531 733 468 q 597 628 660 594 q 456 661 535 661 q 306 626 369 661 q 207 527 242 590 q 172 378 172 464 q 249 169 172 243 q 454 96 326 96 m 1253 -200 l 1264 21 l 1371 21 l 1382 -200 l 1253 -200 m 1065 -17 q 881 37 960 -17 q 739 171 803 90 l 810 246 q 929 133 868 172 q 1071 93 990 93 q 1199 147 1153 93 q 1244 292 1244 201 q 1210 463 1244 389 q 1114 590 1175 536 q 972 678 1053 643 l 1032 785 q 1200 669 1126 739 q 1316 507 1274 600 q 1358 299 1358 414 q 1326 137 1358 208 q 1230 24 1294 65 q 1065 -17 1165 -17 m 1571 -17 q 1387 37 1465 -17 q 1244 171 1308 90 l 1315 246 q 1435 133 1374 172 q 1575 93 1496 93 q 1704 147 1658 93 q 1750 292 1750 201 q 1715 463 1750 389 q 1619 590 1681 536 q 1478 678 1558 643 l 1538 785 q 1706 669 1632 739 q 1822 507 1779 600 q 1864 299 1864 414 q 1832 137 1864 208 q 1735 24 1800 65 q 1571 -17 1669 -17 z "},"ಞ":{"ha":1342,"x_min":36,"x_max":1304,"o":"m 446 -17 q 295 10 354 -17 q 208 85 236 38 q 179 194 179 133 q 247 338 179 285 q 438 392 314 392 q 583 369 518 392 q 702 303 649 346 q 797 201 756 261 q 867 80 840 144 q 907 -54 893 15 l 792 -76 q 727 111 772 28 q 610 242 682 194 q 438 290 539 290 q 329 265 367 290 q 292 196 292 240 q 330 117 292 146 q 453 88 368 88 q 626 117 556 88 q 740 197 696 146 q 803 313 783 247 q 822 450 822 378 q 781 619 822 567 q 667 672 739 672 q 567 628 606 672 q 518 511 528 585 l 408 511 q 358 631 399 590 q 258 672 317 672 q 176 645 203 672 q 150 574 150 618 q 158 520 150 547 q 174 476 165 493 l 68 443 q 46 503 56 469 q 36 582 36 538 q 65 688 36 643 q 143 758 94 733 q 250 782 192 782 q 347 766 306 782 q 422 714 389 750 q 485 619 456 678 l 442 613 q 511 719 472 683 q 593 769 550 756 q 678 782 636 782 q 808 745 751 782 q 896 633 865 708 q 903 622 899 628 q 910 608 908 615 q 929 533 922 574 q 936 450 936 492 q 924 338 936 397 q 883 222 911 279 q 806 117 854 165 l 776 96 q 638 16 719 49 q 446 -17 557 -17 m 1092 782 q 1199 758 1151 782 q 1276 688 1247 733 q 1304 582 1304 643 q 1294 503 1304 538 q 1272 443 1285 469 l 1167 476 q 1183 520 1175 493 q 1190 574 1190 547 q 1165 645 1190 618 q 1083 672 1139 672 q 1010 652 1044 672 q 956 592 976 632 q 933 494 935 553 l 878 656 q 936 729 906 701 q 1005 769 967 757 q 1092 782 1043 782 z "},"ಟ":{"ha":1132,"x_min":56,"x_max":1085,"o":"m 338 -17 q 224 3 275 -17 q 134 64 172 24 q 76 163 96 104 q 56 300 56 222 q 90 478 56 400 q 188 600 125 556 q 338 644 251 644 q 437 624 394 644 q 503 565 479 603 q 526 475 526 528 q 501 379 526 421 q 424 314 475 338 q 299 290 374 290 q 178 319 226 290 q 103 381 129 349 l 131 472 q 188 417 149 447 q 289 388 226 388 q 388 410 357 388 q 418 469 418 432 q 394 527 418 507 q 335 547 371 547 q 239 513 276 547 q 184 421 201 478 q 167 299 167 364 l 167 285 q 181 192 167 229 q 221 134 196 156 q 280 103 246 113 q 351 93 314 93 q 490 144 444 93 q 547 271 535 194 l 654 271 q 713 135 663 178 q 829 93 763 93 q 938 132 906 93 q 971 225 971 171 q 945 321 971 279 q 878 390 919 363 q 786 426 836 417 l 881 489 q 995 421 950 461 q 1063 329 1040 381 q 1085 217 1085 278 q 1024 49 1085 115 q 836 -17 964 -17 q 731 0 776 -17 q 648 52 685 17 q 579 142 611 88 l 625 143 q 542 48 583 83 q 452 -2 501 13 q 338 -17 403 -17 m 263 572 q 153 646 188 596 q 118 744 118 696 q 140 823 118 788 q 211 881 161 858 q 344 907 261 904 l 356 799 q 258 780 288 797 q 228 729 228 763 q 256 674 228 697 q 342 636 285 650 l 263 572 m 692 425 l 692 529 l 771 529 q 864 538 831 529 q 915 564 897 546 q 938 598 931 579 q 944 639 944 617 q 915 722 944 685 q 792 778 885 760 l 831 883 q 1002 796 946 858 q 1058 651 1058 733 q 1024 532 1058 590 q 907 444 989 474 q 875 434 889 439 q 845 427 861 429 q 801 425 829 425 l 692 425 z "},"ಠ":{"ha":904,"x_min":58,"x_max":847,"o":"m 453 -17 q 251 26 340 -17 q 110 152 161 69 q 58 354 58 235 q 80 494 58 433 q 140 601 101 556 q 233 678 179 647 l 258 658 l 58 658 l 58 765 l 553 765 q 658 772 628 765 q 704 790 689 779 q 728 822 722 804 q 735 858 735 839 q 713 948 735 904 q 644 1038 690 992 l 735 1097 q 824 967 800 1025 q 847 850 847 910 q 836 785 847 824 q 790 717 825 747 q 747 687 772 700 q 689 667 722 674 l 682 678 q 772 599 735 644 q 828 494 808 554 q 847 354 847 435 q 800 163 847 246 q 665 31 753 79 q 453 -17 576 -17 m 454 96 q 610 133 549 96 q 703 235 672 171 q 733 378 733 300 q 697 531 733 468 q 597 628 660 594 q 456 661 535 661 q 306 626 369 661 q 207 527 242 590 q 172 378 172 464 q 249 169 172 243 q 454 96 326 96 m 453 301 q 396 325 419 301 q 372 383 372 349 q 396 442 372 418 q 453 465 419 465 q 510 442 488 465 q 533 383 533 418 q 510 325 533 349 q 453 301 488 301 z "},"ಡ":{"ha":1067,"x_min":58,"x_max":1013,"o":"m 300 -17 q 125 64 192 -17 q 58 306 58 144 q 83 464 58 392 q 156 591 107 536 q 274 676 204 646 l 294 658 l 58 658 l 58 765 l 719 765 q 824 772 793 765 q 869 790 856 779 q 894 822 889 804 q 900 858 900 839 q 878 948 900 904 q 810 1038 856 992 l 900 1097 q 989 967 965 1025 q 1013 850 1013 910 q 1001 785 1013 824 q 956 717 990 747 q 922 693 942 704 q 876 674 901 682 q 818 663 851 667 l 822 678 q 901 625 871 658 q 947 551 932 592 q 961 468 961 511 q 958 424 961 443 q 943 382 954 404 q 933 372 940 376 q 924 363 926 368 q 857 296 900 322 q 753 269 814 269 q 669 285 707 269 q 607 335 631 301 q 583 418 583 368 q 631 524 583 490 q 742 558 679 558 q 822 547 789 558 q 879 517 854 535 q 977 412 942 482 q 1013 256 1013 342 q 980 113 1013 174 q 892 17 947 51 q 764 -17 836 -17 q 613 20 669 -17 q 508 144 557 57 l 553 151 q 481 44 521 81 q 396 -4 442 8 q 300 -17 350 -17 m 315 93 q 425 140 385 93 q 478 256 465 186 l 583 256 q 644 132 597 171 q 753 93 690 93 q 830 110 794 93 q 887 163 865 126 q 908 257 908 199 q 892 359 908 310 q 841 441 875 408 q 754 474 807 474 q 706 459 725 474 q 688 418 688 444 q 706 372 688 388 q 760 357 724 357 q 806 367 782 357 q 847 402 831 378 q 864 468 864 426 q 842 545 864 510 q 781 607 821 581 q 688 647 742 633 q 571 661 635 661 l 522 661 q 371 635 436 661 q 261 560 306 608 q 194 447 217 513 q 172 306 172 382 q 210 142 172 190 q 315 93 247 93 z "},"ಢ":{"ha":1067,"x_min":58,"x_max":1013,"o":"m 300 -17 q 125 64 192 -17 q 58 306 58 144 q 83 464 58 392 q 156 591 107 536 q 274 676 204 646 l 294 658 l 58 658 l 58 765 l 719 765 q 824 772 793 765 q 869 790 856 779 q 894 822 889 804 q 900 858 900 839 q 878 948 900 904 q 810 1038 856 992 l 900 1097 q 989 967 965 1025 q 1013 850 1013 910 q 1001 785 1013 824 q 956 717 990 747 q 922 693 942 704 q 876 674 901 682 q 818 663 851 667 l 822 678 q 901 625 871 658 q 947 551 932 592 q 961 468 961 511 q 958 424 961 443 q 943 382 954 404 q 933 372 940 376 q 924 363 926 368 q 857 296 900 322 q 753 269 814 269 q 669 285 707 269 q 607 335 631 301 q 583 418 583 368 q 631 524 583 490 q 742 558 679 558 q 822 547 789 558 q 879 517 854 535 q 977 412 942 482 q 1013 256 1013 342 q 980 113 1013 174 q 892 17 947 51 q 764 -17 836 -17 q 613 20 669 -17 q 508 144 557 57 l 553 151 q 481 44 521 81 q 396 -4 442 8 q 300 -17 350 -17 m 315 93 q 425 140 385 93 q 478 256 465 186 l 583 256 q 644 132 597 171 q 753 93 690 93 q 830 110 794 93 q 887 163 865 126 q 908 257 908 199 q 892 359 908 310 q 841 441 875 408 q 754 474 807 474 q 706 459 725 474 q 688 418 688 444 q 706 372 688 388 q 760 357 724 357 q 806 367 782 357 q 847 402 831 378 q 864 468 864 426 q 842 545 864 510 q 781 607 821 581 q 688 647 742 633 q 571 661 635 661 l 522 661 q 371 635 436 661 q 261 560 306 608 q 194 447 217 513 q 172 306 172 382 q 210 142 172 190 q 315 93 247 93 m 467 -200 l 478 21 l 585 21 l 596 -200 l 467 -200 z "},"ಣ":{"ha":1200,"x_min":43,"x_max":1142,"o":"m 836 -17 q 658 43 726 -17 q 590 206 590 103 q 642 347 590 289 q 779 406 693 406 q 897 371 853 406 q 940 276 940 336 q 935 231 940 254 q 922 194 931 208 l 826 203 q 833 224 831 213 q 836 247 836 236 q 820 293 836 278 q 776 308 804 308 q 719 283 742 308 q 696 210 696 258 q 729 122 696 157 q 839 88 763 88 q 937 113 894 88 q 1003 197 979 139 q 1028 351 1028 256 l 1028 363 q 1003 525 1028 456 q 929 633 978 594 q 810 672 881 672 q 680 626 728 672 q 621 496 632 579 l 515 496 q 453 629 504 586 q 317 672 403 672 q 203 638 240 672 q 165 544 165 603 q 174 497 165 519 q 203 456 183 474 q 255 426 222 438 q 349 414 288 414 l 371 414 l 371 317 l 332 317 q 242 308 272 317 q 192 282 211 300 q 165 247 174 268 q 157 197 157 225 q 183 121 157 154 q 268 88 208 88 q 344 101 310 88 q 417 146 378 115 l 483 61 q 383 5 439 26 q 264 -17 328 -17 q 97 42 150 -17 q 43 183 43 100 q 60 268 43 231 q 113 334 78 306 q 204 379 149 363 l 201 346 q 117 401 150 369 q 67 472 83 432 q 51 558 51 513 q 83 673 51 622 q 174 753 115 724 q 310 782 232 782 q 474 744 408 782 q 590 621 540 707 l 550 622 q 615 712 578 676 q 703 765 653 747 q 818 782 753 782 q 994 728 922 782 q 1104 579 1067 675 q 1142 356 1142 483 q 1124 207 1142 275 q 1068 89 1106 139 q 973 11 1031 39 q 836 -17 915 -17 z "},"ತ":{"ha":864,"x_min":46,"x_max":811,"o":"m 428 -17 q 260 6 332 -17 q 140 69 188 28 q 69 163 93 110 q 46 279 46 217 q 48 320 46 299 q 54 360 50 342 l 164 344 q 160 318 161 331 q 158 290 158 306 q 170 219 158 254 q 212 156 182 185 q 294 110 242 128 q 426 93 346 93 q 570 111 514 93 q 657 158 626 129 q 699 221 688 188 q 711 285 711 254 q 703 346 711 317 q 676 399 696 375 q 665 408 671 404 q 654 417 660 411 q 591 452 628 439 q 503 465 554 465 q 419 451 444 465 q 394 408 394 436 q 417 367 394 382 q 485 353 440 353 q 563 372 532 353 q 610 424 594 390 q 626 500 626 457 q 599 591 626 554 q 535 649 572 628 q 469 675 499 669 l 635 683 q 704 606 679 654 q 729 493 729 558 q 728 472 729 482 q 726 456 728 463 l 718 417 q 663 322 701 358 q 576 269 625 286 q 475 251 526 251 q 335 291 386 251 q 283 407 283 331 q 304 484 283 450 q 370 538 325 518 q 488 558 415 558 q 583 549 539 558 q 661 521 626 539 q 669 517 665 519 q 678 513 674 515 q 686 508 682 511 q 781 412 750 471 q 811 288 811 353 q 788 160 811 217 q 718 65 765 104 q 599 4 671 25 q 428 -17 526 -17 m 54 658 l 54 765 l 518 765 q 624 772 593 765 q 668 790 654 779 q 693 822 688 804 q 699 858 699 839 q 676 948 699 904 q 608 1038 654 992 l 699 1097 q 788 967 764 1025 q 811 850 811 910 q 801 785 811 824 q 754 717 790 747 q 672 672 719 686 q 543 658 624 658 l 54 658 z "},"ಥ":{"ha":1063,"x_min":58,"x_max":1004,"o":"m 300 -17 q 125 64 192 -17 q 58 306 58 144 q 83 464 58 392 q 156 591 107 536 q 274 676 204 646 l 294 658 l 58 658 l 58 765 l 711 765 q 816 772 785 765 q 861 790 847 779 q 886 822 881 804 q 892 858 892 839 q 869 948 892 904 q 801 1038 847 992 l 892 1097 q 981 967 957 1025 q 1004 850 1004 910 q 993 785 1004 824 q 947 717 982 747 q 913 693 933 704 q 868 674 893 682 q 810 663 843 667 l 811 671 q 914 585 871 639 q 981 460 957 531 q 1004 306 1004 389 q 937 64 1004 144 q 757 -17 869 -17 q 653 -1 697 -17 q 575 51 610 15 q 508 144 540 86 l 553 151 q 481 44 521 81 q 396 -4 442 8 q 300 -17 350 -17 m 315 93 q 425 140 385 93 q 478 256 465 186 l 583 256 q 643 132 597 171 q 746 93 689 93 q 851 140 813 93 q 890 301 890 188 q 869 439 890 374 q 804 554 847 504 q 697 633 761 604 q 546 661 632 661 l 522 661 q 371 635 436 661 q 261 560 306 608 q 194 447 217 511 q 172 304 172 382 q 210 142 172 190 q 315 93 247 93 m 531 343 q 474 367 497 343 q 450 425 450 390 q 474 483 450 460 q 531 507 497 507 q 588 483 565 507 q 611 425 611 460 q 588 367 611 390 q 531 343 565 343 m 467 -200 l 478 21 l 585 21 l 596 -200 l 467 -200 z "},"ದ":{"ha":1063,"x_min":58,"x_max":1004,"o":"m 300 -17 q 125 64 192 -17 q 58 306 58 144 q 83 464 58 392 q 156 591 107 536 q 274 676 204 646 l 294 658 l 58 658 l 58 765 l 711 765 q 816 772 785 765 q 861 790 847 779 q 886 822 881 804 q 892 858 892 839 q 869 948 892 904 q 801 1038 847 992 l 892 1097 q 981 967 957 1025 q 1004 850 1004 910 q 993 785 1004 824 q 947 717 982 747 q 913 693 933 704 q 868 674 893 682 q 810 663 843 667 l 811 671 q 914 585 871 639 q 981 460 957 531 q 1004 306 1004 389 q 937 64 1004 144 q 757 -17 869 -17 q 653 -1 697 -17 q 575 51 610 15 q 508 144 540 86 l 553 151 q 481 44 521 81 q 396 -4 442 8 q 300 -17 350 -17 m 315 93 q 428 142 385 93 q 478 271 471 190 l 583 271 q 640 135 590 178 q 746 93 689 93 q 851 140 813 93 q 890 301 890 188 q 869 439 890 374 q 804 554 847 504 q 697 633 761 604 q 546 661 632 661 l 522 661 q 371 635 436 661 q 261 560 306 608 q 194 447 217 511 q 172 304 172 382 q 210 142 172 190 q 315 93 247 93 z "},"ಧ":{"ha":1063,"x_min":58,"x_max":1004,"o":"m 300 -17 q 125 64 192 -17 q 58 306 58 144 q 83 464 58 392 q 156 591 107 536 q 274 676 204 646 l 294 658 l 58 658 l 58 765 l 711 765 q 816 772 785 765 q 861 790 847 779 q 886 822 881 804 q 892 858 892 839 q 869 948 892 904 q 801 1038 847 992 l 892 1097 q 981 967 957 1025 q 1004 850 1004 910 q 993 785 1004 824 q 947 717 982 747 q 913 693 933 704 q 868 674 893 682 q 810 663 843 667 l 811 671 q 914 585 871 639 q 981 460 957 531 q 1004 306 1004 389 q 937 64 1004 144 q 757 -17 869 -17 q 653 -1 697 -17 q 575 51 610 15 q 508 144 540 86 l 553 151 q 481 44 521 81 q 396 -4 442 8 q 300 -17 350 -17 m 315 93 q 428 142 385 93 q 478 271 471 190 l 583 271 q 640 135 590 178 q 746 93 689 93 q 851 140 813 93 q 890 301 890 188 q 869 439 890 374 q 804 554 847 504 q 697 633 761 604 q 546 661 632 661 l 522 661 q 371 635 436 661 q 261 560 306 608 q 194 447 217 511 q 172 304 172 382 q 210 142 172 190 q 315 93 247 93 m 467 -200 l 478 21 l 585 21 l 596 -200 l 467 -200 z "},"ನ":{"ha":988,"x_min":43,"x_max":929,"o":"m 671 -17 q 549 11 597 -17 q 469 83 501 39 q 408 174 436 126 q 349 265 374 235 q 302 307 324 296 q 253 318 281 318 q 180 288 206 318 q 154 206 154 258 q 174 115 154 161 q 225 24 193 68 l 117 -19 q 64 83 85 25 q 43 201 43 142 q 71 317 43 267 q 146 395 99 367 q 251 424 193 424 q 388 383 338 424 q 485 260 438 343 q 543 168 517 206 q 602 112 569 131 q 683 93 635 93 q 785 144 756 93 q 815 264 815 194 q 774 444 815 361 q 665 584 733 528 q 510 658 596 640 l 46 658 l 46 765 l 636 765 q 741 772 711 765 q 786 790 771 779 q 810 822 804 804 q 817 858 817 839 q 794 948 817 904 q 726 1038 772 992 l 817 1097 q 906 967 882 1025 q 929 850 929 910 q 918 785 929 824 q 872 717 907 747 q 789 672 838 686 q 660 658 740 658 l 626 658 l 706 671 q 826 565 776 626 q 903 431 876 504 q 929 275 929 358 q 862 61 929 139 q 671 -17 794 -17 z "},"ಪ":{"ha":1100,"x_min":43,"x_max":1044,"o":"m 314 -17 q 174 14 236 -17 q 78 100 113 44 q 43 232 43 156 q 68 342 43 293 q 140 421 93 392 q 254 450 188 450 q 372 415 328 450 q 417 321 417 381 q 413 276 417 299 q 399 239 408 254 l 304 247 q 310 270 307 258 q 313 292 313 282 q 296 338 313 322 q 250 353 279 353 q 178 323 207 353 q 150 236 150 293 q 193 133 150 174 q 325 93 236 93 q 465 142 421 93 q 517 271 510 190 l 622 271 q 677 135 629 178 q 792 93 725 93 q 872 115 842 93 q 917 177 903 138 q 931 265 931 217 q 906 395 931 329 q 814 538 881 461 l 913 604 q 1010 453 976 533 q 1044 275 1044 374 q 1010 110 1044 175 q 921 15 976 46 q 801 -17 865 -17 q 686 1 731 -17 q 611 55 642 19 q 550 140 581 90 l 593 146 q 516 44 557 79 q 426 -3 475 10 q 314 -17 376 -17 m 557 413 q 501 436 524 413 q 478 493 478 460 q 501 553 478 529 q 557 576 524 576 q 615 553 592 576 q 639 493 639 529 q 615 436 639 460 q 557 413 592 413 m 43 658 l 43 765 l 751 765 q 857 772 826 765 q 901 790 888 779 q 926 822 921 804 q 932 858 932 839 q 910 948 932 904 q 842 1038 888 992 l 932 1097 q 1021 967 997 1025 q 1044 850 1044 910 q 1034 785 1044 824 q 988 717 1024 747 q 905 672 953 686 q 776 658 857 658 l 43 658 z "},"ಫ":{"ha":1100,"x_min":43,"x_max":1044,"o":"m 314 -17 q 174 14 236 -17 q 78 100 113 44 q 43 232 43 156 q 68 342 43 293 q 140 421 93 392 q 254 450 188 450 q 372 415 328 450 q 417 321 417 381 q 413 276 417 299 q 399 239 408 254 l 304 247 q 310 270 307 258 q 313 292 313 282 q 296 338 313 322 q 250 353 279 353 q 178 323 207 353 q 150 236 150 293 q 193 133 150 174 q 325 93 236 93 q 465 142 421 93 q 517 271 510 190 l 622 271 q 677 135 629 178 q 792 93 725 93 q 872 115 842 93 q 917 177 903 138 q 931 265 931 217 q 906 395 931 329 q 814 538 881 461 l 913 604 q 1010 453 976 533 q 1044 275 1044 374 q 1010 110 1044 175 q 921 15 976 46 q 801 -17 865 -17 q 686 1 731 -17 q 611 55 642 19 q 550 140 581 90 l 593 146 q 516 44 557 79 q 426 -3 475 10 q 314 -17 376 -17 m 506 -200 l 517 21 l 624 21 l 635 -200 l 506 -200 m 557 413 q 501 436 524 413 q 478 493 478 460 q 501 553 478 529 q 557 576 524 576 q 615 553 592 576 q 639 493 639 529 q 615 436 639 460 q 557 413 592 413 m 43 658 l 43 765 l 751 765 q 857 772 826 765 q 901 790 888 779 q 926 822 921 804 q 932 858 932 839 q 910 948 932 904 q 842 1038 888 992 l 932 1097 q 1021 967 997 1025 q 1044 850 1044 910 q 1034 785 1044 824 q 988 717 1024 747 q 905 672 953 686 q 776 658 857 658 l 43 658 z "},"ಬ":{"ha":1111,"x_min":36,"x_max":1060,"o":"m 774 -17 q 676 -1 719 -17 q 596 51 632 15 q 526 146 560 88 l 571 144 q 501 47 539 82 q 415 -2 463 13 q 303 -17 367 -17 q 172 13 225 -17 q 94 90 119 43 q 68 189 68 138 q 91 292 68 249 q 157 372 114 335 q 260 446 200 408 q 344 511 313 481 q 376 586 376 542 q 365 637 376 615 q 330 669 354 658 q 264 681 306 681 q 176 655 204 681 q 149 586 149 629 q 156 544 149 564 q 176 504 163 524 l 79 461 q 47 530 57 496 q 36 599 36 564 q 61 689 36 647 q 137 756 86 731 q 265 782 188 782 q 400 752 351 782 q 469 678 449 722 q 489 588 489 633 q 467 498 489 538 q 406 424 446 458 q 311 353 367 389 q 215 279 247 311 q 182 196 182 247 q 218 117 182 142 q 310 93 254 93 q 447 142 403 93 q 497 271 492 190 l 603 271 q 660 135 610 178 q 779 93 711 93 q 901 147 856 93 q 946 292 946 201 q 912 463 946 389 q 817 590 878 536 q 674 678 756 643 l 733 785 q 901 669 828 739 q 1017 507 975 600 q 1060 299 1060 414 q 1026 133 1060 204 q 929 23 993 63 q 774 -17 865 -17 z "},"ಭ":{"ha":1118,"x_min":36,"x_max":1061,"o":"m 303 -17 q 172 13 225 -17 q 94 90 119 43 q 68 189 68 138 q 91 292 68 249 q 157 372 114 335 q 260 446 200 408 q 344 511 313 481 q 376 586 376 542 q 365 637 376 615 q 330 669 354 658 q 264 681 306 681 q 176 655 204 681 q 149 586 149 629 q 156 544 149 564 q 176 504 163 524 l 79 461 q 47 530 57 496 q 36 599 36 564 q 61 689 36 647 q 137 756 86 731 q 265 782 188 782 q 400 752 351 782 q 469 678 449 722 q 489 588 489 633 q 467 498 489 538 q 406 424 446 458 q 311 353 367 389 q 215 279 247 311 q 182 196 182 247 q 218 117 182 142 q 310 93 254 93 q 447 142 403 93 q 496 271 490 190 l 603 271 q 660 135 610 178 q 779 93 711 93 q 901 147 856 93 q 947 292 947 201 q 912 458 947 383 q 812 585 876 532 q 661 663 747 638 l 853 671 q 965 574 918 629 q 1036 451 1011 519 q 1061 299 1061 383 q 1027 133 1061 204 q 929 23 993 63 q 774 -17 865 -17 q 634 20 693 -17 q 526 146 575 57 l 571 144 q 501 47 539 82 q 415 -2 463 13 q 303 -17 367 -17 m 485 -200 l 496 21 l 603 21 l 614 -200 l 485 -200 m 599 658 l 599 765 l 754 765 q 860 772 829 765 q 906 790 890 779 q 930 822 924 804 q 936 858 936 839 q 914 948 936 904 q 846 1038 892 992 l 936 1097 q 1025 967 1001 1025 q 1049 850 1049 910 q 1038 785 1049 824 q 992 717 1026 747 q 908 672 956 686 q 781 658 860 658 l 599 658 z "},"ಮ":{"ha":1606,"x_min":43,"x_max":1554,"o":"m 314 -17 q 174 14 236 -17 q 78 100 113 44 q 43 232 43 156 q 68 342 43 293 q 140 421 93 392 q 254 450 188 450 q 372 415 328 450 q 417 321 417 381 q 413 276 417 299 q 399 239 408 254 l 304 247 q 310 269 307 256 q 313 292 313 282 q 296 338 313 322 q 250 353 279 353 q 178 323 207 353 q 149 236 149 293 q 192 133 149 174 q 325 93 236 93 q 465 142 421 93 q 517 271 510 190 l 622 271 q 677 135 629 178 q 792 93 725 93 q 900 144 869 93 q 931 265 931 194 q 902 416 931 347 q 826 538 874 485 q 722 622 779 590 q 608 663 665 654 l 821 671 q 942 565 892 626 q 1018 431 992 504 q 1044 275 1044 358 q 1010 110 1044 175 q 921 15 976 46 q 801 -17 865 -17 q 686 1 731 -17 q 611 55 642 19 q 550 140 581 90 l 593 146 q 516 44 557 79 q 426 -3 475 10 q 314 -17 376 -17 m 43 658 l 43 765 l 751 765 q 857 772 826 765 q 901 790 888 779 q 926 822 921 804 q 932 858 932 839 q 910 948 932 904 q 842 1038 888 992 l 932 1097 q 1021 967 997 1025 q 1044 850 1044 910 q 1034 785 1044 824 q 988 717 1024 747 q 905 672 953 686 q 776 658 857 658 l 43 658 m 1261 -17 q 1076 37 1156 -17 q 935 171 997 90 l 1006 246 q 1124 133 1064 172 q 1265 93 1185 93 q 1394 147 1349 93 q 1440 292 1440 201 q 1406 463 1440 389 q 1310 590 1371 536 q 1168 678 1249 643 l 1228 785 q 1396 669 1322 739 q 1512 507 1469 600 q 1554 299 1554 414 q 1522 137 1554 208 q 1425 24 1490 65 q 1261 -17 1360 -17 z "},"ಯ":{"ha":1856,"x_min":56,"x_max":1804,"o":"m 428 -17 q 254 19 325 -17 q 140 115 183 56 q 76 246 96 175 q 56 388 56 317 q 101 590 56 500 q 231 731 147 679 q 425 782 314 782 q 600 745 529 782 q 714 649 671 708 q 776 519 757 589 q 794 383 794 449 q 749 175 794 265 q 621 34 703 85 q 428 -17 539 -17 m 425 93 q 560 127 503 93 q 649 227 617 161 q 681 388 681 293 q 651 536 681 472 q 565 636 622 600 q 424 672 508 672 q 294 640 351 672 q 203 544 236 608 q 169 385 169 481 q 200 225 169 290 q 288 126 231 160 q 425 93 346 93 m 1001 -17 q 817 37 896 -17 q 675 171 738 90 l 747 246 q 865 133 804 172 q 1003 93 926 93 q 1135 147 1089 93 q 1181 292 1181 201 q 1145 458 1181 383 q 1045 585 1110 532 q 894 663 981 638 l 1086 668 q 1199 573 1153 626 q 1270 451 1246 519 q 1294 299 1294 383 q 1280 187 1294 243 q 1232 85 1265 131 q 1142 11 1199 39 q 1001 -17 1085 -17 m 1511 -17 q 1327 37 1406 -17 q 1185 171 1249 90 l 1256 246 q 1375 133 1314 172 q 1515 93 1436 93 q 1644 147 1599 93 q 1690 292 1690 201 q 1656 463 1690 389 q 1560 590 1621 536 q 1418 678 1499 643 l 1478 785 q 1646 669 1572 739 q 1762 507 1719 600 q 1804 299 1804 414 q 1772 137 1804 208 q 1676 24 1740 65 q 1511 -17 1611 -17 m 1282 850 q 1272 785 1282 824 q 1225 717 1261 747 q 1142 672 1190 686 q 1014 658 1094 658 l 833 658 l 833 765 l 989 765 q 1094 772 1064 765 q 1139 790 1125 779 q 1163 822 1157 804 q 1169 858 1169 839 q 1147 948 1169 904 q 1079 1038 1125 992 l 1169 1097 q 1258 967 1235 1025 q 1282 850 1282 910 z "},"ರ":{"ha":904,"x_min":58,"x_max":847,"o":"m 453 -17 q 251 26 340 -17 q 110 152 161 69 q 58 354 58 235 q 80 494 58 433 q 140 601 101 556 q 233 678 179 647 l 258 658 l 58 658 l 58 765 l 553 765 q 658 772 628 765 q 704 790 689 779 q 728 822 722 804 q 735 858 735 839 q 713 948 735 904 q 644 1038 690 992 l 735 1097 q 824 967 800 1025 q 847 850 847 910 q 836 785 847 824 q 790 717 825 747 q 747 687 772 700 q 689 667 722 674 l 682 678 q 772 599 735 644 q 828 494 808 554 q 847 354 847 435 q 800 163 847 246 q 665 31 753 79 q 453 -17 576 -17 m 454 96 q 610 133 549 96 q 703 235 672 171 q 733 378 733 300 q 697 531 733 468 q 597 628 660 594 q 456 661 535 661 q 306 626 369 661 q 207 527 242 590 q 172 378 172 464 q 249 169 172 243 q 454 96 326 96 z "},"ಱ":{"ha":1240,"x_min":58,"x_max":1182,"o":"m 360 -17 q 240 7 294 -17 q 144 77 185 31 q 81 193 103 124 q 58 354 58 263 q 100 588 58 492 q 212 733 142 683 q 367 782 282 782 q 510 732 457 782 q 563 596 563 682 q 546 515 563 553 q 497 450 529 478 q 427 403 465 419 q 336 386 389 386 q 195 418 247 386 q 115 483 143 450 l 149 575 q 183 537 161 558 q 238 499 206 515 q 314 483 271 483 q 423 514 392 483 q 454 592 454 544 q 429 660 454 636 q 364 685 404 685 q 276 654 321 685 q 202 551 232 624 q 172 350 172 478 q 188 227 172 276 q 230 148 203 178 q 290 106 257 118 q 358 93 324 93 q 470 117 426 93 q 538 181 514 140 q 567 271 561 222 l 674 271 q 703 181 681 222 q 770 117 726 140 q 882 93 814 93 q 951 106 918 93 q 1010 148 983 118 q 1053 227 1038 178 q 1068 350 1068 276 q 1038 551 1068 478 q 964 654 1008 624 q 876 685 919 685 q 812 660 838 685 q 786 592 786 636 q 818 514 786 544 q 926 483 850 483 q 1003 499 971 483 q 1058 537 1036 515 q 1092 575 1079 558 l 1126 483 q 1044 418 1099 450 q 904 386 990 386 q 820 401 856 386 q 753 440 785 415 q 698 509 718 469 q 678 596 678 549 q 731 731 678 681 q 875 782 785 782 q 1029 733 960 782 q 1140 588 1099 683 q 1182 354 1182 492 q 1160 193 1182 263 q 1097 77 1138 124 q 1001 7 1056 31 q 881 -17 946 -17 q 765 -2 815 -17 q 675 47 715 13 q 597 143 635 82 l 643 143 q 565 47 606 82 q 476 -2 525 13 q 360 -17 426 -17 m 336 386 l 425 483 q 469 488 444 486 q 522 490 494 489 q 572 492 549 492 l 668 492 q 715 490 690 492 q 765 486 740 489 q 811 479 790 483 l 904 386 l 336 386 z "},"ಲ":{"ha":1054,"x_min":51,"x_max":1003,"o":"m 521 -17 q 266 40 371 -17 q 106 198 161 97 q 51 428 51 299 q 87 617 51 538 q 187 739 122 696 q 336 782 251 782 q 443 760 399 782 q 511 696 488 738 q 535 596 535 654 q 508 489 535 536 q 427 414 481 442 q 294 386 374 386 q 238 392 264 386 q 190 408 211 397 q 150 429 168 418 l 164 528 q 197 508 178 518 q 238 490 215 497 q 286 483 260 483 q 393 515 360 483 q 426 593 426 546 q 401 661 426 638 q 336 685 376 685 q 250 660 290 685 q 185 578 210 635 q 160 425 160 521 q 201 260 160 335 q 324 140 243 185 q 525 96 406 96 q 723 131 642 96 q 847 231 804 165 q 889 390 889 297 q 833 560 889 489 q 683 682 778 632 l 747 785 q 935 622 868 719 q 1003 390 1003 525 q 953 187 1003 279 q 798 39 904 94 q 521 -17 692 -17 z "},"ಳ":{"ha":986,"x_min":42,"x_max":940,"o":"m 503 -17 q 401 -1 450 -17 q 320 51 351 15 q 289 144 289 86 q 308 210 289 178 q 361 263 326 242 l 353 235 q 192 290 263 249 q 81 393 121 331 q 42 535 42 456 q 71 664 42 608 q 155 751 100 719 q 286 782 210 782 q 383 763 340 782 q 452 708 426 744 q 478 615 478 671 q 456 525 478 567 q 383 458 433 483 q 247 432 333 432 q 175 442 215 432 q 108 468 135 453 l 118 556 q 176 533 146 540 q 235 526 206 526 q 339 551 308 526 q 369 611 369 576 q 344 666 369 647 q 278 685 318 685 q 179 647 215 685 q 143 547 143 608 q 161 462 143 501 q 221 393 179 422 q 333 346 263 364 q 507 324 403 328 q 744 376 667 328 q 822 508 822 424 q 788 606 822 569 q 711 658 754 642 l 578 658 l 578 765 l 646 765 q 751 772 721 765 q 797 790 782 779 q 822 822 815 804 q 828 858 828 839 q 806 948 828 904 q 738 1038 783 992 l 828 1097 q 917 967 893 1025 q 940 850 940 910 q 906 741 940 786 q 813 676 871 696 l 793 717 q 868 663 836 693 q 917 595 900 633 q 935 507 935 557 q 910 392 935 440 q 844 313 885 344 q 756 261 804 281 q 663 233 708 242 l 651 269 q 703 218 686 247 q 721 146 721 189 q 665 28 721 74 q 503 -17 610 -17 m 506 82 q 585 99 556 82 q 614 156 614 117 q 583 215 614 193 q 504 239 553 238 q 423 214 450 236 q 396 156 396 192 q 423 103 396 124 q 506 82 450 82 z "},"ವ":{"ha":1103,"x_min":43,"x_max":1044,"o":"m 314 -17 q 174 14 236 -17 q 78 100 113 44 q 43 232 43 156 q 68 342 43 293 q 140 421 93 392 q 254 450 188 450 q 372 415 328 450 q 417 321 417 381 q 413 276 417 299 q 399 239 408 254 l 304 247 q 310 269 307 256 q 313 292 313 282 q 296 338 313 322 q 250 353 279 353 q 178 323 207 353 q 150 236 150 293 q 193 133 150 174 q 325 93 236 93 q 465 142 421 93 q 517 271 510 190 l 622 271 q 677 135 629 178 q 792 93 725 93 q 900 144 869 93 q 931 265 931 194 q 902 416 931 347 q 826 538 874 485 q 722 622 779 590 q 608 663 665 654 l 821 671 q 942 565 892 626 q 1018 431 992 504 q 1044 275 1044 358 q 1010 110 1044 175 q 921 15 976 46 q 801 -17 865 -17 q 686 1 731 -17 q 611 55 642 19 q 550 140 581 90 l 593 146 q 516 44 557 79 q 426 -3 475 10 q 314 -17 376 -17 m 43 658 l 43 765 l 751 765 q 857 772 826 765 q 901 790 888 779 q 926 822 921 804 q 932 858 932 839 q 910 948 932 904 q 842 1038 888 992 l 932 1097 q 1021 967 997 1025 q 1044 850 1044 910 q 1034 785 1044 824 q 988 717 1024 747 q 905 672 953 686 q 776 658 857 658 l 43 658 z "},"ಶ":{"ha":875,"x_min":43,"x_max":821,"o":"m 374 -17 q 198 10 272 -17 q 83 88 124 36 q 43 219 43 140 q 79 338 43 294 q 176 402 115 381 q 308 433 236 424 q 413 455 374 443 q 469 492 451 467 q 486 561 486 517 q 469 619 486 597 q 425 651 453 640 q 361 661 397 661 q 284 649 313 661 q 244 617 256 638 q 232 571 232 597 q 236 540 232 557 q 250 510 240 524 l 146 467 q 122 524 129 499 q 115 579 115 549 q 141 651 115 617 q 223 706 167 685 q 371 726 279 726 q 476 705 426 726 q 556 643 525 683 q 586 546 586 603 q 556 434 586 478 q 472 367 526 390 q 347 336 418 344 q 240 315 282 328 q 177 279 197 301 q 157 219 157 257 q 178 153 157 182 q 247 109 199 125 q 374 93 294 93 q 552 124 478 93 q 667 217 626 156 q 707 369 707 279 q 680 514 707 456 q 614 609 653 572 q 540 665 575 646 l 546 696 l 638 696 q 742 605 701 657 q 801 493 782 553 q 821 368 821 433 q 769 161 821 247 q 617 29 717 75 q 374 -17 518 -17 m 43 658 l 43 765 l 532 765 q 635 772 607 765 q 678 790 663 779 q 702 822 696 804 q 708 858 708 839 q 686 948 708 904 q 618 1038 664 992 l 708 1097 q 797 967 774 1025 q 821 850 821 910 q 810 785 821 824 q 764 717 799 746 q 721 688 746 701 q 653 667 696 675 q 542 658 611 658 l 497 658 l 346 676 l 208 658 l 43 658 z "},"ಷ":{"ha":1113,"x_min":43,"x_max":1058,"o":"m 314 -17 q 174 14 236 -17 q 78 100 113 44 q 43 232 43 156 q 68 342 43 293 q 140 421 93 392 q 254 450 188 450 q 372 415 328 450 q 417 321 417 381 q 413 276 417 299 q 399 239 408 254 l 304 247 q 310 270 307 258 q 313 292 313 282 q 296 338 313 322 q 250 353 279 353 q 178 323 207 353 q 150 236 150 293 q 193 133 150 174 q 325 93 236 93 q 465 142 421 93 q 517 271 510 190 l 622 271 q 678 135 629 178 q 799 92 726 92 q 886 113 854 92 q 932 172 918 133 q 946 265 946 211 q 919 396 946 329 q 826 538 893 463 l 925 604 q 1023 453 989 533 q 1057 275 1057 374 q 1026 120 1057 182 q 947 26 996 58 q 903 3 926 13 q 857 -12 881 -7 q 808 -17 833 -17 q 690 1 735 -17 q 613 54 644 19 q 550 139 582 89 l 593 146 q 516 44 557 79 q 426 -3 475 10 q 314 -17 376 -17 m 557 413 q 501 436 524 413 q 478 493 478 460 q 501 553 478 529 q 557 576 524 576 q 615 553 592 576 q 639 493 639 529 q 615 436 639 460 q 557 413 592 413 m 961 -76 l 885 36 l 869 61 l 658 367 l 751 425 l 963 111 l 982 90 l 1056 -17 l 961 -76 m 43 658 l 43 765 l 765 765 q 871 772 840 765 q 915 790 901 779 q 940 822 933 804 q 946 858 946 839 q 924 948 946 904 q 856 1038 901 992 l 946 1097 q 1035 967 1011 1025 q 1058 850 1058 910 q 1047 785 1058 824 q 1001 717 1036 747 q 919 672 967 686 q 790 658 871 658 l 43 658 z "},"ಸ":{"ha":985,"x_min":43,"x_max":931,"o":"m 671 -17 q 549 11 597 -17 q 469 83 501 39 q 408 174 436 126 q 349 265 374 235 q 302 307 324 296 q 253 318 281 318 q 180 288 206 318 q 154 206 154 258 q 174 115 154 161 q 225 24 193 68 l 117 -19 q 64 84 85 25 q 43 203 43 143 q 71 317 43 267 q 146 395 99 367 q 251 424 193 424 q 350 406 310 424 q 422 351 390 388 q 485 260 453 315 q 544 168 517 206 q 603 112 571 131 q 681 93 635 93 q 783 143 750 93 q 817 269 817 193 q 792 397 817 332 q 700 538 767 463 l 794 604 q 895 454 860 533 q 931 282 931 375 q 863 62 931 140 q 671 -17 794 -17 m 474 438 q 417 461 440 438 q 393 519 393 485 q 417 578 393 554 q 474 601 440 601 q 531 578 508 601 q 554 519 554 554 q 531 461 554 485 q 474 438 508 438 m 44 658 l 44 765 l 636 765 q 742 772 711 765 q 788 790 772 779 q 812 822 806 804 q 818 858 818 839 q 796 948 818 904 q 728 1038 774 992 l 818 1097 q 907 967 883 1025 q 931 850 931 910 q 919 785 931 824 q 874 717 908 747 q 790 672 838 686 q 663 658 742 658 l 44 658 z "},"ಹ":{"ha":1113,"x_min":46,"x_max":1067,"o":"m 321 -17 q 120 54 194 -17 q 46 251 46 125 q 119 446 46 371 q 328 521 193 521 q 402 511 368 521 q 463 483 436 501 q 510 439 490 465 l 504 438 q 506 451 506 440 q 507 465 507 461 q 490 541 507 506 q 443 603 474 576 q 373 647 413 631 q 288 668 333 664 l 501 675 q 558 631 533 658 q 598 565 583 603 q 613 476 613 526 q 611 455 613 467 q 608 438 610 443 l 606 439 q 658 483 629 465 q 722 511 686 501 q 800 521 757 521 q 999 444 931 521 q 1067 251 1067 368 q 994 59 1067 135 q 786 -17 921 -17 q 675 2 724 -17 q 593 57 626 21 q 542 142 560 93 l 568 140 q 516 59 550 94 q 433 3 482 24 q 321 -17 385 -17 m 329 88 q 461 134 419 88 q 503 251 503 181 q 458 372 503 328 q 335 417 414 417 q 235 395 274 417 q 178 337 196 374 q 160 254 160 300 q 206 133 160 178 q 329 88 251 88 m 779 88 q 910 134 868 88 q 953 251 953 181 q 933 340 953 303 q 875 397 913 376 q 783 417 838 417 q 653 370 696 417 q 610 254 610 324 q 655 133 610 178 q 779 88 700 88 m 47 658 l 47 765 l 774 765 q 878 772 847 765 q 924 790 908 779 q 948 822 942 804 q 954 858 954 839 q 932 948 954 904 q 864 1038 910 992 l 954 1097 q 1043 967 1019 1025 q 1067 850 1067 910 q 1056 785 1067 824 q 1010 717 1044 747 q 926 672 974 686 q 799 658 878 658 l 47 658 z "},"಼":{"ha":0,"x_min":-622,"x_max":-153,"o":"m -235 -253 q -291 -228 -268 -253 q -314 -171 -314 -204 q -291 -112 -314 -136 q -235 -89 -268 -89 q -176 -112 -200 -89 q -153 -171 -153 -136 q -176 -228 -153 -204 q -235 -253 -200 -253 m -543 -253 q -599 -228 -576 -253 q -622 -171 -622 -204 q -599 -112 -622 -136 q -543 -89 -576 -89 q -485 -112 -508 -89 q -461 -171 -461 -136 q -485 -228 -461 -204 q -543 -253 -508 -253 z "},"ಽ":{"ha":619,"x_min":22,"x_max":575,"o":"m 318 -17 q 173 17 236 -17 q 72 112 110 50 q 22 263 33 174 l 138 271 q 195 135 144 178 q 318 93 246 93 q 428 124 394 93 q 461 200 461 154 q 440 267 461 240 q 375 317 419 293 q 260 371 331 340 q 130 443 175 407 q 67 517 85 479 q 50 597 50 556 q 64 663 50 633 q 101 714 78 692 q 146 742 121 731 q 207 760 171 754 q 294 765 243 765 l 540 765 l 540 658 l 286 658 q 196 647 228 658 q 164 596 164 635 q 180 550 164 571 q 237 507 196 529 q 350 453 278 485 q 465 395 414 426 q 545 318 515 364 q 575 200 575 272 q 546 90 575 139 q 460 12 517 40 q 318 -17 403 -17 z "},"ಾ":{"ha":624,"x_min":-347,"x_max":565,"o":"m 565 335 q 531 144 565 224 q 431 24 497 65 q 271 -17 365 -17 q 141 13 194 -17 q 60 94 88 43 q 33 206 33 144 q 54 307 33 267 q 110 367 75 347 q 188 388 146 388 q 266 362 239 388 q 293 294 293 336 q 272 232 293 256 q 217 208 250 208 q 159 229 179 208 q 139 292 139 250 l 150 294 q 137 256 140 274 q 133 215 133 238 q 165 126 133 165 q 272 86 196 86 q 367 113 328 86 q 429 196 407 140 q 451 335 451 251 q 432 471 451 413 q 374 569 413 529 q 311 619 346 600 q 222 649 276 639 q 83 658 168 658 l -347 658 l -347 765 l 110 765 q 269 751 203 765 q 384 709 336 738 q 468 639 432 681 q 540 510 515 588 q 565 335 565 433 z "},"ಿ":{"ha":454,"x_min":-140,"x_max":424,"o":"m 165 432 q 27 458 86 432 q -73 524 -32 483 q -140 606 -114 564 l -82 667 q 1 588 -40 617 q 81 547 42 558 q 156 535 119 535 q 244 551 208 535 q 297 601 279 567 q 315 690 315 635 l 315 704 q 294 804 315 761 q 238 872 272 847 q 163 896 203 896 q 93 877 117 896 q 69 826 69 858 q 83 783 69 799 q 116 763 97 768 q 150 757 135 757 q 253 783 214 757 q 324 854 293 810 l 367 790 q 321 734 349 764 q 251 684 293 704 q 150 664 210 664 q 60 681 103 664 q -10 731 17 697 q -36 819 -36 765 q 17 940 -36 890 q 163 989 71 989 q 299 951 240 989 q 391 849 358 914 q 424 700 424 783 q 391 547 424 607 q 301 460 358 488 q 165 432 243 432 z "},"ೀ":{"ha":1011,"x_min":-140,"x_max":975,"o":"m 165 432 q 27 458 86 432 q -73 524 -32 483 q -140 606 -114 564 l -82 667 q 1 588 -40 617 q 81 547 42 558 q 156 535 119 535 q 244 551 208 535 q 297 601 279 567 q 315 690 315 635 l 315 704 q 294 804 315 761 q 238 872 272 847 q 163 896 203 896 q 93 877 117 896 q 69 826 69 858 q 83 783 69 799 q 116 763 97 768 q 150 757 135 757 q 253 783 214 757 q 324 854 293 810 l 367 790 q 321 734 349 764 q 251 684 293 704 q 150 664 210 664 q 60 681 103 664 q -10 731 17 697 q -36 819 -36 765 q 17 940 -36 890 q 163 989 71 989 q 299 951 240 989 q 391 849 358 914 q 424 700 424 783 q 391 547 424 607 q 301 460 358 488 q 165 432 243 432 m 975 597 q 947 490 975 538 q 865 414 919 442 q 732 386 811 386 q 602 419 654 386 q 522 485 550 451 l 557 576 q 591 538 569 560 q 645 499 613 515 q 722 483 678 483 q 829 515 796 483 q 863 593 863 546 q 839 661 863 638 q 767 685 815 685 q 688 660 725 685 q 628 585 651 635 q 604 465 604 536 l 604 450 q 640 291 604 358 q 737 174 675 224 q 879 89 799 125 l 819 -17 q 651 95 725 29 q 536 249 578 161 q 494 449 494 336 q 531 626 494 551 q 629 741 567 700 q 772 782 692 782 q 883 758 838 782 q 951 694 928 735 q 975 597 975 653 z "},"ು":{"ha":506,"x_min":-165,"x_max":454,"o":"m 161 -17 q -24 37 56 -17 q -165 171 -103 90 l -94 246 q 24 133 -36 172 q 165 93 85 93 q 294 147 249 93 q 340 292 340 201 q 306 463 340 389 q 210 590 271 536 q 68 678 149 643 l 128 785 q 296 669 222 739 q 412 507 369 600 q 454 299 454 414 q 422 137 454 208 q 325 24 390 65 q 161 -17 260 -17 z "},"ೂ":{"ha":1036,"x_min":-165,"x_max":983,"o":"m 125 -17 q -35 32 35 -17 q -165 157 -104 81 l -94 233 q 13 127 -37 161 q 125 93 64 93 q 215 127 188 93 q 242 217 242 161 q 239 306 242 269 q 233 376 236 343 q 231 450 231 410 q 276 628 231 554 q 399 742 321 703 q 579 782 478 782 q 758 747 682 782 q 883 649 833 711 q 958 506 933 588 q 983 331 983 424 q 949 143 983 221 q 849 24 914 65 q 690 -17 783 -17 q 559 13 613 -17 q 478 94 506 43 q 451 206 451 144 q 472 307 451 267 q 528 367 493 347 q 606 388 564 388 q 684 362 657 388 q 711 294 711 336 q 690 232 711 256 q 635 208 668 208 q 577 229 597 208 q 557 292 557 250 l 568 294 q 555 256 558 274 q 551 215 551 238 q 583 126 551 165 q 690 86 614 86 q 786 114 746 86 q 848 196 826 142 q 869 328 869 250 q 839 498 869 419 q 745 625 808 576 q 582 674 682 674 q 455 646 508 674 q 373 565 401 618 q 344 436 344 513 q 347 359 344 392 q 353 294 350 326 q 356 215 356 261 q 322 81 356 132 q 236 7 289 31 q 125 -17 183 -17 z "},"ೃ":{"ha":171,"x_min":-439,"x_max":203,"o":"m -149 -576 q -305 -542 -240 -576 q -404 -446 -369 -507 q -439 -308 -439 -385 q -412 -194 -439 -244 q -338 -113 -386 -143 q -229 -83 -290 -83 q -136 -103 -172 -83 q -83 -156 -100 -122 q -67 -231 -67 -189 q -109 -337 -67 -296 q -246 -378 -151 -378 q -310 -371 -281 -378 q -368 -347 -340 -364 l -385 -246 q -326 -281 -356 -271 q -262 -292 -297 -292 q -188 -275 -211 -292 q -165 -228 -165 -258 q -184 -185 -165 -200 q -232 -169 -203 -169 q -290 -186 -265 -169 q -328 -233 -315 -203 q -342 -306 -342 -264 l -342 -311 q -293 -437 -342 -392 q -150 -482 -244 -482 q -24 -457 -79 -482 q 65 -373 32 -432 q 97 -214 97 -314 q 74 -74 97 -147 q 19 50 51 0 l 115 97 q 160 5 140 54 q 191 -99 179 -44 q 203 -215 203 -154 q 111 -485 203 -393 q -149 -576 19 -576 z "},"ೄ":{"ha":686,"x_min":-439,"x_max":733,"o":"m -149 -576 q -305 -542 -240 -576 q -404 -446 -369 -507 q -439 -308 -439 -385 q -412 -194 -439 -244 q -338 -113 -386 -143 q -229 -83 -290 -83 q -136 -103 -172 -83 q -83 -156 -100 -122 q -67 -231 -67 -189 q -109 -337 -67 -296 q -246 -378 -151 -378 q -310 -371 -281 -378 q -368 -347 -340 -364 l -385 -246 q -326 -281 -356 -271 q -262 -292 -297 -292 q -188 -275 -211 -292 q -165 -228 -165 -258 q -184 -185 -165 -200 q -232 -169 -203 -169 q -290 -186 -265 -169 q -328 -233 -315 -203 q -342 -306 -342 -264 l -342 -311 q -293 -437 -342 -392 q -150 -482 -244 -482 q -24 -457 -79 -482 q 65 -373 32 -432 q 97 -214 97 -314 q 76 -80 97 -150 q 25 40 56 -10 l 82 110 l 136 53 q 183 -73 164 -6 q 203 -215 203 -140 q 111 -485 203 -393 q -149 -576 19 -576 m 483 -479 q 372 -455 417 -479 q 303 -390 326 -431 q 279 -300 279 -349 q 319 -189 279 -226 q 415 -151 360 -151 q 487 -173 463 -151 q 511 -233 511 -194 q 492 -283 511 -264 q 446 -301 474 -301 q 402 -287 421 -301 q 378 -243 383 -274 l 388 -239 q 377 -265 381 -253 q 374 -289 374 -276 q 399 -357 374 -329 q 485 -385 424 -385 q 561 -367 529 -385 q 610 -312 593 -350 q 628 -212 628 -274 q 612 -118 628 -158 q 564 -50 596 -78 q 511 -16 540 -29 q 438 4 482 -3 q 322 11 393 11 l 69 11 l 82 110 l 339 110 q 484 99 426 110 q 581 68 542 89 q 651 15 621 47 q 713 -81 692 -24 q 733 -215 733 -137 q 705 -355 733 -296 q 621 -447 676 -414 q 483 -479 565 -479 z "},"ೆ":{"ha":0,"x_min":-707,"x_max":-42,"o":"m -707 658 l -707 765 l -379 765 q -244 777 -285 765 q -183 810 -203 789 q -160 853 -167 829 q -154 904 -154 878 q -190 995 -154 963 q -283 1028 -226 1028 q -374 997 -337 1028 q -411 926 -411 967 q -411 912 -411 919 q -410 897 -411 904 l -450 956 q -424 960 -436 958 q -401 963 -411 963 q -347 947 -367 963 q -328 903 -328 931 q -349 853 -328 871 q -406 836 -371 836 q -477 870 -456 836 q -499 946 -499 904 q -473 1030 -499 989 q -398 1097 -447 1071 q -276 1124 -349 1124 q -151 1094 -203 1124 q -70 1011 -99 1064 q -42 889 -42 958 q -57 796 -42 838 q -106 724 -72 754 q -167 685 -132 700 q -249 665 -203 671 q -351 658 -294 658 l -707 658 z "},"ೇ":{"ha":567,"x_min":-707,"x_max":531,"o":"m -707 658 l -707 765 l -379 765 q -244 777 -285 765 q -183 810 -203 789 q -160 853 -167 829 q -154 904 -154 878 q -190 995 -154 963 q -283 1028 -226 1028 q -374 997 -337 1028 q -411 926 -411 967 q -411 912 -411 919 q -410 897 -411 904 l -450 956 q -424 960 -436 958 q -401 963 -411 963 q -347 947 -367 963 q -328 903 -328 931 q -349 853 -328 871 q -406 836 -371 836 q -477 870 -456 836 q -499 946 -499 904 q -473 1030 -499 989 q -398 1097 -447 1071 q -276 1124 -349 1124 q -151 1094 -203 1124 q -70 1011 -99 1064 q -42 889 -42 958 q -57 796 -42 838 q -106 724 -72 754 q -167 685 -132 700 q -249 665 -203 671 q -351 658 -294 658 l -707 658 m 531 597 q 503 490 531 538 q 421 414 475 442 q 288 386 367 386 q 158 419 210 386 q 78 485 106 451 l 113 576 q 147 538 125 560 q 201 499 168 515 q 278 483 233 483 q 385 515 351 483 q 418 593 418 546 q 394 661 418 638 q 322 685 371 685 q 244 660 281 685 q 183 585 207 635 q 160 465 160 536 l 160 450 q 195 291 160 358 q 292 174 231 224 q 435 89 354 125 l 375 -17 q 207 95 281 29 q 92 249 133 161 q 50 449 50 336 q 86 626 50 551 q 185 741 122 700 q 328 782 247 782 q 438 758 393 782 q 507 694 483 735 q 531 597 531 653 z "},"ೈ":{"ha":0,"x_min":-707,"x_max":233,"o":"m -707 658 l -707 765 l -379 765 q -244 777 -285 765 q -183 810 -203 789 q -160 853 -167 829 q -154 904 -154 878 q -190 995 -154 963 q -283 1028 -226 1028 q -374 997 -337 1028 q -411 926 -411 967 q -411 912 -411 919 q -410 897 -411 904 l -450 956 q -424 960 -436 958 q -401 963 -411 963 q -347 947 -367 963 q -328 903 -328 931 q -349 853 -328 871 q -406 836 -371 836 q -477 870 -456 836 q -499 946 -499 904 q -473 1030 -499 989 q -398 1097 -447 1071 q -276 1124 -349 1124 q -151 1094 -203 1124 q -70 1011 -99 1064 q -42 889 -42 958 q -57 796 -42 838 q -106 724 -72 754 q -167 685 -132 700 q -249 665 -203 671 q -351 658 -294 658 l -707 658 m -118 -576 q -285 -542 -217 -576 q -387 -446 -353 -507 q -422 -308 -422 -385 q -395 -194 -422 -244 q -321 -113 -368 -143 q -211 -83 -274 -83 q -119 -103 -154 -83 q -67 -156 -83 -122 q -50 -231 -50 -189 q -92 -337 -50 -296 q -229 -378 -135 -378 q -293 -371 -264 -378 q -350 -347 -322 -364 l -368 -246 q -309 -281 -337 -271 q -246 -292 -281 -292 q -171 -275 -193 -292 q -149 -228 -149 -258 q -167 -185 -149 -200 q -214 -169 -185 -169 q -274 -186 -249 -169 q -312 -233 -299 -203 q -325 -306 -325 -264 l -325 -311 q -276 -437 -325 -392 q -121 -482 -226 -482 q 0 -462 -57 -482 q 92 -396 57 -442 q 128 -271 128 -350 q 101 -149 128 -203 q 38 -54 75 -94 q 94 2 74 -26 q 114 71 114 31 q 94 144 114 110 q 32 208 74 178 l 106 282 q 199 178 175 226 q 224 76 224 129 q 201 -16 224 18 q 156 -69 179 -50 l 147 -29 q 213 -142 192 -83 q 233 -274 233 -200 q 190 -442 233 -375 q 69 -543 147 -510 q -118 -576 -10 -576 z "},"ೊ":{"ha":0,"x_min":-707,"x_max":983,"o":"m -707 658 l -707 765 l -379 765 q -244 777 -285 765 q -183 810 -203 789 q -160 853 -167 829 q -154 904 -154 878 q -190 995 -154 963 q -283 1028 -226 1028 q -374 997 -337 1028 q -411 926 -411 967 q -411 912 -411 919 q -410 897 -411 904 l -450 956 q -424 960 -436 958 q -401 963 -411 963 q -347 947 -367 963 q -328 903 -328 931 q -349 853 -328 871 q -406 836 -371 836 q -477 870 -456 836 q -499 946 -499 904 q -473 1030 -499 989 q -398 1097 -447 1071 q -276 1124 -349 1124 q -151 1094 -203 1124 q -70 1011 -99 1064 q -42 889 -42 958 q -57 796 -42 838 q -106 724 -72 754 q -167 685 -132 700 q -249 665 -203 671 q -351 658 -294 658 l -707 658 m 125 -17 q -35 32 35 -17 q -165 157 -104 81 l -94 233 q 13 127 -37 161 q 125 93 64 93 q 215 127 188 93 q 242 217 242 161 q 239 306 242 269 q 233 376 236 343 q 231 450 231 410 q 276 628 231 554 q 399 742 321 703 q 579 782 478 782 q 758 747 682 782 q 883 649 833 711 q 958 506 933 588 q 983 331 983 424 q 949 143 983 221 q 849 24 914 65 q 690 -17 783 -17 q 559 13 613 -17 q 478 94 506 43 q 451 206 451 144 q 472 307 451 267 q 528 367 493 347 q 606 388 564 388 q 684 362 657 388 q 711 294 711 336 q 690 232 711 256 q 635 208 668 208 q 577 229 597 208 q 557 292 557 250 l 568 294 q 555 256 558 274 q 551 215 551 238 q 583 126 551 165 q 690 86 614 86 q 786 114 746 86 q 848 196 826 142 q 869 328 869 250 q 839 498 869 419 q 745 625 808 576 q 582 674 682 674 q 455 646 508 674 q 373 565 401 618 q 344 436 344 513 q 347 359 344 392 q 353 294 350 326 q 356 215 356 261 q 322 81 356 132 q 236 7 289 31 q 125 -17 183 -17 z "},"ೋ":{"ha":0,"x_min":-707,"x_max":1567,"o":"m -707 658 l -707 765 l -379 765 q -244 777 -285 765 q -183 810 -203 789 q -160 853 -167 829 q -154 904 -154 878 q -190 995 -154 963 q -283 1028 -226 1028 q -374 997 -337 1028 q -411 926 -411 967 q -411 912 -411 919 q -410 897 -411 904 l -450 956 q -424 960 -436 958 q -401 963 -411 963 q -347 947 -367 963 q -328 903 -328 931 q -349 853 -328 871 q -406 836 -371 836 q -477 870 -456 836 q -499 946 -499 904 q -473 1030 -499 989 q -398 1097 -447 1071 q -276 1124 -349 1124 q -151 1094 -203 1124 q -70 1011 -99 1064 q -42 889 -42 958 q -57 796 -42 838 q -106 724 -72 754 q -167 685 -132 700 q -249 665 -203 671 q -351 658 -294 658 l -707 658 m 125 -17 q -35 32 35 -17 q -165 157 -104 81 l -94 233 q 13 127 -37 161 q 125 93 64 93 q 215 127 188 93 q 242 217 242 161 q 239 306 242 269 q 233 376 236 343 q 231 450 231 410 q 276 628 231 554 q 399 742 321 703 q 579 782 478 782 q 758 747 682 782 q 883 649 833 711 q 958 506 933 588 q 983 331 983 424 q 949 143 983 221 q 849 24 914 65 q 690 -17 783 -17 q 559 13 613 -17 q 478 94 506 43 q 451 206 451 144 q 472 307 451 267 q 528 367 493 347 q 606 388 564 388 q 684 362 657 388 q 711 294 711 336 q 690 232 711 256 q 635 208 668 208 q 577 229 597 208 q 557 292 557 250 l 568 294 q 555 256 558 274 q 551 215 551 238 q 583 126 551 165 q 690 86 614 86 q 786 114 746 86 q 848 196 826 142 q 869 328 869 250 q 839 498 869 419 q 745 625 808 576 q 582 674 682 674 q 455 646 508 674 q 373 565 401 618 q 344 436 344 513 q 347 359 344 392 q 353 294 350 326 q 356 215 356 261 q 322 81 356 132 q 236 7 289 31 q 125 -17 183 -17 m 1567 597 q 1539 490 1567 538 q 1457 414 1511 442 q 1324 386 1403 386 q 1194 419 1246 386 q 1114 485 1142 451 l 1149 576 q 1183 538 1161 560 q 1237 499 1204 515 q 1314 483 1269 483 q 1421 515 1388 483 q 1454 593 1454 546 q 1431 661 1454 638 q 1358 685 1407 685 q 1280 660 1317 685 q 1219 585 1243 635 q 1196 465 1196 536 l 1196 450 q 1231 291 1196 358 q 1328 174 1267 224 q 1471 89 1390 125 l 1411 -17 q 1243 95 1317 29 q 1128 249 1169 161 q 1086 449 1086 336 q 1122 626 1086 551 q 1221 741 1158 700 q 1364 782 1283 782 q 1474 758 1429 782 q 1543 694 1519 735 q 1567 597 1567 653 z "},"ೌ":{"ha":597,"x_min":-374,"x_max":561,"o":"m 40 843 q 28 765 40 797 q -8 711 15 733 q -83 672 -36 685 q -194 658 -129 658 l -347 658 l -347 765 l -226 765 q -149 770 -178 765 q -103 788 -119 775 q -80 815 -87 799 q -72 857 -72 831 q -82 911 -72 876 q -124 985 -92 946 l -7 994 q 26 930 13 968 q 40 843 40 892 m 561 654 q 525 467 561 546 q 423 347 489 389 q 267 304 357 304 q 136 334 189 304 q 56 415 83 364 q 29 525 29 465 q 50 626 29 586 q 106 687 71 667 q 183 707 142 707 q 261 682 233 707 q 289 614 289 657 q 267 551 289 575 q 213 528 246 528 q 155 549 175 528 q 135 611 135 569 l 146 614 q 133 575 136 593 q 129 536 129 557 q 160 447 129 485 q 267 408 192 408 q 364 436 324 408 q 426 519 404 464 q 447 654 447 574 q 428 790 447 732 q 369 889 408 849 q 306 939 342 919 q 217 969 271 958 q 76 979 163 979 l -374 979 l -374 1086 l 104 1086 q 261 1072 194 1086 q 376 1031 328 1058 q 463 961 425 1003 q 535 831 510 910 q 561 654 561 753 z "},"್":{"ha":435,"x_min":-228,"x_max":450,"o":"m 213 410 q 57 474 115 410 q -1 654 -1 538 l -1 665 q 34 829 -1 763 q 133 931 69 896 q 281 967 196 967 q 377 954 335 967 q 450 924 419 942 l 390 836 q 330 860 360 853 q 268 868 300 868 q 185 849 224 868 q 125 786 147 831 q 103 664 103 742 l 103 649 q 131 544 103 583 q 215 504 160 504 q 273 520 250 504 q 296 576 296 536 q 289 610 296 596 q 271 635 282 625 q 232 653 254 649 q 169 658 210 658 l -228 658 l -228 765 l 154 765 q 267 753 219 765 q 347 711 315 742 q 388 655 374 689 q 401 579 401 621 q 348 452 401 494 q 213 410 294 410 z "},"ೕ":{"ha":567,"x_min":50,"x_max":531,"o":"m 531 597 q 503 490 531 538 q 421 414 475 442 q 288 386 367 386 q 158 419 210 386 q 78 485 106 451 l 113 576 q 147 538 125 560 q 201 499 168 515 q 278 483 233 483 q 385 515 351 483 q 418 593 418 546 q 394 661 418 638 q 322 685 371 685 q 244 660 281 685 q 183 585 207 635 q 160 465 160 536 l 160 450 q 195 291 160 358 q 292 174 231 224 q 435 89 354 125 l 375 -17 q 207 95 281 29 q 92 249 133 161 q 50 449 50 336 q 86 626 50 551 q 185 741 122 700 q 328 782 247 782 q 438 758 393 782 q 507 694 483 735 q 531 597 531 653 z "},"ೖ":{"ha":254,"x_min":-422,"x_max":233,"o":"m -118 -576 q -285 -542 -217 -576 q -387 -446 -353 -507 q -422 -308 -422 -385 q -395 -194 -422 -244 q -321 -113 -368 -143 q -211 -83 -274 -83 q -119 -103 -154 -83 q -67 -156 -83 -122 q -50 -231 -50 -189 q -92 -337 -50 -296 q -229 -378 -135 -378 q -293 -371 -264 -378 q -350 -347 -322 -364 l -368 -246 q -309 -281 -337 -271 q -246 -292 -281 -292 q -171 -275 -193 -292 q -149 -228 -149 -258 q -167 -185 -149 -200 q -214 -169 -185 -169 q -274 -186 -249 -169 q -312 -233 -299 -203 q -325 -306 -325 -264 l -325 -311 q -276 -437 -325 -392 q -121 -482 -226 -482 q 0 -462 -57 -482 q 92 -396 57 -442 q 128 -271 128 -350 q 101 -149 128 -203 q 38 -54 75 -94 q 94 2 74 -26 q 114 71 114 31 q 94 144 114 110 q 32 208 74 178 l 106 282 q 199 178 175 226 q 224 76 224 129 q 201 -16 224 18 q 156 -69 179 -50 l 147 -29 q 213 -142 192 -83 q 233 -274 233 -200 q 190 -442 233 -375 q 69 -543 147 -510 q -118 -576 -10 -576 z "},"ೞ":{"ha":1207,"x_min":58,"x_max":1149,"o":"m 351 -17 q 234 7 288 -17 q 141 77 181 31 q 80 193 101 124 q 58 354 58 263 q 100 588 58 492 q 212 733 142 683 q 367 782 282 782 q 510 732 457 782 q 563 596 563 682 q 535 489 563 536 q 455 414 508 442 q 322 386 401 386 q 194 418 246 386 q 115 483 143 450 l 149 575 q 183 537 161 558 q 238 499 206 515 q 314 483 271 483 q 421 514 388 483 q 454 592 454 544 q 429 660 454 636 q 364 685 404 685 q 276 654 321 685 q 202 551 232 624 q 172 350 172 478 q 187 226 172 275 q 227 147 201 176 q 285 106 253 118 q 350 93 317 93 q 494 145 449 93 q 550 271 540 197 l 656 271 q 711 145 664 197 q 857 93 758 93 q 922 106 890 93 q 980 147 954 118 q 1020 226 1006 176 q 1035 350 1035 275 q 1005 551 1035 478 q 931 654 975 624 q 843 685 886 685 q 778 660 803 685 q 753 592 753 636 q 786 514 753 544 q 893 483 819 483 q 969 499 938 483 q 1024 537 1001 515 q 1058 575 1046 558 l 1092 483 q 1013 418 1064 450 q 883 386 961 386 q 752 414 806 386 q 672 489 699 442 q 644 596 644 536 q 697 731 644 681 q 840 782 749 782 q 996 733 926 782 q 1107 588 1065 683 q 1149 354 1149 492 q 1127 193 1149 263 q 1066 77 1106 124 q 973 7 1026 31 q 856 -17 919 -17 q 743 -2 792 -17 q 656 47 694 13 q 581 144 617 82 l 626 144 q 551 47 590 82 q 463 -2 511 13 q 351 -17 415 -17 z "},"ೠ":{"ha":2181,"x_min":38,"x_max":2128,"o":"m 260 -17 q 101 37 158 -17 q 43 167 43 90 q 70 265 43 225 q 142 325 97 304 q 242 346 188 346 q 370 299 322 346 q 418 175 418 253 q 406 103 418 138 q 374 39 393 68 l 285 54 q 318 108 306 81 q 331 163 331 135 q 305 230 331 210 q 243 250 279 250 q 171 227 193 250 q 149 165 149 204 q 176 103 149 128 q 254 78 203 78 q 305 81 282 78 q 347 90 328 85 q 358 92 353 93 q 367 92 363 90 q 443 155 415 111 q 483 257 471 199 q 494 378 494 315 q 487 462 494 421 q 464 540 479 503 q 426 608 449 578 q 375 658 404 638 q 363 663 369 663 q 350 665 357 663 q 303 683 328 676 q 249 689 278 689 q 170 664 197 689 q 143 601 143 639 q 165 540 143 563 q 231 517 188 517 q 299 537 272 517 q 325 604 325 557 q 312 666 325 638 q 279 713 299 694 l 368 728 q 400 665 388 700 q 413 590 413 629 q 363 467 413 514 q 228 421 313 421 q 135 442 178 421 q 65 503 92 463 q 38 600 38 543 q 64 692 38 651 q 139 758 90 733 q 254 782 188 782 q 415 743 349 782 q 524 644 482 704 q 587 515 567 583 q 607 385 607 446 q 590 240 607 311 q 534 110 574 168 q 427 18 494 53 q 260 -17 360 -17 m 801 -17 q 616 37 694 -17 q 474 171 538 90 l 546 246 q 665 133 604 172 q 803 93 725 93 q 935 147 889 93 q 981 292 981 201 q 945 458 981 383 q 845 585 910 532 q 694 663 781 638 l 886 668 q 998 573 951 626 q 1069 451 1044 519 q 1094 299 1094 383 q 1080 187 1094 243 q 1031 85 1065 131 q 941 11 997 39 q 801 -17 885 -17 m 632 658 l 632 765 l 788 765 q 893 772 863 765 q 939 790 924 779 q 963 822 957 804 q 969 858 969 839 q 947 948 969 904 q 879 1038 925 992 l 969 1097 q 1058 967 1035 1025 q 1082 850 1082 910 q 1071 785 1082 824 q 1025 717 1060 747 q 941 672 989 686 q 813 658 893 658 l 632 658 m 1269 -17 q 1110 32 1179 -17 q 979 157 1040 81 l 1050 233 q 1158 127 1107 161 q 1269 93 1208 93 q 1359 127 1332 93 q 1386 217 1386 161 q 1383 306 1386 269 q 1378 376 1381 343 q 1375 450 1375 410 q 1420 628 1375 554 q 1544 742 1465 703 q 1724 782 1622 782 q 1902 747 1826 782 q 2028 649 1978 711 q 2103 506 2078 588 q 2128 331 2128 424 q 2093 143 2128 221 q 1993 24 2058 65 q 1835 -17 1928 -17 q 1703 13 1757 -17 q 1623 94 1650 43 q 1596 206 1596 144 q 1617 307 1596 267 q 1673 367 1638 347 q 1750 388 1708 388 q 1828 362 1801 388 q 1856 294 1856 336 q 1834 232 1856 256 q 1779 208 1813 208 q 1722 229 1742 208 q 1701 292 1701 250 l 1713 294 q 1699 256 1703 274 q 1696 215 1696 238 q 1727 126 1696 165 q 1835 86 1758 86 q 1931 114 1890 86 q 1992 196 1971 142 q 2014 328 2014 250 q 1984 498 2014 419 q 1890 625 1954 576 q 1726 674 1826 674 q 1599 646 1653 674 q 1517 565 1546 618 q 1489 436 1489 513 q 1492 359 1489 392 q 1497 294 1494 326 q 1500 215 1500 261 q 1467 81 1500 132 q 1381 7 1433 31 q 1269 -17 1328 -17 z "},"ೡ":{"ha":981,"x_min":36,"x_max":979,"o":"m 965 51 q 857 -2 915 18 q 726 -22 799 -22 q 606 -3 661 -22 q 519 60 551 17 q 488 174 488 103 q 509 260 488 222 q 570 333 531 299 q 665 404 610 367 q 742 462 714 438 q 782 511 769 486 q 794 571 794 536 q 764 644 794 617 q 681 672 733 672 q 570 628 613 672 q 518 511 528 583 l 408 511 q 358 631 399 590 q 258 672 317 672 q 176 645 203 672 q 150 574 150 618 q 158 520 150 547 q 174 476 165 493 l 68 443 q 46 503 56 469 q 36 582 36 538 q 65 688 36 643 q 143 758 94 733 q 250 782 192 782 q 347 766 306 782 q 422 714 389 750 q 485 619 456 678 l 442 613 q 513 716 474 679 q 597 767 551 753 q 689 782 642 782 q 807 753 758 782 q 882 675 856 724 q 908 569 908 626 q 887 471 908 514 q 825 392 865 428 q 731 319 785 356 q 660 269 689 292 q 615 225 631 247 q 599 175 599 203 q 617 118 599 138 q 665 92 636 99 q 722 85 693 85 q 823 102 775 85 q 910 146 871 119 l 965 51 m 661 -3 q 625 -43 638 -22 q 613 -89 613 -64 q 631 -146 613 -126 q 678 -172 650 -165 q 736 -179 707 -179 q 837 -162 789 -179 q 924 -118 885 -144 l 979 -212 q 871 -266 929 -246 q 740 -286 813 -286 q 620 -267 675 -286 q 533 -204 565 -247 q 501 -90 501 -161 q 511 -30 501 -57 q 540 22 521 -3 q 586 71 560 47 l 661 -3 z "},"ೢ":{"ha":101,"x_min":-483,"x_max":207,"o":"m 174 -250 q 158 -330 174 -289 q 124 -396 143 -371 l 47 -321 q 65 -285 61 -304 q 69 -249 69 -267 q 46 -190 69 -212 q -12 -168 22 -168 q -65 -180 -43 -168 q -99 -213 -86 -192 q -117 -262 -111 -235 l -217 -262 q -247 -194 -224 -218 q -306 -169 -271 -169 q -358 -187 -339 -169 q -376 -242 -376 -206 q -372 -276 -376 -257 q -358 -312 -367 -294 l -457 -337 q -475 -281 -467 -314 q -483 -215 -483 -249 q -442 -114 -483 -151 q -321 -76 -401 -76 q -218 -103 -258 -76 q -144 -178 -178 -131 l -192 -185 q -110 -99 -156 -122 q -10 -76 -64 -76 q 82 -96 40 -76 q 149 -153 124 -115 q 174 -250 174 -192 m 58 -636 q -37 -616 3 -636 q -99 -560 -78 -596 q -121 -479 -121 -525 q -103 -408 -121 -442 q -44 -349 -86 -374 q 71 -311 -1 -324 l 124 -396 q 13 -426 46 -404 q -21 -483 -21 -447 q -9 -519 -21 -506 q 22 -540 3 -533 q 63 -547 40 -547 q 121 -540 96 -547 q 176 -517 146 -532 l 207 -601 q 142 -626 179 -615 q 58 -636 104 -636 z "},"ೣ":{"ha":101,"x_min":-483,"x_max":235,"o":"m 174 -250 q 167 -302 174 -276 q 149 -351 160 -328 l 63 -344 l 47 -321 q 65 -285 61 -304 q 69 -249 69 -267 q 46 -190 69 -212 q -12 -168 22 -168 q -65 -181 -43 -168 q -99 -214 -86 -193 q -117 -262 -111 -235 l -217 -262 q -247 -194 -224 -218 q -306 -169 -271 -169 q -358 -187 -339 -169 q -376 -242 -376 -206 q -372 -276 -376 -257 q -358 -312 -367 -294 l -457 -337 q -475 -281 -467 -314 q -483 -215 -483 -249 q -442 -114 -483 -151 q -321 -76 -401 -76 q -218 -103 -258 -76 q -144 -178 -178 -131 l -192 -185 q -110 -99 -156 -122 q -10 -76 -64 -76 q 82 -96 40 -76 q 149 -153 124 -115 q 174 -250 174 -192 m 58 -565 q -67 -526 -18 -565 q -115 -425 -115 -487 q -97 -360 -115 -392 q -37 -305 -79 -328 q 81 -275 6 -282 l 149 -351 q 51 -365 88 -356 q 0 -390 15 -375 q -15 -426 -15 -406 q 8 -465 -15 -453 q 63 -476 32 -476 q 121 -469 96 -476 q 176 -446 146 -461 l 207 -531 q 142 -555 179 -544 q 58 -565 104 -565 m 89 -729 q -42 -690 6 -729 q -90 -589 -90 -650 q -79 -533 -90 -560 q -37 -483 -68 -506 l 42 -543 q 17 -563 25 -551 q 10 -589 10 -575 q 33 -628 10 -615 q 93 -640 57 -640 q 149 -633 124 -640 q 204 -610 174 -626 l 235 -694 q 166 -719 204 -710 q 89 -729 128 -729 z "},"೦":{"ha":956,"x_min":75,"x_max":881,"o":"m 75 476 q 99 666 75 576 q 171 825 122 756 q 296 935 219 894 q 476 975 372 975 q 658 934 582 975 q 784 823 735 893 q 857 665 833 753 q 881 482 881 576 q 858 297 881 386 q 788 138 836 208 q 663 25 740 67 q 476 -17 586 -17 q 298 23 374 -17 q 173 132 222 63 q 99 290 124 201 q 75 476 75 379 m 197 476 q 234 265 197 350 q 334 138 271 181 q 476 96 397 96 q 627 140 564 96 q 724 271 690 185 q 758 482 758 357 q 723 690 758 606 q 623 819 688 775 q 472 863 558 863 q 330 818 392 863 q 233 688 268 774 q 197 476 197 603 z "},"೧":{"ha":956,"x_min":75,"x_max":881,"o":"m 478 975 q 657 937 581 975 q 783 832 733 899 q 856 678 832 765 q 881 493 881 592 q 858 304 881 394 q 796 133 836 214 q 699 -18 756 53 l 599 51 q 715 257 671 142 q 758 499 758 372 q 742 641 758 575 q 690 757 725 707 q 603 835 656 807 q 478 863 550 863 q 321 814 383 863 q 228 683 258 765 q 197 499 197 601 q 236 265 197 376 q 356 51 275 153 l 257 -18 q 162 129 203 51 q 98 298 121 207 q 75 494 75 389 q 101 681 75 593 q 177 834 126 768 q 303 938 228 900 q 478 975 378 975 z "},"೨":{"ha":956,"x_min":42,"x_max":883,"o":"m 540 975 q 724 918 647 975 q 842 756 801 861 q 883 507 883 651 q 851 275 883 372 q 754 114 819 178 q 665 51 717 76 q 545 13 614 26 q 385 0 476 0 l 42 0 l 42 114 l 336 114 q 505 124 443 114 q 602 153 567 135 q 663 196 638 171 q 739 324 717 247 q 761 499 761 401 q 736 690 761 607 q 662 819 711 772 q 539 867 613 867 q 422 827 458 867 q 385 726 385 788 q 394 675 385 696 q 422 643 404 654 q 464 632 439 632 q 517 652 500 632 q 533 710 533 672 l 636 717 q 640 701 639 711 q 640 679 640 690 q 625 610 640 646 q 572 551 610 575 q 465 526 533 526 q 361 551 406 526 q 292 621 317 575 q 267 731 267 667 q 342 910 267 846 q 540 975 418 975 z "},"೩":{"ha":956,"x_min":110,"x_max":965,"o":"m 335 458 q 483 417 428 458 q 579 317 539 375 l 608 293 q 694 172 657 215 q 765 113 731 129 q 839 96 800 96 q 881 101 858 96 q 932 118 904 106 l 965 10 q 906 -10 936 -4 q 843 -17 875 -17 q 726 9 776 -17 q 635 82 676 35 q 553 193 593 129 l 519 240 q 444 322 485 289 q 343 354 403 354 q 262 328 296 354 q 228 254 228 303 q 258 179 228 203 q 339 156 288 156 q 465 208 415 156 q 540 347 515 261 q 565 533 565 433 q 515 783 565 700 q 369 867 465 867 q 283 834 314 867 q 253 757 253 801 q 271 696 253 718 q 321 674 289 674 q 360 681 347 674 q 378 702 374 688 q 383 736 383 717 l 483 743 q 487 728 486 738 q 488 708 488 718 q 472 646 488 678 q 421 592 457 614 q 322 571 385 571 q 228 592 271 571 q 160 657 186 614 q 135 761 135 700 q 163 868 135 819 q 243 946 190 917 q 372 975 296 975 q 517 941 457 975 q 614 847 576 907 q 669 712 651 788 q 686 553 686 636 q 677 428 686 488 q 651 317 668 368 q 608 222 633 265 q 489 92 558 135 q 332 49 419 49 q 173 101 236 49 q 110 256 110 153 q 173 404 110 350 q 335 458 236 458 z "},"೪":{"ha":956,"x_min":53,"x_max":903,"o":"m 501 -17 q 369 8 421 -17 q 292 73 317 32 q 267 165 267 114 q 287 247 267 210 q 356 306 307 283 l 388 276 q 209 357 285 306 q 93 487 133 408 q 53 672 53 565 q 86 828 53 760 q 183 935 119 896 q 333 975 246 975 q 432 957 388 975 q 503 901 476 939 q 529 800 529 863 q 506 703 529 747 q 433 634 483 660 q 296 608 382 608 q 216 617 257 608 q 147 642 175 626 l 157 743 q 218 719 186 726 q 281 711 250 711 q 355 723 326 711 q 397 756 383 735 q 410 803 410 776 q 385 856 410 839 q 325 874 361 874 q 259 859 288 874 q 210 817 231 844 q 181 751 190 790 q 171 664 171 713 q 183 576 171 622 q 232 485 196 529 q 335 408 268 442 q 511 360 403 375 q 660 426 600 385 q 750 523 719 468 q 781 639 781 578 q 741 772 781 714 q 617 878 701 831 l 692 975 q 795 900 747 947 q 873 790 843 853 q 903 649 903 726 q 863 484 903 554 q 760 367 822 414 q 629 290 697 319 l 639 311 q 708 258 678 293 q 738 165 738 222 q 675 32 738 81 q 501 -17 613 -17 m 501 86 q 591 109 560 86 q 622 171 622 132 q 589 232 622 208 q 503 265 556 256 q 442 248 469 261 q 398 215 414 235 q 382 169 382 196 q 408 112 382 138 q 501 86 435 86 z "},"೫":{"ha":956,"x_min":40,"x_max":926,"o":"m 246 569 q 141 597 188 575 q 67 662 94 618 q 40 778 40 706 q 69 885 40 842 q 144 952 97 929 q 249 975 192 975 q 373 936 321 975 q 458 822 425 897 q 506 635 490 746 q 521 381 521 525 q 490 160 521 249 q 399 27 460 71 q 247 -17 338 -17 q 135 13 181 -17 q 65 90 89 42 q 42 199 42 139 q 61 298 42 249 q 128 394 81 347 q 256 478 175 440 q 460 543 338 517 l 633 583 q 730 628 692 601 q 787 690 768 654 q 806 774 806 726 q 785 845 806 822 q 733 868 765 868 q 674 842 696 868 q 651 774 651 817 q 661 706 651 742 q 692 631 671 671 q 750 542 714 590 q 809 447 782 496 q 853 342 836 397 q 871 222 871 288 q 844 94 871 149 q 768 -17 818 40 l 665 67 q 728 143 706 104 q 750 233 750 182 q 741 313 750 276 q 710 392 732 350 q 650 496 689 435 q 640 515 643 507 q 631 532 638 522 q 568 652 592 592 q 544 772 544 713 q 568 881 544 835 q 635 951 592 926 q 738 975 678 975 q 842 949 800 975 q 906 878 885 924 q 926 775 926 833 q 905 667 926 717 q 838 576 883 617 q 721 508 793 536 l 492 449 q 283 375 354 415 q 185 290 211 335 q 158 197 158 244 q 171 137 158 161 q 206 101 183 113 q 254 90 228 90 q 329 115 296 90 q 382 201 363 140 q 401 369 401 263 q 394 536 401 449 q 370 699 388 624 q 322 821 353 774 q 244 868 292 868 q 182 846 208 868 q 156 775 156 824 q 183 706 156 729 q 260 679 211 682 l 246 569 z "},"೬":{"ha":956,"x_min":86,"x_max":913,"o":"m 688 510 q 665 415 688 458 q 594 344 643 371 q 465 318 544 318 q 362 337 404 318 q 294 385 319 356 q 257 450 268 415 q 246 518 246 485 q 249 562 246 542 q 254 599 251 582 q 277 697 261 647 q 293 794 293 746 q 277 845 293 828 q 232 863 261 863 q 192 859 214 863 q 149 849 171 856 l 124 951 q 189 969 156 963 q 258 975 222 975 q 347 956 314 975 q 396 903 381 936 q 411 832 411 871 q 399 742 411 790 q 374 649 388 694 q 358 594 364 618 q 353 542 353 569 q 376 458 353 493 q 468 424 400 424 q 545 449 522 424 q 568 506 568 474 q 541 565 568 539 q 442 592 514 592 q 374 583 407 592 q 317 560 340 574 l 278 542 q 222 463 242 511 q 203 354 203 415 q 219 255 203 299 q 268 179 236 211 q 326 142 293 157 q 413 121 360 128 q 549 114 465 114 l 913 114 l 913 0 l 554 0 q 380 10 450 0 q 263 44 310 21 q 179 101 217 67 q 110 208 133 146 q 86 347 86 271 q 146 544 86 463 q 299 665 206 626 q 376 690 335 681 q 453 699 418 699 q 594 670 543 699 q 666 599 644 642 q 688 510 688 556 z "},"೭":{"ha":956,"x_min":88,"x_max":913,"o":"m 400 975 q 574 919 507 975 q 642 753 642 864 q 615 628 642 682 q 535 529 589 574 q 399 440 482 485 q 286 372 328 403 q 227 311 244 342 q 210 243 210 281 q 222 188 210 213 q 251 149 233 164 q 317 122 276 131 q 449 114 358 114 l 913 114 l 913 0 l 442 0 q 261 15 324 0 q 165 58 199 31 q 106 140 125 92 q 88 243 88 188 q 117 360 88 310 q 197 451 146 411 q 314 525 249 492 q 443 606 399 571 q 503 676 488 642 q 519 751 519 711 q 486 836 519 806 q 397 867 453 867 q 318 846 356 867 q 281 778 281 825 q 299 731 281 751 q 361 707 318 710 l 350 603 q 254 624 297 603 q 186 687 211 646 q 161 785 161 728 q 190 881 161 838 q 272 949 218 924 q 400 975 325 975 z "},"೮":{"ha":956,"x_min":71,"x_max":929,"o":"m 375 975 q 514 928 465 975 q 563 799 563 881 q 540 703 563 746 q 467 634 518 660 q 329 608 415 608 q 247 618 292 608 q 175 643 203 628 l 190 743 q 251 719 219 726 q 314 711 282 711 q 413 735 383 711 q 443 803 443 760 q 425 854 443 835 q 368 874 407 874 q 278 835 318 874 q 215 726 239 797 q 192 556 192 656 q 201 431 192 496 q 233 307 211 367 q 292 200 254 247 q 386 124 331 153 q 519 96 442 96 q 658 127 606 96 q 735 210 711 158 q 760 321 760 261 q 740 447 760 386 q 696 567 721 508 q 651 684 671 626 q 632 800 632 742 q 647 870 632 840 q 685 918 661 900 q 753 950 713 942 q 860 958 794 958 l 929 958 l 929 843 l 861 843 q 782 834 810 843 q 754 789 754 825 q 773 699 754 749 q 817 590 792 649 q 862 463 843 531 q 881 321 881 396 q 833 130 881 204 q 703 19 785 56 q 522 -17 622 -17 q 340 18 417 -17 q 212 113 264 53 q 129 247 160 172 q 85 401 99 321 q 71 556 71 481 q 95 743 71 664 q 162 874 119 822 q 259 950 204 925 q 375 975 314 975 z "},"೯":{"ha":956,"x_min":119,"x_max":929,"o":"m 658 475 q 608 358 658 403 q 456 313 558 313 q 313 345 378 313 q 199 439 247 378 q 140 542 160 488 q 119 653 119 596 q 148 785 119 729 q 224 878 176 842 q 307 924 261 907 q 416 950 353 942 q 569 958 479 958 l 929 958 l 929 844 l 589 844 q 451 839 508 844 q 354 818 394 833 q 282 771 314 803 q 248 715 261 750 q 235 631 235 679 q 243 572 235 601 q 269 514 251 542 q 340 445 294 474 q 456 417 385 417 q 501 422 481 417 q 533 441 521 428 q 544 475 544 454 q 525 517 544 501 q 456 533 506 533 q 349 508 403 533 q 264 436 296 483 q 239 384 249 414 q 229 317 229 354 q 263 194 229 238 q 348 134 296 151 q 458 117 400 117 l 483 117 l 483 0 l 469 0 q 291 35 371 0 q 165 140 211 71 q 119 310 119 210 q 142 422 119 369 q 203 518 164 475 q 317 606 250 575 q 468 638 383 638 q 610 595 561 638 q 658 475 658 553 z "},"ೱ":{"ha":738,"x_min":22,"x_max":715,"o":"m 435 399 l 715 57 l 706 0 l 32 0 l 22 57 l 296 392 l 35 707 l 44 765 l 678 765 l 688 707 l 435 399 m 363 314 l 238 156 q 213 127 225 142 q 188 101 200 113 q 219 104 203 104 q 258 104 235 104 l 454 104 q 506 104 486 104 q 539 101 525 104 q 517 124 528 111 q 496 149 506 136 l 363 314 m 368 476 l 483 621 q 503 643 493 632 q 524 664 514 654 q 485 662 506 663 q 440 661 464 661 l 290 661 q 247 662 265 661 q 211 664 228 663 q 232 644 222 654 q 250 622 242 633 l 368 476 z "},"ೲ":{"ha":1044,"x_min":46,"x_max":999,"o":"m 271 76 q 100 152 154 76 q 46 356 46 228 q 106 565 46 492 q 272 638 165 638 q 443 562 389 638 q 497 357 497 486 q 438 149 497 222 q 271 76 378 76 m 269 172 q 363 220 332 172 q 394 357 394 268 q 361 497 394 453 q 274 542 328 542 q 179 494 210 542 q 149 358 149 447 q 182 217 149 261 q 269 172 215 172 m 772 76 q 601 152 656 76 q 547 356 547 228 q 607 565 547 492 q 774 638 667 638 q 944 562 890 638 q 999 357 999 486 q 939 149 999 222 q 772 76 879 76 m 771 172 q 865 220 833 172 q 896 357 896 268 q 863 497 896 453 q 775 542 829 542 q 681 494 711 542 q 650 358 650 447 q 683 217 650 261 q 771 172 717 172 z "},"ೝ":{"ha":832,"x_min":67,"x_max":811,"o":"m 267 -1 q 117 38 167 -1 q 67 146 67 78 q 107 244 67 207 q 228 292 147 282 l 228 240 q 108 287 147 251 q 68 381 68 322 q 108 472 68 440 q 229 514 149 504 l 229 461 q 140 488 176 468 q 86 540 104 508 q 68 613 68 572 q 118 726 68 686 q 267 765 168 765 l 811 765 l 811 663 l 268 663 q 204 649 226 663 q 182 603 182 635 q 205 557 182 571 q 268 543 228 543 l 497 543 l 497 442 l 265 442 q 204 426 226 442 q 182 381 182 411 q 204 335 182 350 q 265 321 226 321 l 497 321 l 497 219 l 265 219 q 203 205 225 219 q 181 160 181 190 q 203 115 181 131 q 267 100 225 100 l 497 100 l 497 -1 l 267 -1 z "},"ೳ":{"ha":433,"x_min":38,"x_max":401,"o":"m 219 639 q 84 686 131 639 q 38 813 38 733 q 84 938 38 890 q 219 985 131 985 q 356 938 310 985 q 401 813 401 890 q 356 686 401 733 q 219 639 310 639 m 219 725 q 281 748 260 725 q 303 813 303 771 q 281 876 303 854 q 219 899 260 899 q 158 876 179 899 q 136 813 136 854 q 158 748 136 771 q 219 725 179 725 z "},"!":{"ha":374,"x_min":100,"x_max":272,"o":"m 226 272 l 147 272 l 113 967 l 261 967 l 226 272 m 100 78 q 125 150 100 129 q 186 171 150 171 q 247 150 221 171 q 272 78 272 129 q 247 6 272 28 q 186 -17 221 -17 q 125 6 150 -17 q 100 78 100 28 z "},"\\"":{"ha":567,"x_min":90,"x_max":476,"o":"m 118 744 l 90 1101 l 222 1101 l 194 744 l 118 744 m 372 744 l 344 1101 l 476 1101 l 449 744 l 372 744 z "},"#":{"ha":897,"x_min":35,"x_max":861,"o":"m 157 0 l 213 281 l 35 281 l 35 374 l 231 374 l 272 585 l 86 585 l 86 676 l 289 676 l 344 958 l 444 958 l 386 676 l 588 676 l 644 958 l 740 958 l 682 676 l 861 676 l 861 585 l 665 585 l 622 374 l 814 374 l 814 281 l 604 281 l 549 0 l 450 0 l 508 281 l 310 281 l 254 0 l 157 0 m 326 374 l 525 374 l 569 585 l 371 585 l 326 374 z "},"%":{"ha":1154,"x_min":68,"x_max":1086,"o":"m 249 0 l 799 958 l 906 958 l 356 0 l 249 0 m 271 383 q 120 463 172 383 q 68 681 68 542 q 117 898 68 821 q 271 975 165 975 q 426 898 374 975 q 479 681 479 821 q 428 463 479 542 q 271 383 378 383 m 271 471 q 351 523 325 471 q 378 681 378 575 q 351 837 378 785 q 271 889 325 889 q 194 837 218 889 q 169 681 169 785 q 194 524 169 576 q 271 471 218 471 m 878 -17 q 727 63 779 -17 q 675 281 675 142 q 724 498 675 421 q 878 575 772 575 q 1033 498 979 575 q 1086 281 1086 421 q 1035 63 1086 142 q 878 -17 985 -17 m 878 71 q 958 123 932 71 q 985 281 985 175 q 958 435 985 383 q 878 488 932 488 q 801 435 825 488 q 776 281 776 383 q 801 123 776 175 q 878 71 825 71 z "},"\'":{"ha":313,"x_min":90,"x_max":222,"o":"m 118 744 l 90 1101 l 222 1101 l 194 744 l 118 744 z "},"(":{"ha":532,"x_min":68,"x_max":442,"o":"m 68 303 q 96 592 68 451 q 181 862 124 733 q 322 1101 238 990 l 440 1101 q 301 845 356 975 q 219 580 246 715 q 192 301 192 444 q 251 -117 192 82 q 442 -511 311 -317 l 322 -511 q 131 -134 193 -344 q 68 303 68 76 z "},")":{"ha":532,"x_min":90,"x_max":464,"o":"m 464 288 q 435 -2 464 139 q 351 -272 407 -143 q 208 -511 294 -400 l 92 -511 q 231 -255 176 -385 q 313 10 286 -125 q 340 289 340 146 q 281 708 340 508 q 90 1101 221 907 l 208 1101 q 401 724 338 935 q 464 288 464 514 z "},"*":{"ha":765,"x_min":58,"x_max":707,"o":"m 449 1101 l 421 836 l 688 911 l 707 782 l 451 763 l 617 543 l 497 478 l 379 721 l 272 478 l 149 543 l 311 763 l 58 782 l 78 911 l 342 836 l 313 1101 l 449 1101 z "},"+":{"ha":794,"x_min":71,"x_max":724,"o":"m 347 140 l 347 426 l 71 426 l 71 525 l 347 525 l 347 813 l 447 813 l 447 525 l 724 525 l 724 426 l 447 426 l 447 140 l 347 140 z "},",":{"ha":372,"x_min":71,"x_max":281,"o":"m 271 165 l 281 149 q 249 44 268 100 q 206 -69 229 -12 q 161 -175 183 -125 l 71 -175 q 98 -62 85 -122 q 122 57 111 -3 q 140 165 133 117 l 271 165 z "},"-":{"ha":447,"x_min":56,"x_max":392,"o":"m 56 339 l 56 447 l 392 447 l 392 339 l 56 339 z "},".":{"ha":372,"x_min":100,"x_max":272,"o":"m 100 79 q 125 151 100 129 q 185 172 150 172 q 247 151 221 172 q 272 79 272 129 q 247 6 272 28 q 185 -17 221 -17 q 125 6 150 -17 q 100 79 100 28 z "},"/":{"ha":721,"x_min":103,"x_max":618,"o":"m 618 1101 l 222 -511 l 103 -511 l 499 1101 l 618 1101 z "},":":{"ha":372,"x_min":100,"x_max":272,"o":"m 100 79 q 125 151 100 129 q 185 172 150 172 q 247 151 221 172 q 272 79 272 129 q 247 6 272 28 q 185 -17 221 -17 q 125 6 150 -17 q 100 79 100 28 m 100 533 q 125 607 100 586 q 185 628 150 628 q 247 607 221 628 q 272 533 272 586 q 247 461 272 483 q 185 439 221 439 q 125 461 150 439 q 100 533 100 483 z "},";":{"ha":389,"x_min":71,"x_max":297,"o":"m 272 165 l 282 149 q 250 44 269 101 q 208 -69 231 -12 q 163 -175 185 -126 l 71 -175 q 98 -63 85 -124 q 123 57 111 -3 q 142 165 135 117 l 272 165 m 125 533 q 150 607 125 586 q 210 628 175 628 q 272 607 246 628 q 297 533 297 586 q 272 461 297 483 q 210 439 246 439 q 150 461 175 439 q 125 533 125 483 z "},"<":{"ha":794,"x_min":69,"x_max":724,"o":"m 724 147 l 69 435 l 69 504 l 724 831 l 724 722 l 200 475 l 724 256 l 724 147 z "},"=":{"ha":794,"x_min":78,"x_max":714,"o":"m 78 564 l 78 663 l 714 663 l 714 564 l 78 564 m 78 288 l 78 386 l 714 386 l 714 288 l 78 288 z "},">":{"ha":794,"x_min":69,"x_max":724,"o":"m 69 147 l 69 256 l 593 474 l 69 722 l 69 831 l 724 504 l 724 435 l 69 147 z "},"?":{"ha":636,"x_min":53,"x_max":574,"o":"m 300 975 q 500 908 426 975 q 574 721 574 840 q 557 617 574 661 q 507 533 540 572 q 422 450 474 494 q 354 385 378 413 q 322 331 331 357 q 313 271 313 306 l 313 258 l 218 258 l 218 283 q 228 365 218 329 q 263 436 238 401 q 333 510 288 471 q 403 576 376 547 q 443 639 431 606 q 456 719 456 672 q 416 826 456 785 q 300 867 376 867 q 194 849 244 867 q 94 808 143 832 l 53 907 q 171 955 107 935 q 300 975 235 975 m 271 -17 q 210 6 236 -17 q 185 78 185 28 q 210 151 185 131 q 271 172 236 172 q 332 151 307 172 q 357 78 357 131 q 332 6 357 28 q 271 -17 307 -17 z "},"[":{"ha":532,"x_min":111,"x_max":422,"o":"m 422 -512 l 111 -512 l 111 1101 l 422 1101 l 422 1003 l 231 1003 l 231 -411 l 422 -411 l 422 -512 z "},"\\\\":{"ha":721,"x_min":103,"x_max":618,"o":"m 222 1101 l 618 -511 l 497 -511 l 103 1101 l 222 1101 z "},"]":{"ha":532,"x_min":110,"x_max":421,"o":"m 110 -412 l 301 -412 l 301 1003 l 110 1003 l 110 1101 l 421 1101 l 421 -512 l 110 -512 l 110 -412 z "},"^":{"ha":794,"x_min":53,"x_max":742,"o":"m 53 347 l 347 975 l 417 975 l 742 347 l 633 347 l 383 846 l 161 347 l 53 347 z "},"_":{"ha":617,"x_min":-3,"x_max":619,"o":"m -3 -214 l -3 -125 l 619 -125 l 619 -214 l -3 -214 z "},"{":{"ha":532,"x_min":39,"x_max":483,"o":"m 483 -511 q 337 -486 399 -510 q 242 -413 275 -462 q 208 -290 208 -364 l 208 114 q 165 215 208 185 q 39 244 121 244 l 39 346 q 165 376 121 347 q 208 475 208 406 l 208 883 q 243 1006 208 957 q 340 1078 278 1054 q 483 1101 403 1101 l 483 1003 q 370 970 411 1001 q 329 871 329 939 l 329 469 q 292 356 329 399 q 178 300 254 314 l 178 292 q 292 235 256 278 q 329 122 329 193 l 329 -282 q 347 -355 329 -326 q 400 -397 365 -383 q 483 -411 435 -410 l 483 -511 z "},"|":{"ha":765,"x_min":332,"x_max":433,"o":"m 332 1103 l 433 1103 l 433 -511 l 332 -511 l 332 1103 z "},"}":{"ha":531,"x_min":49,"x_max":492,"o":"m 49 1101 q 194 1077 133 1101 q 289 1005 256 1053 q 322 882 322 957 l 322 476 q 366 376 322 406 q 492 346 410 346 l 492 244 q 366 214 410 243 q 322 115 322 185 l 322 -292 q 288 -414 322 -365 q 191 -487 253 -462 q 49 -511 129 -511 l 49 -411 q 162 -378 121 -408 q 203 -281 203 -349 l 203 121 q 240 234 203 192 q 353 290 278 276 l 353 299 q 240 355 276 313 q 203 468 203 397 l 203 872 q 185 947 203 918 q 132 989 167 975 q 49 1003 97 1003 l 49 1101 z "},"~":{"ha":794,"x_min":69,"x_max":724,"o":"m 374 429 q 291 459 324 451 q 228 467 258 467 q 146 443 189 467 q 69 385 103 419 l 69 493 q 144 548 103 529 q 236 567 186 567 q 316 558 276 567 q 419 522 356 550 q 502 492 469 500 q 564 485 535 485 q 647 508 604 485 q 724 567 690 532 l 724 460 q 649 404 690 424 q 557 385 607 385 q 477 394 518 385 q 374 429 436 403 z "},"­":{"ha":447,"x_min":56,"x_max":392,"o":"m 56 339 l 56 447 l 392 447 l 392 339 l 56 339 z "},"–":{"ha":694,"x_min":56,"x_max":639,"o":"m 56 339 l 56 447 l 639 447 l 639 339 l 56 339 z "},"—":{"ha":1389,"x_min":56,"x_max":1333,"o":"m 56 339 l 56 447 l 1333 447 l 1333 339 l 56 339 z "},"‘":{"ha":360,"x_min":72,"x_max":289,"o":"m 81 763 l 72 778 q 103 883 85 826 q 146 996 122 939 q 192 1101 169 1053 l 289 1101 q 261 989 275 1050 q 236 869 247 928 q 218 763 225 811 l 81 763 z "},"’":{"ha":360,"x_min":72,"x_max":289,"o":"m 278 1101 l 289 1088 q 256 982 276 1039 q 214 869 236 925 q 169 763 192 813 l 72 763 q 98 876 85 815 q 123 995 111 936 q 142 1101 135 1054 l 278 1101 z "},"“":{"ha":608,"x_min":72,"x_max":538,"o":"m 336 763 l 325 778 q 358 883 338 826 q 401 996 378 939 q 447 1101 425 1053 l 538 1101 q 511 988 525 1049 q 486 869 497 928 q 467 763 475 811 l 336 763 m 81 763 l 72 778 q 103 883 85 826 q 145 996 122 939 q 192 1101 168 1053 l 281 1101 q 254 988 268 1049 q 229 869 240 928 q 210 763 218 811 l 81 763 z "},"”":{"ha":608,"x_min":72,"x_max":538,"o":"m 526 1101 l 538 1088 q 506 981 525 1038 q 463 869 486 925 q 418 763 440 813 l 325 763 q 352 876 339 815 q 378 995 365 936 q 397 1101 390 1054 l 526 1101 m 269 1101 l 281 1088 q 248 981 268 1038 q 206 869 228 925 q 161 763 183 813 l 72 763 q 97 876 85 815 q 122 995 110 936 q 140 1101 133 1054 l 269 1101 z "},"…":{"ha":1099,"x_min":100,"x_max":999,"o":"m 100 79 q 125 151 100 129 q 185 172 150 172 q 247 151 221 172 q 272 79 272 129 q 247 6 272 28 q 185 -17 221 -17 q 125 6 150 -17 q 100 79 100 28 m 464 79 q 488 151 464 129 q 549 172 513 172 q 610 151 585 172 q 635 79 635 129 q 610 6 635 28 q 549 -17 585 -17 q 488 6 513 -17 q 464 79 464 28 m 826 79 q 851 151 826 129 q 911 172 876 172 q 973 151 947 172 q 999 79 999 129 q 973 6 999 28 q 911 -17 947 -17 q 851 6 876 -17 q 826 79 826 28 z "},"×":{"ha":794,"x_min":89,"x_max":703,"o":"m 633 783 l 703 713 l 467 476 l 701 240 l 632 169 l 394 404 l 163 169 l 90 240 l 325 476 l 89 711 l 161 783 l 396 546 l 633 783 z "},"÷":{"ha":794,"x_min":69,"x_max":724,"o":"m 69 426 l 69 525 l 724 525 l 724 426 l 69 426 m 396 154 q 341 174 364 154 q 318 239 318 194 q 341 304 318 286 q 396 322 364 322 q 450 304 428 322 q 472 239 472 286 q 450 174 472 194 q 396 154 428 154 m 396 628 q 341 648 364 628 q 318 713 318 668 q 341 778 318 760 q 396 796 364 796 q 450 778 428 796 q 472 713 472 760 q 450 648 472 668 q 396 628 428 628 z "},"−":{"ha":794,"x_min":69,"x_max":724,"o":"m 69 426 l 69 525 l 724 525 l 724 426 l 69 426 z "},"₹":{"ha":794,"x_min":110,"x_max":685,"o":"m 372 0 l 110 440 l 110 501 l 126 501 q 263 515 215 501 q 336 550 310 528 q 373 606 364 574 q 382 678 382 639 q 368 763 382 728 q 328 819 354 797 q 251 858 296 847 q 140 869 206 869 l 110 869 l 110 958 l 685 958 l 685 869 l 371 869 l 403 885 q 451 844 428 868 q 490 780 475 819 q 506 678 506 740 q 467 532 506 588 q 361 449 428 476 q 210 415 294 422 l 222 463 l 514 0 l 372 0 m 110 640 l 110 729 l 685 729 l 685 640 l 110 640 z "},"॑":{"ha":0,"x_min":-436,"x_max":-336,"o":"m -336 1124 l -336 832 l -436 832 l -436 1124 l -336 1124 z "},"॒":{"ha":0,"x_min":-682,"x_max":-90,"o":"m -682 -250 l -682 -156 l -90 -156 l -90 -250 l -682 -250 z "},"।":{"ha":526,"x_min":269,"x_max":382,"o":"m 269 -193 l 269 975 l 382 975 l 382 -193 l 269 -193 z "},"॥":{"ha":832,"x_min":269,"x_max":688,"o":"m 575 -193 l 575 975 l 688 975 l 688 -193 l 575 -193 m 269 -193 l 269 975 l 382 975 l 382 -193 l 269 -193 z "},"᳐":{"ha":0,"x_min":-608,"x_max":-168,"o":"m -608 854 l -442 1122 l -350 1122 l -168 857 l -253 825 l -392 1038 l -518 825 l -608 854 z "},"᳒":{"ha":0,"x_min":-614,"x_max":-158,"o":"m -614 1026 l -158 1026 l -158 933 l -614 933 l -614 1026 z "},"᳚":{"ha":0,"x_min":-524,"x_max":-249,"o":"m -429 1124 l -429 831 l -524 831 l -524 1124 l -429 1124 m -249 1124 l -249 831 l -343 831 l -343 1124 l -249 1124 z "},"ᳲ":{"ha":713,"x_min":35,"x_max":678,"o":"m 357 376 q 165 440 243 376 q 35 656 88 503 l 143 694 q 226 536 179 589 q 356 483 274 483 q 486 536 439 483 q 569 694 533 589 l 678 656 q 549 440 625 503 q 357 376 472 376 m 356 313 q 548 249 471 313 q 678 33 625 186 l 569 -6 q 486 153 533 100 q 357 206 439 206 q 226 153 274 206 q 143 -6 179 100 l 35 33 q 165 249 88 186 q 356 313 242 313 z "},"᳴":{"ha":0,"x_min":-607,"x_max":-165,"o":"m -386 833 q -501 858 -451 833 q -579 930 -551 882 q -607 1046 -607 978 q -604 1085 -607 1065 q -596 1122 -601 1106 l -504 1103 q -510 1074 -508 1089 q -511 1049 -511 1060 q -473 947 -511 974 q -386 921 -435 921 q -298 950 -335 921 q -261 1051 -261 979 q -262 1076 -261 1063 q -268 1103 -264 1089 l -175 1122 q -168 1085 -171 1106 q -165 1046 -165 1064 q -194 931 -165 979 q -272 858 -222 883 q -386 833 -322 833 z "},"ᳵ":{"ha":732,"x_min":63,"x_max":669,"o":"m 368 304 l 157 36 l 63 103 l 296 386 l 67 665 l 154 725 l 363 463 l 575 732 l 669 665 l 435 379 l 665 100 l 576 40 l 368 304 z "},"꠰":{"ha":329,"x_min":108,"x_max":221,"o":"m 108 864 l 221 864 l 221 0 l 108 0 l 108 864 z "},"꠱":{"ha":607,"x_min":108,"x_max":499,"o":"m 386 864 l 499 864 l 499 0 l 386 0 l 386 864 m 108 864 l 221 864 l 221 0 l 108 0 l 108 864 z "},"꠲":{"ha":885,"x_min":108,"x_max":776,"o":"m 386 864 l 499 864 l 499 0 l 386 0 l 386 864 m 108 864 l 221 864 l 221 0 l 108 0 l 108 864 m 664 864 l 776 864 l 776 0 l 664 0 l 664 864 z "},"꠳":{"ha":944,"x_min":75,"x_max":869,"o":"m 75 375 l 75 485 l 869 485 l 869 375 l 75 375 z "},"꠴":{"ha":944,"x_min":75,"x_max":869,"o":"m 75 511 l 75 621 l 869 621 l 869 511 l 75 511 m 75 240 l 75 350 l 869 350 l 869 240 l 75 240 z "},"꠵":{"ha":944,"x_min":75,"x_max":869,"o":"m 75 646 l 75 756 l 869 756 l 869 646 l 75 646 m 75 375 l 75 485 l 869 485 l 869 375 l 75 375 m 75 104 l 75 214 l 869 214 l 869 104 l 75 104 z "},"‐":{"ha":447,"x_min":56,"x_max":392,"o":"m 56 339 l 56 447 l 392 447 l 392 339 l 56 339 z "},"​":{"ha":0,"x_min":0,"x_max":0,"o":""},"‌":{"ha":0,"x_min":-36,"x_max":36,"o":"m -36 -231 l -36 1094 l 36 1094 l 36 -231 l -36 -231 z "},"‍":{"ha":0,"x_min":-203,"x_max":203,"o":"m -36 -229 l -36 813 l -151 699 l -203 749 l -50 897 l -203 1044 l -151 1094 l 0 944 l 151 1094 l 203 1043 l 50 897 l 203 749 l 151 699 l 36 813 l 36 -229 l -36 -229 z "},"◌":{"ha":779,"x_min":79,"x_max":700,"o":"m 124 293 q 79 339 79 293 q 124 382 79 382 q 168 339 168 382 q 124 293 168 293 m 192 104 q 147 149 147 104 q 192 192 147 192 q 235 149 235 192 q 192 104 235 104 m 390 28 q 346 72 346 28 q 390 117 346 117 q 433 72 433 117 q 390 28 433 28 m 192 485 q 147 529 147 485 q 192 572 147 572 q 235 529 235 572 q 192 485 235 485 m 588 104 q 543 149 543 104 q 588 192 543 192 q 632 149 632 192 q 588 104 632 104 m 390 561 q 346 606 346 561 q 390 649 346 649 q 433 606 433 649 q 390 561 433 561 m 656 293 q 613 339 613 293 q 656 382 613 382 q 700 339 700 382 q 656 293 700 293 m 588 485 q 543 529 543 485 q 588 572 543 572 q 632 529 632 572 q 588 485 632 485 z "}," ":{"ha":400,"x_min":0,"x_max":0,"o":""},"A":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 z "},"Æ":{"ha":1224,"x_min":-1,"x_max":1140,"o":"m 1140 0 l 624 0 l 624 307 l 276 307 l 128 0 l -1 0 l 469 992 l 1140 992 l 1140 882 l 749 882 l 749 572 l 1114 572 l 1114 464 l 749 464 l 749 110 l 1140 110 l 1140 0 m 325 418 l 624 418 l 624 881 l 543 881 l 325 418 z "},"Á":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 647 1297 q 611 1250 635 1278 q 559 1192 588 1222 q 502 1135 531 1163 q 449 1089 474 1108 l 368 1089 l 368 1106 q 413 1168 389 1132 q 461 1242 438 1204 q 500 1311 485 1281 l 647 1311 l 647 1297 z "},"Ă":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 657 1275 q 626 1178 653 1219 q 551 1113 599 1136 q 438 1089 504 1089 q 283 1140 335 1089 q 225 1275 231 1190 l 300 1275 q 322 1219 304 1238 q 369 1194 339 1200 q 440 1188 399 1188 q 506 1194 476 1188 q 556 1220 536 1201 q 581 1275 576 1239 l 657 1275 z "},"Â":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 503 1311 q 551 1242 519 1281 q 616 1167 582 1204 q 676 1104 650 1131 l 676 1089 l 590 1089 q 515 1144 554 1111 q 439 1214 476 1176 q 364 1144 401 1176 q 290 1089 326 1113 l 207 1089 l 207 1104 q 266 1168 233 1132 q 329 1242 299 1204 q 378 1311 360 1281 l 503 1311 z "},"Ä":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 247 1193 q 267 1245 247 1229 q 313 1261 286 1261 q 358 1245 339 1261 q 378 1193 378 1229 q 358 1141 378 1158 q 313 1124 339 1124 q 267 1141 286 1124 q 247 1193 247 1158 m 508 1193 q 527 1245 508 1229 q 572 1261 546 1261 q 618 1245 599 1261 q 638 1193 638 1229 q 618 1141 638 1158 q 572 1124 599 1124 q 527 1141 546 1124 q 508 1193 508 1158 z "},"À":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 407 1311 q 445 1242 422 1281 q 494 1168 468 1204 q 540 1106 519 1132 l 540 1089 l 458 1089 q 406 1135 435 1108 q 348 1192 376 1163 q 297 1250 319 1222 q 261 1297 274 1278 l 261 1311 l 407 1311 z "},"Ā":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 647 1188 l 647 1089 l 235 1089 l 235 1188 l 647 1188 z "},"Ą":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 757 -161 q 774 -208 757 -192 q 819 -224 790 -224 q 859 -220 843 -224 q 886 -215 875 -217 l 886 -293 q 847 -302 867 -299 q 800 -306 828 -306 q 692 -271 726 -306 q 657 -175 657 -236 q 677 -97 657 -135 q 727 -29 697 -60 q 785 21 757 1 l 851 0 q 781 -81 804 -44 q 757 -161 757 -118 z "},"Å":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 440 926 q 331 965 372 926 q 289 1074 289 1004 q 331 1181 289 1143 q 440 1219 372 1219 q 550 1181 506 1219 q 594 1075 594 1143 q 551 965 594 1004 q 440 926 507 926 m 440 996 q 497 1017 475 996 q 518 1074 518 1038 q 496 1131 518 1110 q 440 1151 474 1151 q 385 1131 407 1151 q 363 1074 363 1110 q 383 1017 363 1038 q 440 996 403 996 z "},"Ã":{"ha":888,"x_min":0,"x_max":886,"o":"m 757 0 l 638 307 l 244 307 l 126 0 l 0 0 l 388 996 l 500 996 l 886 0 l 757 0 m 489 718 q 475 758 485 729 q 456 819 465 788 q 442 867 447 850 q 427 810 435 839 q 412 758 419 782 q 399 718 404 735 l 286 418 l 600 418 l 489 718 m 188 1089 q 203 1163 192 1131 q 235 1219 215 1196 q 281 1254 254 1242 q 340 1267 307 1267 q 399 1255 371 1267 q 454 1227 428 1243 q 505 1199 481 1211 q 551 1188 529 1188 q 601 1208 583 1188 q 628 1268 618 1228 l 697 1268 q 650 1139 689 1188 q 546 1090 611 1090 q 489 1102 517 1090 q 434 1130 461 1114 q 383 1158 407 1146 q 335 1169 358 1169 q 285 1149 301 1169 q 258 1089 268 1129 l 188 1089 z "},"B":{"ha":903,"x_min":135,"x_max":828,"o":"m 418 992 q 699 937 604 992 q 794 746 794 882 q 773 642 794 688 q 709 567 751 597 q 606 526 667 538 l 606 519 q 719 483 668 510 q 799 408 769 457 q 828 282 828 360 q 786 128 828 192 q 667 33 744 65 q 483 0 590 0 l 135 0 l 135 992 l 418 992 m 443 569 q 618 610 571 569 q 665 732 665 651 q 608 849 665 814 q 424 885 550 885 l 260 885 l 260 569 l 443 569 m 260 465 l 260 106 l 460 106 q 643 157 592 106 q 694 292 694 208 q 672 383 694 344 q 595 444 649 422 q 450 465 542 465 l 260 465 z "},"C":{"ha":878,"x_min":85,"x_max":835,"o":"m 560 896 q 417 869 481 896 q 308 790 353 842 q 240 663 264 738 q 217 496 217 589 q 255 283 217 374 q 369 144 293 193 q 558 96 444 96 q 682 107 624 96 q 796 135 740 118 l 796 26 q 681 -4 740 6 q 540 -14 622 -14 q 288 49 389 -14 q 135 226 186 111 q 85 497 85 342 q 116 703 85 610 q 208 864 147 796 q 357 969 268 932 q 561 1006 446 1006 q 708 990 638 1006 q 835 947 779 975 l 785 842 q 683 879 739 863 q 560 896 626 896 z "},"Ć":{"ha":878,"x_min":85,"x_max":835,"o":"m 560 896 q 417 869 481 896 q 308 790 353 842 q 240 663 264 738 q 217 496 217 589 q 255 283 217 374 q 369 144 293 193 q 558 96 444 96 q 682 107 624 96 q 796 135 740 118 l 796 26 q 681 -4 740 6 q 540 -14 622 -14 q 288 49 389 -14 q 135 226 186 111 q 85 497 85 342 q 116 703 85 610 q 208 864 147 796 q 357 969 268 932 q 561 1006 446 1006 q 708 990 638 1006 q 835 947 779 975 l 785 842 q 683 879 739 863 q 560 896 626 896 m 733 1297 q 697 1250 721 1278 q 645 1192 674 1222 q 588 1135 617 1163 q 535 1089 560 1108 l 454 1089 l 454 1106 q 499 1168 475 1132 q 547 1242 524 1204 q 586 1311 571 1281 l 733 1311 l 733 1297 z "},"Č":{"ha":878,"x_min":85,"x_max":835,"o":"m 560 896 q 417 869 481 896 q 308 790 353 842 q 240 663 264 738 q 217 496 217 589 q 255 283 217 374 q 369 144 293 193 q 558 96 444 96 q 682 107 624 96 q 796 135 740 118 l 796 26 q 681 -4 740 6 q 540 -14 622 -14 q 288 49 389 -14 q 135 226 186 111 q 85 497 85 342 q 116 703 85 610 q 208 864 147 796 q 357 969 268 932 q 561 1006 446 1006 q 708 990 638 1006 q 835 947 779 975 l 785 842 q 683 879 739 863 q 560 896 626 896 m 464 1089 q 415 1158 446 1121 q 351 1231 385 1194 q 293 1293 318 1267 l 293 1311 l 376 1311 q 451 1254 413 1288 q 525 1183 490 1221 q 601 1254 563 1221 q 676 1311 640 1288 l 763 1311 l 763 1293 q 702 1231 736 1267 q 637 1158 668 1194 q 589 1089 606 1121 l 464 1089 z "},"Ç":{"ha":878,"x_min":85,"x_max":835,"o":"m 560 896 q 417 869 481 896 q 308 790 353 842 q 240 663 264 738 q 217 496 217 589 q 255 283 217 374 q 369 144 293 193 q 558 96 444 96 q 682 107 624 96 q 796 135 740 118 l 796 26 q 681 -4 740 6 q 540 -14 622 -14 q 288 49 389 -14 q 135 226 186 111 q 85 497 85 342 q 116 703 85 610 q 208 864 147 796 q 357 969 268 932 q 561 1006 446 1006 q 708 990 638 1006 q 835 947 779 975 l 785 842 q 683 879 739 863 q 560 896 626 896 m 657 -193 q 606 -297 657 -260 q 451 -333 554 -333 q 412 -331 431 -333 q 382 -326 393 -329 l 382 -250 q 415 -255 394 -253 q 456 -257 436 -257 q 532 -244 506 -257 q 558 -196 558 -231 q 522 -143 558 -160 q 432 -119 485 -126 l 492 0 l 572 0 l 536 -74 q 597 -95 569 -81 q 641 -133 625 -110 q 657 -193 657 -157 z "},"Ċ":{"ha":878,"x_min":85,"x_max":835,"o":"m 560 896 q 417 869 481 896 q 308 790 353 842 q 240 663 264 738 q 217 496 217 589 q 255 283 217 374 q 369 144 293 193 q 558 96 444 96 q 682 107 624 96 q 796 135 740 118 l 796 26 q 681 -4 740 6 q 540 -14 622 -14 q 288 49 389 -14 q 135 226 186 111 q 85 497 85 342 q 116 703 85 610 q 208 864 147 796 q 357 969 268 932 q 561 1006 446 1006 q 708 990 638 1006 q 835 947 779 975 l 785 842 q 683 879 739 863 q 560 896 626 896 m 529 1271 q 578 1252 557 1271 q 600 1193 600 1233 q 578 1135 600 1154 q 529 1115 557 1115 q 478 1135 499 1115 q 457 1193 457 1154 q 478 1252 457 1233 q 529 1271 499 1271 z "},"D":{"ha":1014,"x_min":135,"x_max":929,"o":"m 929 506 q 867 226 929 339 q 690 57 806 114 q 411 0 575 0 l 135 0 l 135 992 l 440 992 q 700 936 590 992 q 869 773 810 881 q 929 506 929 665 m 797 501 q 753 718 797 633 q 626 844 710 803 q 422 885 542 885 l 260 885 l 260 107 l 394 107 q 697 206 596 107 q 797 501 797 306 z "},"Ď":{"ha":1014,"x_min":135,"x_max":929,"o":"m 929 506 q 867 226 929 339 q 690 57 806 114 q 411 0 575 0 l 135 0 l 135 992 l 440 992 q 700 936 590 992 q 869 773 810 881 q 929 506 929 665 m 797 501 q 753 718 797 633 q 626 844 710 803 q 422 885 542 885 l 260 885 l 260 107 l 394 107 q 697 206 596 107 q 797 501 797 306 m 438 1089 q 389 1158 419 1121 q 325 1231 358 1194 q 267 1293 292 1267 l 267 1311 l 350 1311 q 425 1254 386 1288 q 499 1183 464 1221 q 575 1254 536 1221 q 650 1311 614 1288 l 736 1311 l 736 1293 q 676 1231 710 1267 q 610 1158 642 1194 q 563 1089 579 1121 l 438 1089 z "},"Đ":{"ha":1014,"x_min":42,"x_max":929,"o":"m 440 992 q 699 936 589 992 q 869 773 808 881 q 929 506 929 665 q 867 226 929 339 q 690 57 806 114 q 410 0 574 0 l 144 0 l 144 436 l 42 436 l 42 544 l 144 544 l 144 992 l 440 992 m 422 885 l 269 885 l 269 544 l 517 544 l 517 436 l 269 436 l 269 107 l 394 107 q 697 206 597 107 q 797 501 797 306 q 753 718 797 633 q 625 844 708 803 q 422 885 542 885 z "},"E":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 z "},"É":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 m 629 1297 q 593 1250 617 1278 q 541 1192 569 1222 q 484 1135 513 1163 q 431 1089 456 1108 l 350 1089 l 350 1106 q 395 1168 371 1132 q 443 1242 419 1204 q 482 1311 467 1281 l 629 1311 l 629 1297 z "},"Ě":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 m 360 1089 q 311 1158 342 1121 q 247 1231 281 1194 q 189 1293 214 1267 l 189 1311 l 272 1311 q 347 1254 308 1288 q 421 1183 386 1221 q 497 1254 458 1221 q 572 1311 536 1288 l 658 1311 l 658 1293 q 598 1231 632 1267 q 533 1158 564 1194 q 485 1089 501 1121 l 360 1089 z "},"Ê":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 m 485 1311 q 533 1242 501 1281 q 598 1167 564 1204 q 658 1104 632 1131 l 658 1089 l 572 1089 q 497 1144 536 1111 q 421 1214 458 1176 q 346 1144 383 1176 q 272 1089 308 1113 l 189 1089 l 189 1104 q 248 1168 215 1132 q 311 1242 281 1204 q 360 1311 342 1281 l 485 1311 z "},"Ë":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 m 229 1193 q 249 1245 229 1229 q 294 1261 268 1261 q 340 1245 321 1261 q 360 1193 360 1229 q 340 1141 360 1158 q 294 1124 321 1124 q 249 1141 268 1124 q 229 1193 229 1158 m 490 1193 q 509 1245 490 1229 q 554 1261 528 1261 q 600 1245 581 1261 q 619 1193 619 1229 q 600 1141 619 1158 q 554 1124 581 1124 q 509 1141 528 1124 q 490 1193 490 1158 z "},"Ė":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 m 425 1271 q 474 1252 453 1271 q 496 1193 496 1233 q 474 1135 496 1154 q 425 1115 453 1115 q 374 1135 394 1115 q 353 1193 353 1154 q 374 1252 353 1233 q 425 1271 394 1271 z "},"È":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 m 389 1311 q 427 1242 404 1281 q 476 1168 450 1204 q 522 1106 501 1132 l 522 1089 l 440 1089 q 388 1135 417 1108 q 330 1192 358 1163 q 278 1250 301 1222 q 243 1297 256 1278 l 243 1311 l 389 1311 z "},"Ē":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 m 629 1188 l 629 1089 l 217 1089 l 217 1188 l 629 1188 z "},"Ŋ":{"ha":1056,"x_min":135,"x_max":921,"o":"m 660 -264 q 599 -259 625 -264 q 554 -246 574 -254 l 554 -140 q 603 -150 576 -146 q 660 -154 629 -154 q 728 -141 696 -154 q 783 -94 761 -128 q 804 0 804 -60 l 244 824 l 239 824 q 244 749 242 797 q 248 644 246 700 q 250 538 250 589 l 250 0 l 135 0 l 135 992 l 279 992 l 808 197 l 814 197 q 809 273 811 228 q 806 371 807 318 q 804 475 804 424 l 804 992 l 921 992 l 921 8 q 889 -145 921 -85 q 799 -235 857 -206 q 660 -264 740 -264 z "},"Ę":{"ha":772,"x_min":135,"x_max":689,"o":"m 689 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 572 l 664 572 l 664 464 l 260 464 l 260 110 l 689 110 l 689 0 m 553 -161 q 569 -208 553 -192 q 615 -224 586 -224 q 655 -220 639 -224 q 682 -215 671 -217 l 682 -293 q 643 -302 663 -299 q 596 -306 624 -306 q 488 -271 522 -306 q 453 -175 453 -236 q 473 -97 453 -135 q 523 -29 493 -60 q 581 21 553 1 l 647 0 q 576 -81 600 -44 q 553 -161 553 -118 z "},"Ð":{"ha":1014,"x_min":42,"x_max":929,"o":"m 440 992 q 699 936 589 992 q 869 773 808 881 q 929 506 929 665 q 867 226 929 339 q 690 57 806 114 q 410 0 574 0 l 144 0 l 144 436 l 42 436 l 42 544 l 144 544 l 144 992 l 440 992 m 422 885 l 269 885 l 269 544 l 517 544 l 517 436 l 269 436 l 269 107 l 394 107 q 697 206 597 107 q 797 501 797 306 q 753 718 797 633 q 625 844 708 803 q 422 885 542 885 z "},"F":{"ha":721,"x_min":135,"x_max":689,"o":"m 260 0 l 135 0 l 135 992 l 689 992 l 689 882 l 260 882 l 260 531 l 663 531 l 663 421 l 260 421 l 260 0 z "},"G":{"ha":1011,"x_min":85,"x_max":908,"o":"m 565 524 l 908 524 l 908 38 q 746 -1 828 11 q 560 -14 664 -14 q 300 48 406 -14 q 140 224 194 110 q 85 496 85 339 q 146 765 85 651 q 322 942 207 879 q 599 1006 436 1006 q 756 990 682 1006 q 894 947 831 975 l 847 839 q 728 879 794 863 q 592 896 663 896 q 389 847 474 896 q 260 709 304 799 q 215 496 215 619 q 253 287 215 378 q 374 145 292 196 q 589 94 456 94 q 700 101 654 94 q 783 118 746 108 l 783 413 l 565 413 l 565 524 z "},"Ğ":{"ha":1011,"x_min":85,"x_max":908,"o":"m 565 524 l 908 524 l 908 38 q 746 -1 828 11 q 560 -14 664 -14 q 300 48 406 -14 q 140 224 194 110 q 85 496 85 339 q 146 765 85 651 q 322 942 207 879 q 599 1006 436 1006 q 756 990 682 1006 q 894 947 831 975 l 847 839 q 728 879 794 863 q 592 896 663 896 q 389 847 474 896 q 260 709 304 799 q 215 496 215 619 q 253 287 215 378 q 374 145 292 196 q 589 94 456 94 q 700 101 654 94 q 783 118 746 108 l 783 413 l 565 413 l 565 524 m 778 1275 q 747 1178 774 1219 q 672 1113 719 1136 q 558 1089 625 1089 q 403 1140 456 1089 q 346 1275 351 1190 l 421 1275 q 442 1219 425 1238 q 490 1194 460 1200 q 561 1188 519 1188 q 627 1194 597 1188 q 677 1220 657 1201 q 701 1275 697 1239 l 778 1275 z "},"Ģ":{"ha":1011,"x_min":85,"x_max":908,"o":"m 565 524 l 908 524 l 908 38 q 746 -1 828 11 q 560 -14 664 -14 q 300 48 406 -14 q 140 224 194 110 q 85 496 85 339 q 146 765 85 651 q 322 942 207 879 q 599 1006 436 1006 q 756 990 682 1006 q 894 947 831 975 l 847 839 q 728 879 794 863 q 592 896 663 896 q 389 847 474 896 q 260 709 304 799 q 215 496 215 619 q 253 287 215 378 q 374 145 292 196 q 589 94 456 94 q 700 101 654 94 q 783 118 746 108 l 783 413 l 565 413 l 565 524 m 647 -97 q 624 -160 642 -122 q 584 -237 607 -199 q 536 -307 561 -276 l 469 -307 l 469 -290 q 492 -230 481 -267 q 514 -153 504 -193 q 526 -85 524 -114 l 647 -85 l 647 -97 z "},"Ġ":{"ha":1011,"x_min":85,"x_max":908,"o":"m 565 524 l 908 524 l 908 38 q 746 -1 828 11 q 560 -14 664 -14 q 300 48 406 -14 q 140 224 194 110 q 85 496 85 339 q 146 765 85 651 q 322 942 207 879 q 599 1006 436 1006 q 756 990 682 1006 q 894 947 831 975 l 847 839 q 728 879 794 863 q 592 896 663 896 q 389 847 474 896 q 260 709 304 799 q 215 496 215 619 q 253 287 215 378 q 374 145 292 196 q 589 94 456 94 q 700 101 654 94 q 783 118 746 108 l 783 413 l 565 413 l 565 524 m 564 1271 q 613 1252 592 1271 q 635 1193 635 1233 q 613 1135 635 1154 q 564 1115 592 1115 q 513 1135 533 1115 q 492 1193 492 1154 q 513 1252 492 1233 q 564 1271 533 1271 z "},"ẞ":{"ha":985,"x_min":125,"x_max":936,"o":"m 500 1006 q 658 978 592 1006 q 767 901 724 951 q 832 781 810 850 l 635 571 q 790 534 722 568 q 897 438 858 500 q 936 286 936 375 q 900 131 936 199 q 788 25 864 64 q 590 -14 713 -14 q 453 -2 518 -14 q 332 40 389 10 l 332 154 q 456 106 389 124 q 585 89 524 89 q 754 141 703 89 q 806 288 806 193 q 746 423 806 376 q 567 469 686 469 l 481 469 l 481 560 l 697 788 q 653 848 681 824 q 586 885 625 872 q 493 897 547 897 q 354 865 408 897 q 274 774 300 832 q 249 642 249 717 l 249 0 l 125 0 l 125 642 q 165 827 125 744 q 289 958 206 910 q 500 1006 372 1006 z "},"H":{"ha":1029,"x_min":135,"x_max":893,"o":"m 893 0 l 768 0 l 768 463 l 260 463 l 260 0 l 135 0 l 135 992 l 260 992 l 260 572 l 768 572 l 768 992 l 893 992 l 893 0 z "},"Ħ":{"ha":1029,"x_min":0,"x_max":1028,"o":"m 135 0 l 135 726 l 0 726 l 0 826 l 135 826 l 135 992 l 260 992 l 260 826 l 768 826 l 768 992 l 893 992 l 893 826 l 1028 826 l 1028 726 l 893 726 l 893 0 l 768 0 l 768 463 l 260 463 l 260 0 l 135 0 m 260 572 l 768 572 l 768 726 l 260 726 l 260 572 z "},"I":{"ha":471,"x_min":56,"x_max":414,"o":"m 414 0 l 56 0 l 56 72 l 172 99 l 172 892 l 56 919 l 56 992 l 414 992 l 414 919 l 297 892 l 297 99 l 414 72 l 414 0 z "},"Í":{"ha":471,"x_min":56,"x_max":442,"o":"m 414 0 l 56 0 l 56 72 l 172 99 l 172 892 l 56 919 l 56 992 l 414 992 l 414 919 l 297 892 l 297 99 l 414 72 l 414 0 m 442 1297 q 406 1250 429 1278 q 353 1192 382 1222 q 297 1135 325 1163 q 243 1089 268 1108 l 163 1089 l 163 1106 q 208 1168 183 1132 q 256 1242 232 1204 q 294 1311 279 1281 l 442 1311 l 442 1297 z "},"Î":{"ha":471,"x_min":1,"x_max":471,"o":"m 414 0 l 56 0 l 56 72 l 172 99 l 172 892 l 56 919 l 56 992 l 414 992 l 414 919 l 297 892 l 297 99 l 414 72 l 414 0 m 297 1311 q 345 1242 314 1281 q 410 1167 376 1204 q 471 1104 444 1131 l 471 1089 l 385 1089 q 310 1144 349 1111 q 233 1214 271 1176 q 158 1144 196 1176 q 85 1089 121 1113 l 1 1089 l 1 1104 q 60 1168 28 1132 q 124 1242 93 1204 q 172 1311 154 1281 l 297 1311 z "},"Ï":{"ha":471,"x_min":42,"x_max":432,"o":"m 414 0 l 56 0 l 56 72 l 172 99 l 172 892 l 56 919 l 56 992 l 414 992 l 414 919 l 297 892 l 297 99 l 414 72 l 414 0 m 42 1193 q 61 1245 42 1229 q 107 1261 81 1261 q 153 1245 133 1261 q 172 1193 172 1229 q 153 1141 172 1158 q 107 1124 133 1124 q 61 1141 81 1124 q 42 1193 42 1158 m 303 1193 q 322 1245 303 1229 q 367 1261 340 1261 q 413 1245 393 1261 q 432 1193 432 1229 q 413 1141 432 1158 q 367 1124 393 1124 q 322 1141 340 1124 q 303 1193 303 1158 z "},"İ":{"ha":471,"x_min":56,"x_max":414,"o":"m 414 0 l 56 0 l 56 72 l 172 99 l 172 892 l 56 919 l 56 992 l 414 992 l 414 919 l 297 892 l 297 99 l 414 72 l 414 0 m 238 1271 q 287 1252 265 1271 q 308 1193 308 1233 q 287 1135 308 1154 q 238 1115 265 1115 q 186 1135 207 1115 q 165 1193 165 1154 q 186 1252 165 1233 q 238 1271 207 1271 z "},"Ì":{"ha":471,"x_min":56,"x_max":414,"o":"m 414 0 l 56 0 l 56 72 l 172 99 l 172 892 l 56 919 l 56 992 l 414 992 l 414 919 l 297 892 l 297 99 l 414 72 l 414 0 m 201 1311 q 240 1242 217 1281 q 288 1168 263 1204 q 335 1106 314 1132 l 335 1089 l 253 1089 q 200 1135 229 1108 q 142 1192 171 1163 q 91 1250 114 1222 q 56 1297 68 1278 l 56 1311 l 201 1311 z "},"Ī":{"ha":471,"x_min":29,"x_max":442,"o":"m 414 0 l 56 0 l 56 72 l 172 99 l 172 892 l 56 919 l 56 992 l 414 992 l 414 919 l 297 892 l 297 99 l 414 72 l 414 0 m 442 1188 l 442 1089 l 29 1089 l 29 1188 l 442 1188 z "},"Į":{"ha":471,"x_min":56,"x_max":414,"o":"m 414 0 l 56 0 l 56 72 l 172 99 l 172 892 l 56 919 l 56 992 l 414 992 l 414 919 l 297 892 l 297 99 l 414 72 l 414 0 m 283 -161 q 300 -208 283 -192 q 346 -224 317 -224 q 385 -220 369 -224 q 413 -215 401 -217 l 413 -293 q 374 -302 393 -299 q 326 -306 354 -306 q 218 -271 253 -306 q 183 -175 183 -236 q 203 -97 183 -135 q 253 -29 224 -60 q 311 21 283 1 l 378 0 q 307 -81 331 -44 q 283 -161 283 -118 z "},"J":{"ha":379,"x_min":-108,"x_max":253,"o":"m -6 -264 q -64 -259 -39 -264 q -108 -246 -89 -254 l -108 -140 q -61 -150 -86 -146 q -8 -154 -36 -154 q 58 -140 26 -154 q 108 -92 89 -126 q 128 6 128 -57 l 128 992 l 253 992 l 253 15 q 221 -142 253 -81 q 131 -234 189 -204 q -6 -264 72 -264 z "},"K":{"ha":860,"x_min":135,"x_max":860,"o":"m 860 0 l 713 0 l 361 474 l 260 385 l 260 0 l 135 0 l 135 992 l 260 992 l 260 503 q 344 597 301 550 q 431 692 388 644 l 699 992 l 844 992 l 451 560 l 860 0 z "},"Ķ":{"ha":860,"x_min":135,"x_max":860,"o":"m 860 0 l 713 0 l 361 474 l 260 385 l 260 0 l 135 0 l 135 992 l 260 992 l 260 503 q 344 597 301 550 q 431 692 388 644 l 699 992 l 844 992 l 451 560 l 860 0 m 547 -97 q 524 -160 542 -122 q 484 -237 507 -199 q 436 -307 461 -276 l 369 -307 l 369 -290 q 392 -230 381 -267 q 414 -153 404 -193 q 426 -85 424 -114 l 547 -85 l 547 -97 z "},"L":{"ha":728,"x_min":135,"x_max":693,"o":"m 135 0 l 135 992 l 260 992 l 260 111 l 693 111 l 693 0 l 135 0 z "},"Ĺ":{"ha":728,"x_min":121,"x_max":693,"o":"m 135 0 l 135 992 l 260 992 l 260 111 l 693 111 l 693 0 l 135 0 m 400 1297 q 364 1250 388 1278 q 312 1192 340 1222 q 255 1135 283 1163 q 201 1089 226 1108 l 121 1089 l 121 1106 q 166 1168 142 1132 q 214 1242 190 1204 q 253 1311 238 1281 l 400 1311 l 400 1297 z "},"Ľ":{"ha":728,"x_min":135,"x_max":693,"o":"m 135 0 l 135 992 l 260 992 l 260 111 l 693 111 l 693 0 l 135 0 m 693 979 q 672 917 688 954 q 635 840 656 879 q 593 769 614 800 l 526 769 l 526 786 q 540 832 533 806 q 553 887 547 858 q 565 942 560 915 q 572 992 569 969 l 693 992 l 693 979 z "},"Ļ":{"ha":728,"x_min":135,"x_max":693,"o":"m 135 0 l 135 992 l 260 992 l 260 111 l 693 111 l 693 0 l 135 0 m 506 -97 q 483 -160 500 -122 q 442 -237 465 -199 q 394 -307 419 -276 l 328 -307 l 328 -290 q 351 -230 339 -267 q 372 -153 363 -193 q 385 -85 382 -114 l 506 -85 l 506 -97 z "},"Ł":{"ha":728,"x_min":18,"x_max":693,"o":"m 135 0 l 135 343 l 67 304 l 18 388 l 135 457 l 135 992 l 260 992 l 260 531 l 450 643 l 500 556 l 260 417 l 260 111 l 693 111 l 693 0 l 135 0 z "},"M":{"ha":1260,"x_min":135,"x_max":1125,"o":"m 572 0 l 246 869 l 240 869 q 245 799 243 842 q 249 705 247 756 q 250 601 250 654 l 250 0 l 135 0 l 135 992 l 319 992 l 625 179 l 631 179 l 942 992 l 1125 992 l 1125 0 l 1001 0 l 1001 610 q 1003 706 1001 658 q 1007 797 1004 754 q 1011 868 1010 839 l 1006 868 l 675 0 l 572 0 z "},"N":{"ha":1056,"x_min":135,"x_max":921,"o":"m 921 0 l 775 0 l 244 824 l 239 824 q 244 748 242 792 q 248 655 246 704 q 250 554 250 606 l 250 0 l 135 0 l 135 992 l 279 992 l 808 171 l 814 171 q 810 238 813 193 q 806 335 808 282 q 804 432 804 388 l 804 992 l 921 992 l 921 0 z "},"Ń":{"ha":1056,"x_min":135,"x_max":921,"o":"m 921 0 l 775 0 l 244 824 l 239 824 q 244 748 242 792 q 248 655 246 704 q 250 554 250 606 l 250 0 l 135 0 l 135 992 l 279 992 l 808 171 l 814 171 q 810 238 813 193 q 806 335 808 282 q 804 432 804 388 l 804 992 l 921 992 l 921 0 m 733 1297 q 697 1250 721 1278 q 645 1192 674 1222 q 588 1135 617 1163 q 535 1089 560 1108 l 454 1089 l 454 1106 q 499 1168 475 1132 q 547 1242 524 1204 q 586 1311 571 1281 l 733 1311 l 733 1297 z "},"Ň":{"ha":1056,"x_min":135,"x_max":921,"o":"m 921 0 l 775 0 l 244 824 l 239 824 q 244 748 242 792 q 248 655 246 704 q 250 554 250 606 l 250 0 l 135 0 l 135 992 l 279 992 l 808 171 l 814 171 q 810 238 813 193 q 806 335 808 282 q 804 432 804 388 l 804 992 l 921 992 l 921 0 m 464 1089 q 415 1158 446 1121 q 351 1231 385 1194 q 293 1293 318 1267 l 293 1311 l 376 1311 q 451 1254 413 1288 q 525 1183 490 1221 q 601 1254 563 1221 q 676 1311 640 1288 l 763 1311 l 763 1293 q 702 1231 736 1267 q 637 1158 668 1194 q 589 1089 606 1121 l 464 1089 z "},"Ņ":{"ha":1056,"x_min":135,"x_max":921,"o":"m 921 0 l 775 0 l 244 824 l 239 824 q 244 748 242 792 q 248 655 246 704 q 250 554 250 606 l 250 0 l 135 0 l 135 992 l 279 992 l 808 171 l 814 171 q 810 238 813 193 q 806 335 808 282 q 804 432 804 388 l 804 992 l 921 992 l 921 0 m 617 -97 q 594 -160 611 -122 q 553 -237 576 -199 q 506 -307 531 -276 l 439 -307 l 439 -290 q 462 -230 450 -267 q 483 -153 474 -193 q 496 -85 493 -114 l 617 -85 l 617 -97 z "},"Ñ":{"ha":1056,"x_min":135,"x_max":921,"o":"m 921 0 l 775 0 l 244 824 l 239 824 q 244 748 242 792 q 248 655 246 704 q 250 554 250 606 l 250 0 l 135 0 l 135 992 l 279 992 l 808 171 l 814 171 q 810 238 813 193 q 806 335 808 282 q 804 432 804 388 l 804 992 l 921 992 l 921 0 m 274 1089 q 290 1163 278 1131 q 321 1219 301 1196 q 367 1254 340 1242 q 426 1267 393 1267 q 485 1255 457 1267 q 540 1227 514 1243 q 591 1199 567 1211 q 638 1188 615 1188 q 687 1208 669 1188 q 714 1268 704 1228 l 783 1268 q 736 1139 775 1188 q 632 1090 697 1090 q 575 1102 603 1090 q 520 1130 547 1114 q 469 1158 493 1146 q 421 1169 444 1169 q 371 1149 388 1169 q 344 1089 354 1129 l 274 1089 z "},"O":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 z "},"Œ":{"ha":1289,"x_min":85,"x_max":1206,"o":"m 536 1007 q 606 1003 572 1007 q 669 992 639 999 l 1206 992 l 1206 882 l 807 882 l 807 572 l 1179 572 l 1179 464 l 807 464 l 807 110 l 1206 110 l 1206 0 l 678 0 q 613 -10 647 -6 q 543 -14 579 -14 q 287 50 389 -14 q 135 229 185 114 q 85 499 85 344 q 134 767 85 653 q 284 944 183 881 q 536 1007 385 1007 m 547 897 q 399 870 463 897 q 296 791 336 843 q 235 665 256 739 q 215 497 215 592 q 251 282 215 372 q 360 143 286 192 q 546 94 433 94 q 620 101 585 94 q 683 118 656 107 l 683 875 q 620 892 654 886 q 547 897 586 897 z "},"Ó":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 m 749 1297 q 713 1250 736 1278 q 660 1192 689 1222 q 603 1135 632 1163 q 550 1089 575 1108 l 469 1089 l 469 1106 q 515 1168 490 1132 q 563 1242 539 1204 q 601 1311 586 1281 l 749 1311 l 749 1297 z "},"Ô":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 m 604 1311 q 652 1242 621 1281 q 717 1167 683 1204 q 778 1104 751 1131 l 778 1089 l 692 1089 q 617 1144 656 1111 q 540 1214 578 1176 q 465 1144 503 1176 q 392 1089 428 1113 l 308 1089 l 308 1104 q 367 1168 335 1132 q 431 1242 400 1204 q 479 1311 461 1281 l 604 1311 z "},"Ö":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 m 349 1193 q 368 1245 349 1229 q 414 1261 388 1261 q 460 1245 440 1261 q 479 1193 479 1229 q 460 1141 479 1158 q 414 1124 440 1124 q 368 1141 388 1124 q 349 1193 349 1158 m 610 1193 q 628 1245 610 1229 q 674 1261 647 1261 q 719 1245 700 1261 q 739 1193 739 1229 q 719 1141 739 1158 q 674 1124 700 1124 q 628 1141 647 1124 q 610 1193 610 1158 z "},"Ò":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 m 508 1311 q 547 1242 524 1281 q 595 1168 569 1204 q 642 1106 621 1132 l 642 1089 l 560 1089 q 507 1135 536 1108 q 449 1192 478 1163 q 398 1250 421 1222 q 363 1297 375 1278 l 363 1311 l 508 1311 z "},"Ő":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 m 792 1297 q 760 1251 781 1279 q 712 1193 739 1224 q 658 1135 685 1163 q 607 1089 631 1108 l 538 1089 l 538 1106 q 579 1168 557 1132 q 623 1242 601 1204 q 658 1311 644 1281 l 792 1311 l 792 1297 m 547 1297 q 515 1251 536 1279 q 467 1193 494 1224 q 413 1135 440 1163 q 363 1089 386 1108 l 293 1089 l 293 1106 q 335 1168 313 1132 q 378 1242 357 1204 q 414 1311 399 1281 l 547 1311 l 547 1297 z "},"Ō":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 m 749 1188 l 749 1089 l 336 1089 l 336 1188 l 749 1188 z "},"Ø":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 401 3 465 -14 q 286 51 336 19 l 219 -43 l 135 13 l 207 115 q 115 281 146 183 q 85 499 85 378 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 678 990 617 1007 q 792 944 740 974 l 856 1036 l 940 979 l 869 881 q 967 717 933 814 q 1000 497 1000 619 m 868 497 q 797 778 868 676 l 353 147 q 437 108 389 122 q 543 94 485 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 m 217 497 q 233 343 217 413 q 282 222 249 274 l 725 849 q 645 885 690 872 q 544 897 600 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 z "},"Õ":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 971 288 1000 382 q 884 126 942 194 q 741 22 826 58 q 543 -14 656 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 m 289 1089 q 305 1163 293 1131 q 336 1219 317 1196 q 382 1254 356 1242 q 442 1267 408 1267 q 501 1255 472 1267 q 556 1227 529 1243 q 606 1199 582 1211 q 653 1188 631 1188 q 702 1208 685 1188 q 729 1268 719 1228 l 799 1268 q 751 1139 790 1188 q 647 1090 713 1090 q 590 1102 618 1090 q 535 1130 563 1114 q 484 1158 508 1146 q 436 1169 460 1169 q 386 1149 403 1169 q 360 1089 369 1129 l 289 1089 z "},"P":{"ha":840,"x_min":135,"x_max":769,"o":"m 397 992 q 681 915 592 992 q 769 700 769 839 q 749 583 769 639 q 683 482 729 526 q 561 412 638 438 q 374 386 485 386 l 260 386 l 260 0 l 135 0 l 135 992 l 397 992 m 386 885 l 260 885 l 260 493 l 360 493 q 517 513 454 493 q 610 578 579 533 q 640 694 640 622 q 579 838 640 790 q 386 885 518 885 z "},"Q":{"ha":1085,"x_min":85,"x_max":1000,"o":"m 1000 497 q 967 278 1000 376 q 871 111 935 179 q 711 11 807 43 l 949 -236 l 769 -236 l 578 -12 q 560 -13 569 -12 q 543 -14 551 -14 q 340 23 426 -14 q 197 127 254 60 q 113 289 140 194 q 85 499 85 383 q 135 765 85 651 q 287 943 185 879 q 544 1007 389 1007 q 794 944 693 1007 q 948 766 896 881 q 1000 497 1000 651 m 217 497 q 251 282 217 372 q 359 143 286 192 q 543 94 432 94 q 727 143 656 94 q 833 282 799 192 q 868 497 868 372 q 790 791 868 685 q 544 897 713 897 q 359 849 432 897 q 251 712 286 801 q 217 497 217 622 z "},"R":{"ha":864,"x_min":135,"x_max":843,"o":"m 408 992 q 612 960 532 992 q 731 867 692 929 q 769 710 769 804 q 740 578 769 631 q 666 494 711 525 q 571 444 621 463 l 843 0 l 697 0 l 457 410 l 260 410 l 260 0 l 135 0 l 135 992 l 408 992 m 401 883 l 260 883 l 260 515 l 408 515 q 585 563 529 515 q 640 704 640 611 q 615 808 640 769 q 536 865 589 847 q 401 883 483 883 z "},"Ŕ":{"ha":864,"x_min":135,"x_max":843,"o":"m 408 992 q 612 960 532 992 q 731 867 692 929 q 769 710 769 804 q 740 578 769 631 q 666 494 711 525 q 571 444 621 463 l 843 0 l 697 0 l 457 410 l 260 410 l 260 0 l 135 0 l 135 992 l 408 992 m 401 883 l 260 883 l 260 515 l 408 515 q 585 563 529 515 q 640 704 640 611 q 615 808 640 769 q 536 865 589 847 q 401 883 483 883 m 638 1297 q 601 1250 625 1278 q 549 1192 578 1222 q 492 1135 521 1163 q 439 1089 464 1108 l 358 1089 l 358 1106 q 403 1168 379 1132 q 451 1242 428 1204 q 490 1311 475 1281 l 638 1311 l 638 1297 z "},"Ř":{"ha":864,"x_min":135,"x_max":843,"o":"m 408 992 q 612 960 532 992 q 731 867 692 929 q 769 710 769 804 q 740 578 769 631 q 666 494 711 525 q 571 444 621 463 l 843 0 l 697 0 l 457 410 l 260 410 l 260 0 l 135 0 l 135 992 l 408 992 m 401 883 l 260 883 l 260 515 l 408 515 q 585 563 529 515 q 640 704 640 611 q 615 808 640 769 q 536 865 589 847 q 401 883 483 883 m 368 1089 q 319 1158 350 1121 q 256 1231 289 1194 q 197 1293 222 1267 l 197 1311 l 281 1311 q 356 1254 317 1288 q 429 1183 394 1221 q 506 1254 467 1221 q 581 1311 544 1288 l 667 1311 l 667 1293 q 606 1231 640 1267 q 541 1158 572 1194 q 493 1089 510 1121 l 368 1089 z "},"Ŗ":{"ha":864,"x_min":135,"x_max":843,"o":"m 408 992 q 612 960 532 992 q 731 867 692 929 q 769 710 769 804 q 740 578 769 631 q 666 494 711 525 q 571 444 621 463 l 843 0 l 697 0 l 457 410 l 260 410 l 260 0 l 135 0 l 135 992 l 408 992 m 401 883 l 260 883 l 260 515 l 408 515 q 585 563 529 515 q 640 704 640 611 q 615 808 640 769 q 536 865 589 847 q 401 883 483 883 m 544 -97 q 522 -160 539 -122 q 481 -237 504 -199 q 433 -307 458 -276 l 367 -307 l 367 -290 q 390 -230 378 -267 q 411 -153 401 -193 q 424 -85 421 -114 l 544 -85 l 544 -97 z "},"S":{"ha":763,"x_min":71,"x_max":697,"o":"m 697 265 q 654 115 697 176 q 531 19 611 53 q 343 -14 451 -14 q 237 -8 288 -14 q 144 8 186 -3 q 71 33 103 18 l 71 153 q 195 113 121 131 q 349 94 269 94 q 472 114 422 94 q 547 169 522 133 q 572 254 572 206 q 551 336 572 303 q 480 398 531 369 q 339 458 429 426 q 227 509 275 482 q 147 571 179 536 q 99 650 115 606 q 83 753 83 694 q 124 888 83 832 q 235 975 164 944 q 400 1006 307 1006 q 550 990 482 1006 q 674 950 618 975 l 635 843 q 523 881 583 865 q 397 896 463 896 q 293 878 335 896 q 231 827 251 860 q 210 751 210 794 q 231 668 210 701 q 299 608 251 635 q 426 551 346 582 q 574 483 514 519 q 666 394 635 446 q 697 265 697 343 z "},"Ś":{"ha":763,"x_min":71,"x_max":697,"o":"m 697 265 q 654 115 697 176 q 531 19 611 53 q 343 -14 451 -14 q 237 -8 288 -14 q 144 8 186 -3 q 71 33 103 18 l 71 153 q 195 113 121 131 q 349 94 269 94 q 472 114 422 94 q 547 169 522 133 q 572 254 572 206 q 551 336 572 303 q 480 398 531 369 q 339 458 429 426 q 227 509 275 482 q 147 571 179 536 q 99 650 115 606 q 83 753 83 694 q 124 888 83 832 q 235 975 164 944 q 400 1006 307 1006 q 550 990 482 1006 q 674 950 618 975 l 635 843 q 523 881 583 865 q 397 896 463 896 q 293 878 335 896 q 231 827 251 860 q 210 751 210 794 q 231 668 210 701 q 299 608 251 635 q 426 551 346 582 q 574 483 514 519 q 666 394 635 446 q 697 265 697 343 m 601 1297 q 565 1250 589 1278 q 513 1192 542 1222 q 456 1135 485 1163 q 403 1089 428 1108 l 322 1089 l 322 1106 q 367 1168 343 1132 q 415 1242 392 1204 q 454 1311 439 1281 l 601 1311 l 601 1297 z "},"Š":{"ha":763,"x_min":71,"x_max":697,"o":"m 697 265 q 654 115 697 176 q 531 19 611 53 q 343 -14 451 -14 q 237 -8 288 -14 q 144 8 186 -3 q 71 33 103 18 l 71 153 q 195 113 121 131 q 349 94 269 94 q 472 114 422 94 q 547 169 522 133 q 572 254 572 206 q 551 336 572 303 q 480 398 531 369 q 339 458 429 426 q 227 509 275 482 q 147 571 179 536 q 99 650 115 606 q 83 753 83 694 q 124 888 83 832 q 235 975 164 944 q 400 1006 307 1006 q 550 990 482 1006 q 674 950 618 975 l 635 843 q 523 881 583 865 q 397 896 463 896 q 293 878 335 896 q 231 827 251 860 q 210 751 210 794 q 231 668 210 701 q 299 608 251 635 q 426 551 346 582 q 574 483 514 519 q 666 394 635 446 q 697 265 697 343 m 332 1089 q 283 1158 314 1121 q 219 1231 253 1194 q 161 1293 186 1267 l 161 1311 l 244 1311 q 319 1254 281 1288 q 393 1183 358 1221 q 469 1254 431 1221 q 544 1311 508 1288 l 631 1311 l 631 1293 q 570 1231 604 1267 q 505 1158 536 1194 q 457 1089 474 1121 l 332 1089 z "},"Ş":{"ha":763,"x_min":71,"x_max":697,"o":"m 697 265 q 654 115 697 176 q 531 19 611 53 q 343 -14 451 -14 q 237 -8 288 -14 q 144 8 186 -3 q 71 33 103 18 l 71 153 q 195 113 121 131 q 349 94 269 94 q 472 114 422 94 q 547 169 522 133 q 572 254 572 206 q 551 336 572 303 q 480 398 531 369 q 339 458 429 426 q 227 509 275 482 q 147 571 179 536 q 99 650 115 606 q 83 753 83 694 q 124 888 83 832 q 235 975 164 944 q 400 1006 307 1006 q 550 990 482 1006 q 674 950 618 975 l 635 843 q 523 881 583 865 q 397 896 463 896 q 293 878 335 896 q 231 827 251 860 q 210 751 210 794 q 231 668 210 701 q 299 608 251 635 q 426 551 346 582 q 574 483 514 519 q 666 394 635 446 q 697 265 697 343 m 494 -193 q 443 -297 494 -260 q 289 -333 392 -333 q 249 -331 268 -333 q 219 -326 231 -329 l 219 -250 q 253 -255 232 -253 q 293 -257 274 -257 q 369 -244 343 -257 q 396 -196 396 -231 q 359 -143 396 -160 q 269 -119 322 -126 l 329 0 l 410 0 l 374 -74 q 435 -95 407 -81 q 478 -133 463 -110 q 494 -193 494 -157 z "},"Ș":{"ha":763,"x_min":71,"x_max":697,"o":"m 697 265 q 654 115 697 176 q 531 19 611 53 q 343 -14 451 -14 q 237 -8 288 -14 q 144 8 186 -3 q 71 33 103 18 l 71 153 q 195 113 121 131 q 349 94 269 94 q 472 114 422 94 q 547 169 522 133 q 572 254 572 206 q 551 336 572 303 q 480 398 531 369 q 339 458 429 426 q 227 509 275 482 q 147 571 179 536 q 99 650 115 606 q 83 753 83 694 q 124 888 83 832 q 235 975 164 944 q 400 1006 307 1006 q 550 990 482 1006 q 674 950 618 975 l 635 843 q 523 881 583 865 q 397 896 463 896 q 293 878 335 896 q 231 827 251 860 q 210 751 210 794 q 231 668 210 701 q 299 608 251 635 q 426 551 346 582 q 574 483 514 519 q 666 394 635 446 q 697 265 697 343 m 446 -97 q 423 -160 440 -122 q 383 -237 406 -199 q 335 -307 360 -276 l 268 -307 l 268 -290 q 291 -230 279 -267 q 313 -153 303 -193 q 325 -85 322 -114 l 446 -85 l 446 -97 z "},"T":{"ha":772,"x_min":14,"x_max":757,"o":"m 449 0 l 324 0 l 324 882 l 14 882 l 14 992 l 757 992 l 757 882 l 449 882 l 449 0 z "},"Ť":{"ha":772,"x_min":14,"x_max":757,"o":"m 449 0 l 324 0 l 324 882 l 14 882 l 14 992 l 757 992 l 757 882 l 449 882 l 449 0 m 322 1089 q 274 1158 304 1121 q 210 1231 243 1194 q 151 1293 176 1267 l 151 1311 l 235 1311 q 310 1254 271 1288 q 383 1183 349 1221 q 460 1254 421 1221 q 535 1311 499 1288 l 621 1311 l 621 1293 q 560 1231 594 1267 q 495 1158 526 1194 q 447 1089 464 1121 l 322 1089 z "},"Ț":{"ha":772,"x_min":14,"x_max":757,"o":"m 449 0 l 324 0 l 324 882 l 14 882 l 14 992 l 757 992 l 757 882 l 449 882 l 449 0 m 475 -97 q 452 -160 469 -122 q 412 -237 435 -199 q 364 -307 389 -276 l 297 -307 l 297 -290 q 320 -230 308 -267 q 342 -153 332 -193 q 354 -85 351 -114 l 475 -85 l 475 -97 z "},"Þ":{"ha":840,"x_min":135,"x_max":769,"o":"m 769 531 q 750 411 769 468 q 685 310 731 354 q 563 241 639 267 q 372 215 486 215 l 260 215 l 260 0 l 135 0 l 135 992 l 260 992 l 260 819 l 393 819 q 682 743 594 819 q 769 531 769 667 m 360 321 q 519 341 457 321 q 610 406 581 361 q 640 524 640 451 q 580 666 640 619 q 383 713 519 713 l 260 713 l 260 321 l 360 321 z "},"U":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 z "},"Ú":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 m 714 1297 q 678 1250 701 1278 q 626 1192 654 1222 q 569 1135 597 1163 q 515 1089 540 1108 l 435 1089 l 435 1106 q 480 1168 456 1132 q 528 1242 504 1204 q 567 1311 551 1281 l 714 1311 l 714 1297 z "},"Ŭ":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 m 724 1275 q 692 1178 719 1219 q 618 1113 665 1136 q 504 1089 571 1089 q 349 1140 401 1089 q 292 1275 297 1190 l 367 1275 q 388 1219 371 1238 q 435 1194 406 1200 q 507 1188 465 1188 q 573 1194 543 1188 q 623 1220 603 1201 q 647 1275 643 1239 l 724 1275 z "},"Û":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 m 569 1311 q 617 1242 586 1281 q 683 1167 649 1204 q 743 1104 717 1131 l 743 1089 l 657 1089 q 582 1144 621 1111 q 506 1214 543 1176 q 431 1144 468 1176 q 357 1089 393 1113 l 274 1089 l 274 1104 q 333 1168 300 1132 q 396 1242 365 1204 q 444 1311 426 1281 l 569 1311 z "},"Ü":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 m 314 1193 q 333 1245 314 1229 q 379 1261 353 1261 q 425 1245 406 1261 q 444 1193 444 1229 q 425 1141 444 1158 q 379 1124 406 1124 q 333 1141 353 1124 q 314 1193 314 1158 m 575 1193 q 594 1245 575 1229 q 639 1261 613 1261 q 685 1245 665 1261 q 704 1193 704 1229 q 685 1141 704 1158 q 639 1124 665 1124 q 594 1141 613 1124 q 575 1193 575 1158 z "},"Ù":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 m 474 1311 q 512 1242 489 1281 q 560 1168 535 1204 q 607 1106 586 1132 l 607 1089 l 525 1089 q 472 1135 501 1108 q 415 1192 443 1163 q 363 1250 386 1222 q 328 1297 340 1278 l 328 1311 l 474 1311 z "},"Ű":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 m 757 1297 q 725 1251 746 1279 q 677 1193 704 1224 q 623 1135 650 1163 q 572 1089 596 1108 l 503 1089 l 503 1106 q 544 1168 522 1132 q 588 1242 567 1204 q 624 1311 610 1281 l 757 1311 l 757 1297 m 513 1297 q 481 1251 501 1279 q 433 1193 460 1224 q 378 1135 406 1163 q 328 1089 351 1108 l 258 1089 l 258 1106 q 300 1168 278 1132 q 343 1242 322 1204 q 379 1311 364 1281 l 513 1311 l 513 1297 z "},"Ū":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 m 714 1188 l 714 1089 l 301 1089 l 301 1188 l 714 1188 z "},"Ų":{"ha":1015,"x_min":125,"x_max":889,"o":"m 647 -149 q 664 -206 647 -189 q 710 -224 681 -224 q 749 -220 733 -224 q 776 -215 765 -217 l 776 -293 q 738 -302 757 -299 q 690 -306 718 -306 q 582 -269 617 -306 q 547 -162 547 -233 q 569 -76 547 -118 q 624 1 592 -33 q 683 56 656 36 l 771 71 q 701 -14 729 24 q 660 -83 674 -51 q 647 -149 647 -115 m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 z "},"Ů":{"ha":1015,"x_min":125,"x_max":889,"o":"m 889 350 q 847 165 889 247 q 720 34 806 82 q 503 -14 635 -14 q 222 87 318 -14 q 125 353 125 188 l 125 992 l 250 992 l 250 349 q 315 161 250 228 q 510 94 379 94 q 656 127 600 94 q 739 217 713 160 q 765 350 765 275 l 765 992 l 889 992 l 889 350 m 507 1089 q 397 1128 439 1089 q 356 1236 356 1167 q 397 1344 356 1306 q 507 1382 439 1382 q 617 1344 572 1382 q 661 1238 661 1306 q 617 1128 661 1167 q 507 1089 574 1089 m 507 1158 q 563 1179 542 1158 q 585 1236 585 1200 q 563 1293 585 1272 q 507 1314 540 1314 q 451 1293 474 1314 q 429 1236 429 1272 q 449 1179 429 1200 q 507 1158 469 1158 z "},"V":{"ha":833,"x_min":0,"x_max":833,"o":"m 833 992 l 479 0 l 354 0 l 0 992 l 131 992 l 354 356 q 381 278 369 315 q 401 206 392 240 q 417 139 410 172 q 433 207 424 172 q 453 279 442 242 q 479 358 465 317 l 701 992 l 833 992 z "},"W":{"ha":1292,"x_min":17,"x_max":1274,"o":"m 1274 992 l 1010 0 l 883 0 l 690 650 q 674 710 682 679 q 658 768 665 740 q 647 816 651 796 q 640 846 642 836 q 635 816 639 836 q 625 768 632 796 q 610 709 618 740 q 593 646 603 678 l 406 0 l 279 0 l 17 992 l 147 992 l 301 386 q 317 323 310 354 q 330 262 324 292 q 340 204 336 232 q 349 150 344 176 q 358 207 353 178 q 369 267 363 236 q 385 331 376 299 q 401 393 393 363 l 576 992 l 706 992 l 888 389 q 906 324 897 357 q 921 261 914 292 q 933 202 928 231 q 942 150 938 174 q 953 223 946 185 q 969 303 960 261 q 990 388 979 344 l 1143 992 l 1274 992 z "},"Ẃ":{"ha":1292,"x_min":17,"x_max":1274,"o":"m 1274 992 l 1010 0 l 883 0 l 690 650 q 674 710 682 679 q 658 768 665 740 q 647 816 651 796 q 640 846 642 836 q 635 816 639 836 q 625 768 632 796 q 610 709 618 740 q 593 646 603 678 l 406 0 l 279 0 l 17 992 l 147 992 l 301 386 q 317 323 310 354 q 330 262 324 292 q 340 204 336 232 q 349 150 344 176 q 358 207 353 178 q 369 267 363 236 q 385 331 376 299 q 401 393 393 363 l 576 992 l 706 992 l 888 389 q 906 324 897 357 q 921 261 914 292 q 933 202 928 231 q 942 150 938 174 q 953 223 946 185 q 969 303 960 261 q 990 388 979 344 l 1143 992 l 1274 992 m 851 1297 q 815 1250 839 1278 q 763 1192 792 1222 q 706 1135 735 1163 q 653 1089 678 1108 l 572 1089 l 572 1106 q 617 1168 593 1132 q 665 1242 642 1204 q 704 1311 689 1281 l 851 1311 l 851 1297 z "},"Ŵ":{"ha":1292,"x_min":17,"x_max":1274,"o":"m 1274 992 l 1010 0 l 883 0 l 690 650 q 674 710 682 679 q 658 768 665 740 q 647 816 651 796 q 640 846 642 836 q 635 816 639 836 q 625 768 632 796 q 610 709 618 740 q 593 646 603 678 l 406 0 l 279 0 l 17 992 l 147 992 l 301 386 q 317 323 310 354 q 330 262 324 292 q 340 204 336 232 q 349 150 344 176 q 358 207 353 178 q 369 267 363 236 q 385 331 376 299 q 401 393 393 363 l 576 992 l 706 992 l 888 389 q 906 324 897 357 q 921 261 914 292 q 933 202 928 231 q 942 150 938 174 q 953 223 946 185 q 969 303 960 261 q 990 388 979 344 l 1143 992 l 1274 992 m 707 1311 q 755 1242 724 1281 q 820 1167 786 1204 q 881 1104 854 1131 l 881 1089 l 794 1089 q 719 1144 758 1111 q 643 1214 681 1176 q 568 1144 606 1176 q 494 1089 531 1113 l 411 1089 l 411 1104 q 470 1168 438 1132 q 533 1242 503 1204 q 582 1311 564 1281 l 707 1311 z "},"Ẅ":{"ha":1292,"x_min":17,"x_max":1274,"o":"m 1274 992 l 1010 0 l 883 0 l 690 650 q 674 710 682 679 q 658 768 665 740 q 647 816 651 796 q 640 846 642 836 q 635 816 639 836 q 625 768 632 796 q 610 709 618 740 q 593 646 603 678 l 406 0 l 279 0 l 17 992 l 147 992 l 301 386 q 317 323 310 354 q 330 262 324 292 q 340 204 336 232 q 349 150 344 176 q 358 207 353 178 q 369 267 363 236 q 385 331 376 299 q 401 393 393 363 l 576 992 l 706 992 l 888 389 q 906 324 897 357 q 921 261 914 292 q 933 202 928 231 q 942 150 938 174 q 953 223 946 185 q 969 303 960 261 q 990 388 979 344 l 1143 992 l 1274 992 m 451 1193 q 471 1245 451 1229 q 517 1261 490 1261 q 563 1245 543 1261 q 582 1193 582 1229 q 563 1141 582 1158 q 517 1124 543 1124 q 471 1141 490 1124 q 451 1193 451 1158 m 713 1193 q 731 1245 713 1229 q 776 1261 750 1261 q 822 1245 803 1261 q 842 1193 842 1229 q 822 1141 842 1158 q 776 1124 803 1124 q 731 1141 750 1124 q 713 1193 713 1158 z "},"Ẁ":{"ha":1292,"x_min":17,"x_max":1274,"o":"m 1274 992 l 1010 0 l 883 0 l 690 650 q 674 710 682 679 q 658 768 665 740 q 647 816 651 796 q 640 846 642 836 q 635 816 639 836 q 625 768 632 796 q 610 709 618 740 q 593 646 603 678 l 406 0 l 279 0 l 17 992 l 147 992 l 301 386 q 317 323 310 354 q 330 262 324 292 q 340 204 336 232 q 349 150 344 176 q 358 207 353 178 q 369 267 363 236 q 385 331 376 299 q 401 393 393 363 l 576 992 l 706 992 l 888 389 q 906 324 897 357 q 921 261 914 292 q 933 202 928 231 q 942 150 938 174 q 953 223 946 185 q 969 303 960 261 q 990 388 979 344 l 1143 992 l 1274 992 m 611 1311 q 649 1242 626 1281 q 698 1168 672 1204 q 744 1106 724 1132 l 744 1089 l 663 1089 q 610 1135 639 1108 q 552 1192 581 1163 q 501 1250 524 1222 q 465 1297 478 1278 l 465 1311 l 611 1311 z "},"X":{"ha":814,"x_min":6,"x_max":808,"o":"m 808 0 l 667 0 l 404 431 l 138 0 l 6 0 l 335 517 l 26 992 l 165 992 l 408 603 l 653 992 l 785 992 l 478 519 l 808 0 z "},"Y":{"ha":786,"x_min":0,"x_max":786,"o":"m 393 504 l 651 992 l 786 992 l 456 385 l 456 0 l 331 0 l 331 379 l 0 992 l 136 992 l 393 504 z "},"Ý":{"ha":786,"x_min":0,"x_max":786,"o":"m 393 504 l 651 992 l 786 992 l 456 385 l 456 0 l 331 0 l 331 379 l 0 992 l 136 992 l 393 504 m 599 1297 q 563 1250 586 1278 q 510 1192 539 1222 q 453 1135 482 1163 q 400 1089 425 1108 l 319 1089 l 319 1106 q 365 1168 340 1132 q 413 1242 389 1204 q 451 1311 436 1281 l 599 1311 l 599 1297 z "},"Ŷ":{"ha":786,"x_min":0,"x_max":786,"o":"m 393 504 l 651 992 l 786 992 l 456 385 l 456 0 l 331 0 l 331 379 l 0 992 l 136 992 l 393 504 m 454 1311 q 502 1242 471 1281 q 567 1167 533 1204 q 628 1104 601 1131 l 628 1089 l 542 1089 q 467 1144 506 1111 q 390 1214 428 1176 q 315 1144 353 1176 q 242 1089 278 1113 l 158 1089 l 158 1104 q 217 1168 185 1132 q 281 1242 250 1204 q 329 1311 311 1281 l 454 1311 z "},"Ÿ":{"ha":786,"x_min":0,"x_max":786,"o":"m 393 504 l 651 992 l 786 992 l 456 385 l 456 0 l 331 0 l 331 379 l 0 992 l 136 992 l 393 504 m 199 1193 q 218 1245 199 1229 q 264 1261 238 1261 q 310 1245 290 1261 q 329 1193 329 1229 q 310 1141 329 1158 q 264 1124 290 1124 q 218 1141 238 1124 q 199 1193 199 1158 m 460 1193 q 478 1245 460 1229 q 524 1261 497 1261 q 569 1245 550 1261 q 589 1193 589 1229 q 569 1141 589 1158 q 524 1124 550 1124 q 478 1141 497 1124 q 460 1193 460 1158 z "},"Ỳ":{"ha":786,"x_min":0,"x_max":786,"o":"m 393 504 l 651 992 l 786 992 l 456 385 l 456 0 l 331 0 l 331 379 l 0 992 l 136 992 l 393 504 m 358 1311 q 397 1242 374 1281 q 445 1168 419 1204 q 492 1106 471 1132 l 492 1089 l 410 1089 q 357 1135 386 1108 q 299 1192 328 1163 q 248 1250 271 1222 q 213 1297 225 1278 l 213 1311 l 358 1311 z "},"Z":{"ha":794,"x_min":53,"x_max":740,"o":"m 740 0 l 53 0 l 53 94 l 575 881 l 69 881 l 69 992 l 726 992 l 726 897 l 204 111 l 740 111 l 740 0 z "},"Ź":{"ha":794,"x_min":53,"x_max":740,"o":"m 740 0 l 53 0 l 53 94 l 575 881 l 69 881 l 69 992 l 726 992 l 726 897 l 204 111 l 740 111 l 740 0 m 608 1297 q 572 1250 596 1278 q 520 1192 549 1222 q 463 1135 492 1163 q 410 1089 435 1108 l 329 1089 l 329 1106 q 374 1168 350 1132 q 422 1242 399 1204 q 461 1311 446 1281 l 608 1311 l 608 1297 z "},"Ž":{"ha":794,"x_min":53,"x_max":740,"o":"m 740 0 l 53 0 l 53 94 l 575 881 l 69 881 l 69 992 l 726 992 l 726 897 l 204 111 l 740 111 l 740 0 m 339 1089 q 290 1158 321 1121 q 226 1231 260 1194 q 168 1293 193 1267 l 168 1311 l 251 1311 q 326 1254 288 1288 q 400 1183 365 1221 q 476 1254 438 1221 q 551 1311 515 1288 l 638 1311 l 638 1293 q 577 1231 611 1267 q 512 1158 543 1194 q 464 1089 481 1121 l 339 1089 z "},"Ż":{"ha":794,"x_min":53,"x_max":740,"o":"m 740 0 l 53 0 l 53 94 l 575 881 l 69 881 l 69 992 l 726 992 l 726 897 l 204 111 l 740 111 l 740 0 m 404 1271 q 453 1252 432 1271 q 475 1193 475 1233 q 453 1135 475 1154 q 404 1115 432 1115 q 353 1135 374 1115 q 332 1193 332 1154 q 353 1252 332 1233 q 404 1271 374 1271 z "},"a":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 z "},"á":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 596 1050 q 560 1003 583 1031 q 508 945 536 975 q 451 888 479 915 q 397 842 422 861 l 317 842 l 317 858 q 362 921 338 885 q 410 995 386 957 q 449 1064 433 1033 l 596 1064 l 596 1050 z "},"ă":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 606 1028 q 574 931 601 972 q 500 865 547 889 q 386 842 453 842 q 231 892 283 842 q 174 1028 179 943 l 249 1028 q 270 972 253 990 q 317 947 288 953 q 389 940 347 940 q 455 947 425 940 q 505 973 485 954 q 529 1028 525 992 l 606 1028 z "},"â":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 451 1064 q 499 995 468 1033 q 565 920 531 957 q 625 857 599 883 l 625 842 l 539 842 q 464 897 503 864 q 388 967 425 929 q 313 897 350 929 q 239 842 275 865 l 156 842 l 156 857 q 215 921 182 885 q 278 995 247 957 q 326 1064 308 1033 l 451 1064 z "},"´":{"ha":390,"x_min":56,"x_max":335,"o":"m 335 1050 q 299 1003 322 1031 q 247 945 275 975 q 190 888 218 915 q 136 842 161 861 l 56 842 l 56 858 q 101 921 76 885 q 149 995 125 957 q 188 1064 172 1033 l 335 1064 l 335 1050 z "},"́":{"ha":0,"x_min":-451,"x_max":-172,"o":"m -172 1050 q -208 1003 -185 1031 q -260 945 -232 975 q -317 888 -289 915 q -371 842 -346 861 l -451 842 l -451 858 q -406 921 -431 885 q -358 995 -382 957 q -319 1064 -335 1033 l -172 1064 l -172 1050 z "},"ä":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 196 946 q 215 998 196 982 q 261 1014 235 1014 q 307 998 288 1014 q 326 946 326 982 q 307 894 326 911 q 261 876 288 876 q 215 894 235 876 q 196 946 196 911 m 457 946 q 476 998 457 982 q 521 1014 494 1014 q 567 998 547 1014 q 586 946 586 982 q 567 894 586 911 q 521 876 547 876 q 476 894 494 876 q 457 946 457 911 z "},"æ":{"ha":1200,"x_min":64,"x_max":1129,"o":"m 838 758 q 993 717 928 758 q 1094 600 1058 675 q 1129 425 1129 525 l 1129 350 l 653 350 q 710 153 656 217 q 868 90 765 90 q 990 103 938 90 q 1096 142 1043 117 l 1096 35 q 987 -2 1040 10 q 864 -14 933 -14 q 747 3 800 -14 q 652 56 693 21 q 582 143 611 92 q 512 60 550 96 q 423 6 474 25 q 300 -14 372 -14 q 180 10 233 -14 q 95 83 126 33 q 64 207 64 132 q 101 333 64 282 q 213 413 138 385 q 403 444 289 442 l 528 449 l 528 496 q 485 622 528 586 q 372 658 443 658 q 263 642 317 658 q 164 601 210 625 l 126 693 q 244 739 175 721 q 382 757 314 757 q 524 728 468 757 q 610 638 581 700 q 704 726 646 694 q 838 758 763 758 m 421 360 q 240 315 290 354 q 190 206 190 276 q 226 114 190 143 q 319 85 261 85 q 424 108 378 85 q 498 178 471 131 q 525 297 525 225 l 525 364 l 421 360 m 836 658 q 709 603 756 658 q 656 446 663 549 l 1000 446 q 983 558 1000 510 q 929 632 965 606 q 836 658 893 658 z "},"à":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 356 1064 q 394 995 371 1033 q 442 921 417 957 q 489 858 468 885 l 489 842 l 407 842 q 354 888 383 861 q 297 945 325 915 q 245 1003 268 975 q 210 1050 222 1031 l 210 1064 l 356 1064 z "},"ā":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 596 940 l 596 842 l 183 842 l 183 940 l 596 940 z "},"&":{"ha":1017,"x_min":74,"x_max":1014,"o":"m 422 1007 q 551 981 497 1007 q 633 908 604 956 q 663 793 663 861 q 606 644 663 706 q 464 533 550 583 l 732 275 q 791 374 768 318 q 829 496 814 431 l 953 496 q 897 331 931 407 q 811 197 864 254 l 1014 0 l 849 0 l 728 117 q 635 49 685 78 q 524 3 585 19 q 386 -14 464 -14 q 220 17 290 -14 q 112 110 150 49 q 74 258 74 171 q 99 381 74 329 q 174 472 125 432 q 288 550 222 513 q 231 619 258 583 q 185 698 203 656 q 167 790 167 740 q 197 907 167 858 q 285 981 228 956 q 422 1007 343 1007 m 361 474 q 276 415 311 444 q 221 349 240 385 q 201 263 201 313 q 253 140 201 186 q 390 94 304 94 q 543 124 479 94 q 650 193 607 153 l 361 474 m 418 907 q 323 876 360 907 q 286 792 286 846 q 313 699 286 742 q 389 606 339 657 q 506 695 471 653 q 542 793 542 738 q 508 875 542 843 q 418 907 475 907 z "},"ą":{"ha":779,"x_min":64,"x_max":701,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 572 -161 q 589 -208 572 -192 q 635 -224 606 -224 q 674 -220 658 -224 q 701 -215 690 -217 l 701 -293 q 663 -302 682 -299 q 615 -306 643 -306 q 507 -271 542 -306 q 472 -175 472 -236 q 492 -97 472 -135 q 542 -29 513 -60 q 600 21 572 1 l 667 0 q 596 -81 619 -44 q 572 -161 572 -118 z "},"å":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 389 842 q 279 881 321 842 q 238 989 238 919 q 279 1097 238 1058 q 389 1135 321 1135 q 499 1097 454 1135 q 543 990 543 1058 q 499 881 543 919 q 389 842 456 842 m 389 911 q 445 932 424 911 q 467 989 467 953 q 444 1046 467 1025 q 389 1067 422 1067 q 333 1046 356 1067 q 311 989 311 1025 q 331 932 311 953 q 389 911 351 911 z "},"@":{"ha":1249,"x_min":81,"x_max":1168,"o":"m 1168 496 q 1153 371 1168 432 q 1108 260 1139 310 q 1033 181 1078 211 q 928 151 989 151 q 827 188 864 151 q 782 272 790 225 l 775 272 q 701 186 750 221 q 579 151 653 151 q 416 222 474 151 q 358 410 358 293 q 394 572 358 501 q 497 682 431 642 q 653 722 563 722 q 773 712 714 722 q 865 689 832 701 l 851 407 q 850 372 850 382 q 850 357 850 361 q 876 261 850 285 q 936 238 901 238 q 1009 273 979 238 q 1055 367 1039 308 q 1071 497 1071 426 q 1019 716 1071 626 q 876 853 967 806 q 669 900 785 900 q 460 863 551 900 q 306 757 368 825 q 213 597 244 689 q 181 393 181 504 q 229 162 181 257 q 372 17 278 67 q 601 -32 465 -32 q 763 -13 686 -32 q 900 28 840 6 l 900 -67 q 766 -108 840 -92 q 601 -124 692 -124 q 321 -62 438 -124 q 142 113 204 -1 q 81 389 81 228 q 121 628 81 518 q 238 820 161 739 q 423 947 314 901 q 669 992 532 992 q 869 958 778 992 q 1027 859 960 924 q 1131 703 1094 794 q 1168 496 1168 611 m 467 407 q 502 278 467 318 q 597 238 538 238 q 709 296 675 238 q 749 447 743 354 l 757 621 q 711 631 739 626 q 654 635 683 635 q 544 601 586 635 q 485 516 503 568 q 467 407 467 464 z "},"ã":{"ha":779,"x_min":64,"x_max":667,"o":"m 400 757 q 601 697 536 757 q 667 507 667 638 l 667 0 l 578 0 l 554 106 l 549 106 q 483 38 517 65 q 405 -1 449 11 q 299 -14 361 -14 q 178 10 232 -14 q 94 83 125 33 q 64 207 64 132 q 151 378 64 318 q 421 444 239 439 l 547 449 l 547 493 q 507 622 547 586 q 393 658 467 658 q 282 641 335 658 q 183 601 229 624 l 146 693 q 261 738 194 719 q 400 757 328 757 m 436 360 q 244 315 297 354 q 190 206 190 276 q 228 114 190 143 q 326 85 267 85 q 483 137 421 85 q 546 297 546 189 l 546 364 l 436 360 m 136 842 q 152 916 140 883 q 183 972 164 949 q 229 1007 203 994 q 289 1019 256 1019 q 348 1008 319 1019 q 403 980 376 996 q 453 952 429 964 q 500 940 478 940 q 549 960 532 940 q 576 1021 567 981 l 646 1021 q 599 892 638 940 q 494 843 560 843 q 438 855 465 843 q 383 883 410 867 q 331 910 356 899 q 283 922 307 922 q 233 902 250 922 q 207 842 217 882 l 136 842 z "},"b":{"ha":854,"x_min":118,"x_max":778,"o":"m 240 799 q 238 710 240 751 q 233 646 236 669 l 240 646 q 328 725 272 693 q 471 757 383 757 q 694 660 610 757 q 778 372 778 564 q 740 158 778 244 q 632 29 701 72 q 471 -14 563 -14 q 328 18 383 -14 q 240 94 272 50 l 231 94 l 206 0 l 118 0 l 118 1056 l 240 1056 l 240 799 m 450 656 q 325 626 371 656 q 260 534 279 596 q 240 376 240 472 l 240 371 q 285 160 240 233 q 453 88 331 88 q 602 161 553 88 q 651 374 651 235 q 602 585 651 514 q 450 656 553 656 z "},"˘":{"ha":543,"x_min":56,"x_max":488,"o":"m 488 1028 q 456 931 483 972 q 382 865 429 889 q 268 842 335 842 q 113 892 165 842 q 56 1028 61 943 l 131 1028 q 152 972 135 990 q 199 947 169 953 q 271 940 229 940 q 337 947 307 940 q 387 973 367 954 q 411 1028 407 992 l 488 1028 z "},"̆":{"ha":0,"x_min":-215,"x_max":217,"o":"m 217 1028 q 185 931 213 972 q 111 865 158 889 q -3 842 64 842 q -158 892 -106 842 q -215 1028 -210 943 l -140 1028 q -119 972 -136 990 q -72 947 -101 953 q 0 940 -42 940 q 66 947 36 940 q 116 973 96 954 q 140 1028 136 992 l 217 1028 z "},"•":{"ha":522,"x_min":107,"x_max":415,"o":"m 107 507 q 127 608 107 569 q 183 663 147 646 q 261 679 218 679 q 339 663 304 679 q 394 608 374 646 q 415 507 415 569 q 394 408 415 446 q 339 352 374 369 q 261 335 304 335 q 183 352 218 335 q 127 408 147 369 q 107 507 107 446 z "},"c":{"ha":667,"x_min":76,"x_max":621,"o":"m 417 -14 q 241 26 318 -14 q 120 151 164 67 q 76 368 76 236 q 122 592 76 506 q 247 718 168 678 q 425 758 325 758 q 535 747 482 758 q 621 718 588 735 l 583 617 q 506 640 550 629 q 422 651 461 651 q 299 619 347 651 q 226 525 250 588 q 203 369 203 463 q 226 218 203 281 q 297 124 250 156 q 415 92 344 92 q 523 104 476 92 q 608 135 569 117 l 608 26 q 526 -3 571 7 q 417 -14 481 -14 z "},"ć":{"ha":667,"x_min":76,"x_max":621,"o":"m 417 -14 q 241 26 318 -14 q 120 151 164 67 q 76 368 76 236 q 122 592 76 506 q 247 718 168 678 q 425 758 325 758 q 535 747 482 758 q 621 718 588 735 l 583 617 q 506 640 550 629 q 422 651 461 651 q 299 619 347 651 q 226 525 250 588 q 203 369 203 463 q 226 218 203 281 q 297 124 250 156 q 415 92 344 92 q 523 104 476 92 q 608 135 569 117 l 608 26 q 526 -3 571 7 q 417 -14 481 -14 m 600 1050 q 564 1003 588 1031 q 512 945 540 975 q 455 888 483 915 q 401 842 426 861 l 321 842 l 321 858 q 366 921 342 885 q 414 995 390 957 q 453 1064 438 1033 l 600 1064 l 600 1050 z "},"ˇ":{"ha":581,"x_min":56,"x_max":525,"o":"m 226 842 q 178 910 208 874 q 114 983 147 947 q 56 1046 81 1019 l 56 1064 l 139 1064 q 214 1007 175 1040 q 288 936 253 974 q 364 1007 325 974 q 439 1064 403 1040 l 525 1064 l 525 1046 q 465 983 499 1019 q 399 910 431 947 q 351 842 368 874 l 226 842 z "},"̌":{"ha":0,"x_min":-235,"x_max":235,"o":"m -64 842 q -112 910 -82 874 q -176 983 -143 947 q -235 1046 -210 1019 l -235 1064 l -151 1064 q -76 1007 -115 1040 q -3 936 -37 974 q 74 1007 35 974 q 149 1064 113 1040 l 235 1064 l 235 1046 q 174 983 208 1019 q 109 910 140 947 q 61 842 78 874 l -64 842 z "},"č":{"ha":667,"x_min":76,"x_max":629,"o":"m 417 -14 q 241 26 318 -14 q 120 151 164 67 q 76 368 76 236 q 122 592 76 506 q 247 718 168 678 q 425 758 325 758 q 535 747 482 758 q 621 718 588 735 l 583 617 q 506 640 550 629 q 422 651 461 651 q 299 619 347 651 q 226 525 250 588 q 203 369 203 463 q 226 218 203 281 q 297 124 250 156 q 415 92 344 92 q 523 104 476 92 q 608 135 569 117 l 608 26 q 526 -3 571 7 q 417 -14 481 -14 m 331 842 q 282 910 313 874 q 218 983 251 947 q 160 1046 185 1019 l 160 1064 l 243 1064 q 318 1007 279 1040 q 392 936 357 974 q 468 1007 429 974 q 543 1064 507 1040 l 629 1064 l 629 1046 q 569 983 603 1019 q 503 910 535 947 q 456 842 472 874 l 331 842 z "},"ç":{"ha":667,"x_min":76,"x_max":621,"o":"m 417 -14 q 241 26 318 -14 q 120 151 164 67 q 76 368 76 236 q 122 592 76 506 q 247 718 168 678 q 425 758 325 758 q 535 747 482 758 q 621 718 588 735 l 583 617 q 506 640 550 629 q 422 651 461 651 q 299 619 347 651 q 226 525 250 588 q 203 369 203 463 q 226 218 203 281 q 297 124 250 156 q 415 92 344 92 q 523 104 476 92 q 608 135 569 117 l 608 26 q 526 -3 571 7 q 417 -14 481 -14 m 531 -193 q 479 -297 531 -260 q 325 -333 428 -333 q 285 -331 304 -333 q 256 -326 267 -329 l 256 -250 q 289 -255 268 -253 q 329 -257 310 -257 q 406 -244 379 -257 q 432 -196 432 -231 q 395 -143 432 -160 q 306 -119 358 -126 l 365 0 l 446 0 l 410 -74 q 471 -95 443 -81 q 515 -133 499 -110 q 531 -193 531 -157 z "},"ċ":{"ha":667,"x_min":76,"x_max":621,"o":"m 417 -14 q 241 26 318 -14 q 120 151 164 67 q 76 368 76 236 q 122 592 76 506 q 247 718 168 678 q 425 758 325 758 q 535 747 482 758 q 621 718 588 735 l 583 617 q 506 640 550 629 q 422 651 461 651 q 299 619 347 651 q 226 525 250 588 q 203 369 203 463 q 226 218 203 281 q 297 124 250 156 q 415 92 344 92 q 523 104 476 92 q 608 135 569 117 l 608 26 q 526 -3 571 7 q 417 -14 481 -14 m 396 1024 q 445 1005 424 1024 q 467 946 467 986 q 445 888 467 907 q 396 868 424 868 q 344 888 365 868 q 324 946 324 907 q 344 1005 324 986 q 396 1024 365 1024 z "},"¸":{"ha":313,"x_min":19,"x_max":294,"o":"m 294 -193 q 243 -297 294 -260 q 89 -333 192 -333 q 49 -331 68 -333 q 19 -326 31 -329 l 19 -250 q 53 -255 32 -253 q 93 -257 74 -257 q 169 -244 143 -257 q 196 -196 196 -231 q 159 -143 196 -160 q 69 -119 122 -126 l 129 0 l 210 0 l 174 -74 q 235 -95 207 -81 q 278 -133 263 -110 q 294 -193 294 -157 z "},"̧":{"ha":0,"x_min":-136,"x_max":139,"o":"m 139 -193 q 88 -297 139 -260 q -67 -333 36 -333 q -106 -331 -87 -333 q -136 -326 -125 -329 l -136 -250 q -103 -255 -124 -253 q -62 -257 -82 -257 q 14 -244 -12 -257 q 40 -196 40 -231 q 3 -143 40 -160 q -86 -119 -33 -126 l -26 0 l 54 0 l 18 -74 q 79 -95 51 -81 q 123 -133 107 -110 q 139 -193 139 -157 z "},"¢":{"ha":794,"x_min":126,"x_max":674,"o":"m 490 894 q 591 881 543 893 q 674 854 639 869 l 638 753 q 556 778 601 767 q 472 789 510 789 q 348 758 397 789 q 275 663 299 726 q 251 504 251 600 q 276 347 251 408 q 348 257 300 286 q 467 228 396 228 q 573 240 528 228 q 661 269 618 251 l 661 163 q 583 134 624 144 q 489 121 543 124 l 489 -14 l 396 -14 l 396 125 q 253 179 314 138 q 160 300 193 221 q 126 503 126 379 q 160 710 126 629 q 254 833 193 790 q 396 889 315 876 l 396 1006 l 490 1006 l 490 894 z "},"ˆ":{"ha":581,"x_min":56,"x_max":525,"o":"m 351 1064 q 399 995 368 1033 q 465 920 431 957 q 525 857 499 883 l 525 842 l 439 842 q 364 897 403 864 q 288 967 325 929 q 213 897 250 929 q 139 842 175 865 l 56 842 l 56 857 q 115 921 82 885 q 178 995 147 957 q 226 1064 208 1033 l 351 1064 z "},"̂":{"ha":0,"x_min":-232,"x_max":238,"o":"m 64 1064 q 112 995 81 1033 q 177 920 143 957 q 238 857 211 883 l 238 842 l 151 842 q 76 897 115 864 q 0 967 38 929 q -75 897 -37 929 q -149 842 -112 865 l -232 842 l -232 857 q -173 921 -206 885 q -110 995 -140 957 q -61 1064 -79 1033 l 64 1064 z "},"̦":{"ha":0,"x_min":-89,"x_max":89,"o":"m 89 -97 q 66 -160 83 -122 q 26 -237 49 -199 q -22 -307 3 -276 l -89 -307 l -89 -290 q -66 -230 -78 -267 q -44 -153 -54 -193 q -32 -85 -35 -114 l 89 -85 l 89 -97 z "},"̒":{"ha":0,"x_min":-110,"x_max":100,"o":"m -110 667 q -78 772 -97 715 q -35 886 -58 829 q 10 992 -12 943 l 100 992 q 74 878 88 939 q 49 759 60 818 q 31 651 38 700 l -101 651 l -110 667 z "},"©":{"ha":1156,"x_min":68,"x_max":1088,"o":"m 599 185 q 393 270 461 185 q 325 496 325 356 q 357 656 325 586 q 451 766 389 726 q 604 806 514 806 q 692 794 647 806 q 775 764 736 783 l 735 679 q 667 706 700 697 q 606 715 635 715 q 478 657 524 715 q 433 496 433 599 q 473 333 433 390 q 604 275 513 275 q 676 284 636 275 q 750 307 715 293 l 750 218 q 682 194 717 204 q 599 185 647 185 m 578 -14 q 374 24 467 -14 q 212 130 281 61 q 106 292 143 199 q 68 496 68 385 q 106 700 68 607 q 212 862 143 793 q 374 968 281 931 q 578 1006 467 1006 q 776 968 683 1006 q 938 862 868 931 q 1048 700 1008 793 q 1088 496 1088 607 q 1050 292 1088 385 q 944 130 1013 199 q 782 24 875 61 q 578 -14 689 -14 m 578 60 q 744 92 667 60 q 882 183 822 124 q 975 321 942 242 q 1008 496 1008 400 q 976 665 1008 586 q 887 804 944 744 q 751 898 829 864 q 578 932 672 932 q 404 900 483 932 q 267 809 325 868 q 178 671 210 750 q 146 496 146 592 q 178 326 146 406 q 267 188 210 247 q 404 94 325 128 q 578 60 483 60 z "},"d":{"ha":854,"x_min":76,"x_max":736,"o":"m 382 -14 q 160 83 243 -14 q 76 371 76 179 q 160 660 76 563 q 383 758 244 758 q 485 744 442 758 q 560 704 528 729 q 614 649 592 679 l 622 649 q 617 702 621 667 q 614 758 614 738 l 614 1056 l 736 1056 l 736 0 l 638 0 l 619 100 l 614 100 q 560 42 592 68 q 484 1 528 17 q 382 -14 440 -14 m 401 88 q 567 152 519 88 q 615 347 615 217 l 615 369 q 569 583 615 508 q 400 657 524 657 q 252 578 301 657 q 203 368 203 500 q 252 161 203 235 q 401 88 301 88 z "},"ď":{"ha":854,"x_min":76,"x_max":956,"o":"m 382 -14 q 160 83 243 -14 q 76 371 76 179 q 160 660 76 563 q 383 758 244 758 q 485 744 442 758 q 560 704 528 729 q 614 649 592 679 l 622 649 q 617 702 621 667 q 614 758 614 738 l 614 1056 l 736 1056 l 736 0 l 638 0 l 619 100 l 614 100 q 560 42 592 68 q 484 1 528 17 q 382 -14 440 -14 m 401 88 q 567 152 519 88 q 615 347 615 217 l 615 369 q 569 583 615 508 q 400 657 524 657 q 252 578 301 657 q 203 368 203 500 q 252 161 203 235 q 401 88 301 88 m 956 1043 q 934 981 950 1018 q 897 903 918 943 q 856 833 876 864 l 789 833 l 789 850 q 803 896 796 869 q 816 951 810 922 q 827 1006 822 979 q 835 1056 832 1033 l 956 1056 l 956 1043 z "},"đ":{"ha":857,"x_min":76,"x_max":842,"o":"m 382 -14 q 160 83 243 -14 q 76 368 76 179 q 160 658 76 563 q 382 754 244 754 q 484 740 440 754 q 560 700 528 725 q 614 644 592 675 l 622 644 q 617 698 619 663 q 614 756 614 733 l 614 840 l 318 840 l 318 932 l 614 932 l 614 1056 l 736 1056 l 736 932 l 842 932 l 842 840 l 736 840 l 736 0 l 636 0 l 618 100 l 613 100 q 558 42 590 68 q 483 1 526 17 q 382 -14 440 -14 m 403 88 q 567 151 519 88 q 615 344 615 215 l 615 368 q 569 581 615 508 q 400 653 524 653 q 253 576 301 653 q 204 367 204 500 q 253 160 204 233 q 403 88 301 88 z "},"°":{"ha":594,"x_min":76,"x_max":518,"o":"m 297 579 q 181 606 231 579 q 104 681 132 633 q 76 792 76 729 q 103 903 76 856 q 180 978 131 951 q 297 1006 229 1006 q 413 978 363 1006 q 490 903 463 951 q 518 792 518 856 q 490 681 518 729 q 413 606 463 633 q 297 579 363 579 m 299 661 q 397 697 365 661 q 428 792 428 733 q 395 889 428 853 q 299 925 363 925 q 199 889 231 925 q 167 792 167 853 q 199 697 167 733 q 299 661 231 661 z "},"¨":{"ha":806,"x_min":207,"x_max":597,"o":"m 207 946 q 226 998 207 982 q 272 1014 246 1014 q 318 998 299 1014 q 338 946 338 982 q 318 894 338 911 q 272 876 299 876 q 226 894 246 876 q 207 946 207 911 m 468 946 q 487 998 468 982 q 532 1014 506 1014 q 578 998 558 1014 q 597 946 597 982 q 578 894 597 911 q 532 876 558 876 q 487 894 506 876 q 468 946 468 911 z "},"̈":{"ha":0,"x_min":-196,"x_max":194,"o":"m -196 946 q -176 998 -196 982 q -131 1014 -157 1014 q -85 998 -104 1014 q -65 946 -65 982 q -85 894 -65 911 q -131 876 -104 876 q -176 894 -157 876 q -196 946 -196 911 m 65 946 q 84 998 65 982 q 129 1014 103 1014 q 175 998 156 1014 q 194 946 194 982 q 175 894 194 911 q 129 876 156 876 q 84 894 103 876 q 65 946 65 911 z "},"$":{"ha":794,"x_min":86,"x_max":717,"o":"m 351 68 q 203 81 275 69 q 86 114 131 93 l 86 232 q 207 193 133 210 q 351 175 281 176 l 351 456 q 201 513 260 481 q 115 593 143 546 q 86 706 86 640 q 119 822 86 774 q 211 899 151 871 q 351 932 271 928 l 351 1054 l 440 1054 l 440 933 q 574 917 514 932 q 685 882 635 903 l 647 779 q 549 810 603 797 q 440 828 496 824 l 440 549 q 593 492 532 522 q 685 419 654 463 q 717 306 717 375 q 644 148 717 208 q 440 74 572 88 l 440 -81 l 351 -81 l 351 68 m 440 182 q 560 220 522 190 q 597 297 597 250 q 583 355 597 332 q 535 394 569 378 q 440 426 501 411 l 440 182 m 351 825 q 269 808 301 822 q 222 769 238 793 q 206 715 206 746 q 219 653 206 679 q 264 610 232 628 q 351 579 296 593 l 351 825 z "},"˙":{"ha":254,"x_min":56,"x_max":199,"o":"m 128 1024 q 177 1005 156 1024 q 199 946 199 986 q 177 888 199 907 q 128 868 156 868 q 76 888 97 868 q 56 946 56 907 q 76 1005 56 986 q 128 1024 97 1024 z "},"̇":{"ha":0,"x_min":-71,"x_max":72,"o":"m 1 1024 q 51 1005 29 1024 q 72 946 72 986 q 51 888 72 907 q 1 868 29 868 q -50 888 -29 868 q -71 946 -71 907 q -50 1005 -71 986 q 1 1024 -29 1024 z "},"e":{"ha":783,"x_min":76,"x_max":713,"o":"m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 z "},"é":{"ha":783,"x_min":76,"x_max":713,"o":"m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 m 601 1050 q 565 1003 589 1031 q 513 945 542 975 q 456 888 485 915 q 403 842 428 861 l 322 842 l 322 858 q 367 921 343 885 q 415 995 392 957 q 454 1064 439 1033 l 601 1064 l 601 1050 z "},"ě":{"ha":783,"x_min":76,"x_max":713,"o":"m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 m 332 842 q 283 910 314 874 q 219 983 253 947 q 161 1046 186 1019 l 161 1064 l 244 1064 q 319 1007 281 1040 q 393 936 358 974 q 469 1007 431 974 q 544 1064 508 1040 l 631 1064 l 631 1046 q 570 983 604 1019 q 505 910 536 947 q 457 842 474 874 l 332 842 z "},"ê":{"ha":783,"x_min":76,"x_max":713,"o":"m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 m 457 1064 q 505 995 474 1033 q 570 920 536 957 q 631 857 604 883 l 631 842 l 544 842 q 469 897 508 864 q 393 967 431 929 q 318 897 356 929 q 244 842 281 865 l 161 842 l 161 857 q 220 921 188 885 q 283 995 253 957 q 332 1064 314 1033 l 457 1064 z "},"ë":{"ha":783,"x_min":76,"x_max":713,"o":"m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 m 201 946 q 221 998 201 982 q 267 1014 240 1014 q 313 998 293 1014 q 332 946 332 982 q 313 894 332 911 q 267 876 293 876 q 221 894 240 876 q 201 946 201 911 m 463 946 q 481 998 463 982 q 526 1014 500 1014 q 572 998 553 1014 q 592 946 592 982 q 572 894 592 911 q 526 876 553 876 q 481 894 500 876 q 463 946 463 911 z "},"ė":{"ha":783,"x_min":76,"x_max":713,"o":"m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 m 397 1024 q 447 1005 425 1024 q 468 946 468 986 q 447 888 468 907 q 397 868 425 868 q 346 888 367 868 q 325 946 325 907 q 346 1005 325 986 q 397 1024 367 1024 z "},"è":{"ha":783,"x_min":76,"x_max":713,"o":"m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 m 361 1064 q 399 995 376 1033 q 448 921 422 957 q 494 858 474 885 l 494 842 l 413 842 q 360 888 389 861 q 302 945 331 915 q 251 1003 274 975 q 215 1050 228 1031 l 215 1064 l 361 1064 z "},"ē":{"ha":783,"x_min":76,"x_max":713,"o":"m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 m 601 940 l 601 842 l 189 842 l 189 940 l 601 940 z "},"ŋ":{"ha":858,"x_min":118,"x_max":747,"o":"m 547 -333 q 490 -328 514 -333 q 449 -317 467 -324 l 449 -218 q 488 -228 468 -224 q 532 -232 507 -232 q 599 -208 572 -232 q 625 -115 625 -183 l 625 478 q 585 612 625 568 q 460 656 544 656 q 329 625 378 656 q 260 535 281 594 q 240 388 240 475 l 240 0 l 118 0 l 118 744 l 217 744 l 236 643 l 243 643 q 303 708 268 682 q 383 746 339 733 q 475 758 428 758 q 627 730 567 758 q 717 642 688 701 q 747 486 747 582 l 747 -111 q 726 -231 747 -181 q 660 -307 704 -281 q 547 -333 617 -333 z "},"ę":{"ha":783,"x_min":76,"x_max":713,"o":"m 540 -161 q 557 -208 540 -192 q 603 -224 574 -224 q 642 -220 626 -224 q 669 -215 658 -217 l 669 -293 q 631 -302 650 -299 q 583 -306 611 -306 q 475 -271 510 -306 q 440 -175 440 -236 q 460 -97 440 -135 q 510 -29 481 -60 q 568 21 540 1 l 679 35 q 593 -43 624 -10 q 551 -104 563 -76 q 540 -161 540 -132 m 406 758 q 570 717 501 758 q 676 599 639 675 q 713 422 713 524 l 713 349 l 203 349 q 267 156 206 222 q 440 90 329 90 q 566 103 511 90 q 679 142 621 117 l 679 35 q 567 -2 622 10 q 435 -14 511 -14 q 248 29 329 -14 q 122 158 167 72 q 76 367 76 243 q 117 576 76 489 q 233 711 158 664 q 406 758 307 758 m 404 658 q 266 602 317 658 q 206 446 215 546 l 585 446 q 565 557 585 510 q 506 631 546 604 q 404 658 467 658 z "},"ð":{"ha":840,"x_min":76,"x_max":765,"o":"m 300 1063 q 390 1017 344 1042 q 475 963 435 992 l 635 1056 l 688 981 l 550 901 q 662 765 614 843 q 738 590 710 686 q 765 382 765 494 q 724 162 765 250 q 604 30 682 74 q 418 -14 526 -14 q 241 27 318 -14 q 120 144 164 68 q 76 324 76 219 q 117 502 76 428 q 230 617 157 576 q 403 657 303 657 q 492 649 451 657 q 565 622 533 640 q 619 576 597 604 l 625 579 q 557 725 603 658 q 453 844 511 792 l 272 740 l 219 817 l 375 906 q 314 944 346 925 q 250 979 282 963 l 300 1063 m 421 558 q 294 531 343 558 q 223 450 246 503 q 200 319 200 397 q 223 199 200 251 q 295 116 246 146 q 421 86 344 86 q 589 153 536 86 q 642 349 642 221 q 628 430 642 392 q 588 497 615 468 q 519 542 560 525 q 421 558 478 558 z "},"€":{"ha":794,"x_min":32,"x_max":776,"o":"m 528 1004 q 658 989 597 1004 q 776 940 719 974 l 725 840 q 634 879 686 861 q 528 897 582 897 q 433 881 476 897 q 358 832 390 865 q 301 749 325 799 q 265 632 278 699 l 604 632 l 604 542 l 256 542 q 254 515 254 528 q 254 489 254 503 q 254 462 254 476 q 256 432 254 447 l 563 432 l 563 342 l 267 342 q 318 208 283 264 q 408 124 353 153 q 539 94 464 94 q 648 108 593 94 q 746 139 703 121 l 746 31 q 651 -1 703 13 q 532 -14 599 -14 q 340 29 419 -14 q 213 152 261 72 q 143 342 164 232 l 32 342 l 32 432 l 132 432 q 131 460 131 449 q 131 489 131 471 q 131 519 131 504 q 132 542 132 533 l 32 542 l 32 632 l 142 632 q 208 829 160 746 q 338 958 257 913 q 528 1004 418 1004 z "},"¡":{"ha":374,"x_min":100,"x_max":272,"o":"m 144 458 l 225 458 l 260 -253 l 110 -253 l 144 458 m 272 664 q 247 592 272 613 q 186 571 222 571 q 126 592 151 571 q 100 664 100 613 q 126 736 100 714 q 186 758 151 758 q 247 736 222 758 q 272 664 272 714 z "},"f":{"ha":478,"x_min":21,"x_max":538,"o":"m 461 650 l 274 650 l 274 0 l 151 0 l 151 650 l 21 650 l 21 707 l 151 749 l 151 792 q 180 947 151 888 q 263 1035 208 1007 q 393 1063 317 1063 q 474 1055 438 1063 q 538 1038 511 1047 l 506 942 q 454 956 483 949 q 394 963 425 963 q 303 922 333 963 q 274 793 274 881 l 274 744 l 461 744 l 461 650 z "},"g":{"ha":854,"x_min":76,"x_max":736,"o":"m 382 758 q 515 731 456 758 q 615 646 574 703 l 622 646 l 639 744 l 736 744 l 736 -12 q 700 -190 736 -118 q 590 -297 664 -261 q 403 -333 517 -333 q 255 -322 322 -333 q 135 -286 188 -310 l 135 -174 q 258 -217 188 -201 q 410 -232 329 -232 q 560 -176 506 -232 q 615 -22 615 -119 l 615 7 q 617 55 615 24 q 619 99 618 86 l 614 99 q 517 14 575 42 q 383 -14 460 -14 q 158 88 239 -14 q 76 371 76 189 q 158 653 76 549 q 382 758 239 758 m 399 656 q 292 622 336 656 q 226 525 249 589 q 203 369 203 461 q 253 159 203 232 q 401 86 304 86 q 499 101 458 86 q 565 147 539 115 q 604 226 592 178 q 617 342 617 275 l 617 371 q 594 535 617 472 q 522 626 571 597 q 399 656 474 656 z "},"ğ":{"ha":854,"x_min":76,"x_max":736,"o":"m 382 758 q 515 731 456 758 q 615 646 574 703 l 622 646 l 639 744 l 736 744 l 736 -12 q 700 -190 736 -118 q 590 -297 664 -261 q 403 -333 517 -333 q 255 -322 322 -333 q 135 -286 188 -310 l 135 -174 q 258 -217 188 -201 q 410 -232 329 -232 q 560 -176 506 -232 q 615 -22 615 -119 l 615 7 q 617 55 615 24 q 619 99 618 86 l 614 99 q 517 14 575 42 q 383 -14 460 -14 q 158 88 239 -14 q 76 371 76 189 q 158 653 76 549 q 382 758 239 758 m 399 656 q 292 622 336 656 q 226 525 249 589 q 203 369 203 461 q 253 159 203 232 q 401 86 304 86 q 499 101 458 86 q 565 147 539 115 q 604 226 592 178 q 617 342 617 275 l 617 371 q 594 535 617 472 q 522 626 571 597 q 399 656 474 656 m 628 1028 q 597 931 624 972 q 522 865 569 889 q 408 842 475 842 q 253 892 306 842 q 196 1028 201 943 l 271 1028 q 292 972 275 990 q 340 947 310 953 q 411 940 369 940 q 477 947 447 940 q 527 973 507 954 q 551 1028 547 992 l 628 1028 z "},"ģ":{"ha":854,"x_min":76,"x_max":736,"o":"m 382 758 q 515 731 456 758 q 615 646 574 703 l 622 646 l 639 744 l 736 744 l 736 -12 q 700 -190 736 -118 q 590 -297 664 -261 q 403 -333 517 -333 q 255 -322 322 -333 q 135 -286 188 -310 l 135 -174 q 258 -217 188 -201 q 410 -232 329 -232 q 560 -176 506 -232 q 615 -22 615 -119 l 615 7 q 617 55 615 24 q 619 99 618 86 l 614 99 q 517 14 575 42 q 383 -14 460 -14 q 158 88 239 -14 q 76 371 76 189 q 158 653 76 549 q 382 758 239 758 m 399 656 q 292 622 336 656 q 226 525 249 589 q 203 369 203 461 q 253 159 203 232 q 401 86 304 86 q 499 101 458 86 q 565 147 539 115 q 604 226 592 178 q 617 342 617 275 l 617 371 q 594 535 617 472 q 522 626 571 597 q 399 656 474 656 m 504 1047 q 481 987 493 1024 q 460 911 469 950 q 446 842 450 872 l 325 842 l 325 854 q 349 917 332 879 q 388 994 365 954 q 436 1064 411 1033 l 504 1064 l 504 1047 z "},"ġ":{"ha":854,"x_min":76,"x_max":736,"o":"m 382 758 q 515 731 456 758 q 615 646 574 703 l 622 646 l 639 744 l 736 744 l 736 -12 q 700 -190 736 -118 q 590 -297 664 -261 q 403 -333 517 -333 q 255 -322 322 -333 q 135 -286 188 -310 l 135 -174 q 258 -217 188 -201 q 410 -232 329 -232 q 560 -176 506 -232 q 615 -22 615 -119 l 615 7 q 617 55 615 24 q 619 99 618 86 l 614 99 q 517 14 575 42 q 383 -14 460 -14 q 158 88 239 -14 q 76 371 76 189 q 158 653 76 549 q 382 758 239 758 m 399 656 q 292 622 336 656 q 226 525 249 589 q 203 369 203 461 q 253 159 203 232 q 401 86 304 86 q 499 101 458 86 q 565 147 539 115 q 604 226 592 178 q 617 342 617 275 l 617 371 q 594 535 617 472 q 522 626 571 597 q 399 656 474 656 m 414 1024 q 463 1005 442 1024 q 485 946 485 986 q 463 888 485 907 q 414 868 442 868 q 363 888 383 868 q 342 946 342 907 q 363 1005 342 986 q 414 1024 383 1024 z "},"ß":{"ha":876,"x_min":118,"x_max":814,"o":"m 725 857 q 706 774 725 810 q 657 712 686 739 q 599 663 628 685 q 550 619 569 640 q 531 572 531 597 q 540 539 531 554 q 575 503 549 524 q 653 449 601 483 q 739 382 703 415 q 794 308 775 349 q 814 213 814 268 q 781 83 814 133 q 690 10 749 33 q 556 -14 632 -14 q 440 -1 490 -14 q 354 33 390 11 l 354 143 q 410 115 378 129 q 478 93 442 101 q 551 85 515 85 q 661 117 628 85 q 694 204 694 149 q 683 263 694 238 q 642 314 671 289 q 564 371 614 339 q 473 438 506 408 q 426 499 440 468 q 413 565 413 529 q 431 639 413 608 q 478 692 450 669 q 535 738 507 715 q 583 786 564 760 q 601 850 601 813 q 552 935 601 908 q 425 961 503 961 q 334 948 376 961 q 266 903 292 935 q 240 811 240 871 l 240 0 l 118 0 l 118 811 q 158 959 118 904 q 268 1038 199 1014 q 425 1063 338 1063 q 583 1040 515 1063 q 688 972 650 1017 q 725 857 725 926 z "},"`":{"ha":390,"x_min":56,"x_max":335,"o":"m 201 1064 q 240 995 217 1033 q 288 921 263 957 q 335 858 314 885 l 335 842 l 253 842 q 200 888 229 861 q 142 945 171 915 q 91 1003 114 975 q 56 1050 68 1031 l 56 1064 l 201 1064 z "},"̀":{"ha":0,"x_min":-685,"x_max":-406,"o":"m -539 1064 q -501 995 -524 1033 q -452 921 -478 957 q -406 858 -426 885 l -406 842 l -487 842 q -540 888 -511 861 q -598 945 -569 915 q -649 1003 -626 975 q -685 1050 -672 1031 l -685 1064 l -539 1064 z "},"«":{"ha":707,"x_min":56,"x_max":653,"o":"m 56 375 l 289 654 l 376 604 l 182 367 l 376 129 l 289 78 l 56 357 l 56 375 m 331 375 l 567 654 l 653 604 l 458 367 l 653 129 l 567 78 l 331 357 l 331 375 z "},"»":{"ha":707,"x_min":54,"x_max":651,"o":"m 651 357 l 415 78 l 329 129 l 524 367 l 329 604 l 415 654 l 651 375 l 651 357 m 375 357 l 140 78 l 54 129 l 249 367 l 54 604 l 140 654 l 375 375 l 375 357 z "},"‹":{"ha":431,"x_min":56,"x_max":376,"o":"m 56 375 l 289 654 l 376 604 l 182 367 l 376 129 l 289 78 l 56 357 l 56 375 z "},"›":{"ha":431,"x_min":54,"x_max":375,"o":"m 140 654 l 375 375 l 375 357 l 140 78 l 54 129 l 249 367 l 54 604 l 140 654 z "},"h":{"ha":858,"x_min":118,"x_max":746,"o":"m 240 746 q 238 692 240 719 q 233 642 236 664 l 242 642 q 301 706 265 681 q 382 744 338 731 q 474 757 426 757 q 624 728 564 757 q 715 640 685 700 q 746 485 746 581 l 746 0 l 625 0 l 625 476 q 585 611 625 567 q 458 656 544 656 q 328 624 375 656 q 260 533 281 593 q 240 385 240 472 l 240 0 l 118 0 l 118 1056 l 240 1056 l 240 746 z "},"ħ":{"ha":858,"x_min":13,"x_max":746,"o":"m 240 1056 l 240 931 l 535 931 l 535 839 l 240 839 l 240 718 q 238 665 240 692 q 233 615 236 638 l 242 615 q 301 679 265 654 q 382 717 338 704 q 475 731 426 731 q 625 702 565 731 q 715 613 685 674 q 746 457 746 553 l 746 0 l 625 0 l 625 449 q 585 583 625 539 q 458 628 544 628 q 328 597 375 628 q 260 506 281 565 q 240 358 240 446 l 240 0 l 118 0 l 118 839 l 13 839 l 13 931 l 118 931 l 118 1056 l 240 1056 z "},"˝":{"ha":610,"x_min":56,"x_max":554,"o":"m 554 1050 q 522 1004 543 1032 q 474 946 501 976 q 420 888 447 915 q 369 842 393 861 l 300 842 l 300 858 q 342 921 319 885 q 385 995 364 957 q 421 1064 407 1033 l 554 1064 l 554 1050 m 310 1050 q 278 1004 299 1032 q 230 946 257 976 q 176 888 203 915 q 125 842 149 861 l 56 842 l 56 858 q 97 921 75 885 q 140 995 119 957 q 176 1064 161 1033 l 310 1064 l 310 1050 z "},"̋":{"ha":0,"x_min":-175,"x_max":324,"o":"m 324 1050 q 292 1004 313 1032 q 244 946 271 976 q 190 888 217 915 q 139 842 163 861 l 69 842 l 69 858 q 111 921 89 885 q 155 995 133 957 q 190 1064 176 1033 l 324 1064 l 324 1050 m 79 1050 q 47 1004 68 1032 q -1 946 26 976 q -55 888 -28 915 q -106 842 -82 861 l -175 842 l -175 858 q -133 921 -156 885 q -90 995 -111 957 q -54 1064 -69 1033 l 79 1064 l 79 1050 z "},"i":{"ha":358,"x_min":108,"x_max":251,"o":"m 240 744 l 240 0 l 118 0 l 118 744 l 240 744 m 181 1024 q 230 1005 208 1024 q 251 946 251 986 q 230 888 251 907 q 181 868 208 868 q 129 888 150 868 q 108 946 108 907 q 129 1005 108 986 q 181 1024 150 1024 z "},"í":{"ha":358,"x_min":106,"x_max":385,"o":"m 240 0 l 118 0 l 118 744 l 240 744 l 240 0 m 385 1050 q 349 1003 372 1031 q 297 945 325 975 q 240 888 268 915 q 186 842 211 861 l 106 842 l 106 858 q 151 921 126 885 q 199 995 175 957 q 238 1064 222 1033 l 385 1064 l 385 1050 z "},"î":{"ha":358,"x_min":-56,"x_max":414,"o":"m 240 0 l 118 0 l 118 744 l 240 744 l 240 0 m 240 1064 q 288 995 257 1033 q 353 920 319 957 q 414 857 388 883 l 414 842 l 328 842 q 253 897 292 864 q 176 967 214 929 q 101 897 139 929 q 28 842 64 865 l -56 842 l -56 857 q 3 921 -29 885 q 67 995 36 957 q 115 1064 97 1033 l 240 1064 z "},"ï":{"ha":358,"x_min":-15,"x_max":375,"o":"m 240 0 l 118 0 l 118 744 l 240 744 l 240 0 m -15 946 q 4 998 -15 982 q 50 1014 24 1014 q 96 998 76 1014 q 115 946 115 982 q 96 894 115 911 q 50 876 76 876 q 4 894 24 876 q -15 946 -15 911 m 246 946 q 265 998 246 982 q 310 1014 283 1014 q 356 998 336 1014 q 375 946 375 982 q 356 894 375 911 q 310 876 336 876 q 265 894 283 876 q 246 946 246 911 z "},"ı":{"ha":358,"x_min":118,"x_max":240,"o":"m 240 0 l 118 0 l 118 744 l 240 744 l 240 0 z "},"ì":{"ha":358,"x_min":-1,"x_max":278,"o":"m 240 0 l 118 0 l 118 744 l 240 744 l 240 0 m 144 1064 q 183 995 160 1033 q 231 921 206 957 q 278 858 257 885 l 278 842 l 196 842 q 143 888 172 861 q 85 945 114 915 q 34 1003 57 975 q -1 1050 11 1031 l -1 1064 l 144 1064 z "},"ī":{"ha":358,"x_min":-28,"x_max":385,"o":"m 240 0 l 118 0 l 118 744 l 240 744 l 240 0 m 385 940 l 385 842 l -28 842 l -28 940 l 385 940 z "},"į":{"ha":358,"x_min":38,"x_max":267,"o":"m 240 744 l 240 0 l 118 0 l 118 744 l 240 744 m 181 1024 q 230 1005 208 1024 q 251 946 251 986 q 230 888 251 907 q 181 868 208 868 q 129 888 150 868 q 108 946 108 907 q 129 1005 108 986 q 181 1024 150 1024 m 138 -161 q 154 -208 138 -192 q 200 -224 171 -224 q 240 -220 224 -224 q 267 -215 256 -217 l 267 -293 q 228 -302 247 -299 q 181 -306 208 -306 q 72 -271 107 -306 q 38 -175 38 -236 q 58 -97 38 -135 q 108 -29 78 -60 q 165 21 138 1 l 232 0 q 161 -81 185 -44 q 138 -161 138 -118 z "},"j":{"ha":358,"x_min":-76,"x_max":251,"o":"m 31 -333 q -31 -328 -4 -333 q -76 -317 -57 -324 l -76 -218 q -33 -228 -56 -224 q 15 -232 -11 -232 q 89 -208 60 -232 q 118 -115 118 -183 l 118 744 l 240 744 l 240 -111 q 218 -231 240 -181 q 150 -307 196 -281 q 31 -333 104 -333 m 108 946 q 129 1005 108 986 q 181 1024 150 1024 q 230 1005 208 1024 q 251 946 251 986 q 230 888 251 907 q 181 868 208 868 q 129 888 150 868 q 108 946 108 907 z "},"ȷ":{"ha":358,"x_min":-76,"x_max":240,"o":"m 31 -333 q -31 -328 -4 -333 q -76 -317 -57 -324 l -76 -218 q -33 -228 -56 -224 q 15 -232 -11 -232 q 89 -208 60 -232 q 118 -115 118 -183 l 118 744 l 240 744 l 240 -111 q 218 -231 240 -181 q 150 -307 196 -281 q 31 -333 104 -333 z "},"k":{"ha":742,"x_min":118,"x_max":729,"o":"m 239 504 q 237 446 239 482 q 233 383 235 410 l 239 383 q 264 415 247 394 q 298 458 281 436 q 328 493 315 479 l 565 744 l 708 744 l 407 426 l 729 0 l 582 0 l 324 347 l 239 274 l 239 0 l 118 0 l 118 1056 l 239 1056 l 239 504 z "},"ķ":{"ha":742,"x_min":118,"x_max":729,"o":"m 239 504 q 237 446 239 482 q 233 383 235 410 l 239 383 q 264 415 247 394 q 298 458 281 436 q 328 493 315 479 l 565 744 l 708 744 l 407 426 l 729 0 l 582 0 l 324 347 l 239 274 l 239 0 l 118 0 l 118 1056 l 239 1056 l 239 504 m 460 -97 q 437 -160 454 -122 q 397 -237 419 -199 q 349 -307 374 -276 l 282 -307 l 282 -290 q 305 -230 293 -267 q 326 -153 317 -193 q 339 -85 336 -114 l 460 -85 l 460 -97 z "},"l":{"ha":358,"x_min":118,"x_max":240,"o":"m 240 0 l 118 0 l 118 1056 l 240 1056 l 240 0 z "},"ĺ":{"ha":358,"x_min":106,"x_max":385,"o":"m 240 0 l 118 0 l 118 1056 l 240 1056 l 240 0 m 385 1361 q 349 1314 372 1342 q 297 1256 325 1286 q 240 1199 268 1226 q 186 1153 211 1172 l 106 1153 l 106 1169 q 151 1232 126 1196 q 199 1306 175 1268 q 238 1375 222 1344 l 385 1375 l 385 1361 z "},"ľ":{"ha":358,"x_min":118,"x_max":468,"o":"m 240 0 l 118 0 l 118 1056 l 240 1056 l 240 0 m 468 1043 q 447 981 463 1018 q 410 903 431 943 q 368 833 389 864 l 301 833 l 301 850 q 315 896 308 869 q 328 951 322 922 q 340 1006 335 979 q 347 1056 344 1033 l 468 1056 l 468 1043 z "},"ļ":{"ha":358,"x_min":90,"x_max":268,"o":"m 240 0 l 118 0 l 118 1056 l 240 1056 l 240 0 m 268 -97 q 245 -160 263 -122 q 205 -237 228 -199 q 157 -307 182 -276 l 90 -307 l 90 -290 q 113 -230 101 -267 q 135 -153 125 -193 q 147 -85 144 -114 l 268 -85 l 268 -97 z "},"ł":{"ha":358,"x_min":-12,"x_max":371,"o":"m 108 0 l 108 396 l 38 351 l -12 433 l 108 511 l 108 1056 l 231 1056 l 231 590 l 319 651 l 371 569 l 231 475 l 231 0 l 108 0 z "},"m":{"ha":1299,"x_min":118,"x_max":1186,"o":"m 935 758 q 1124 694 1061 758 q 1186 485 1186 629 l 1186 0 l 1065 0 l 1065 479 q 1028 611 1065 567 q 914 656 992 656 q 759 593 806 656 q 713 411 713 531 l 713 0 l 592 0 l 592 479 q 575 577 592 538 q 525 636 558 617 q 439 656 492 656 q 321 624 364 656 q 259 533 278 593 q 240 386 240 474 l 240 0 l 118 0 l 118 744 l 217 744 l 235 643 l 242 643 q 299 708 265 682 q 375 746 333 733 q 461 758 417 758 q 605 728 547 758 q 689 633 663 697 l 696 633 q 798 728 733 697 q 935 758 863 758 z "},"̄":{"ha":0,"x_min":-206,"x_max":207,"o":"m 207 940 l 207 842 l -206 842 l -206 940 l 207 940 z "},"n":{"ha":858,"x_min":118,"x_max":746,"o":"m 476 758 q 678 694 610 758 q 746 485 746 629 l 746 0 l 625 0 l 625 476 q 585 611 625 567 q 458 656 544 656 q 288 586 335 656 q 240 386 240 517 l 240 0 l 118 0 l 118 744 l 217 744 l 235 643 l 242 643 q 303 708 267 682 q 385 746 340 733 q 476 758 429 758 z "},"ń":{"ha":858,"x_min":118,"x_max":746,"o":"m 476 758 q 678 694 610 758 q 746 485 746 629 l 746 0 l 625 0 l 625 476 q 585 611 625 567 q 458 656 544 656 q 288 586 335 656 q 240 386 240 517 l 240 0 l 118 0 l 118 744 l 217 744 l 235 643 l 242 643 q 303 708 267 682 q 385 746 340 733 q 476 758 429 758 m 635 1050 q 599 1003 622 1031 q 547 945 575 975 q 490 888 518 915 q 436 842 461 861 l 356 842 l 356 858 q 401 921 376 885 q 449 995 425 957 q 488 1064 472 1033 l 635 1064 l 635 1050 z "},"ň":{"ha":858,"x_min":118,"x_max":746,"o":"m 476 758 q 678 694 610 758 q 746 485 746 629 l 746 0 l 625 0 l 625 476 q 585 611 625 567 q 458 656 544 656 q 288 586 335 656 q 240 386 240 517 l 240 0 l 118 0 l 118 744 l 217 744 l 235 643 l 242 643 q 303 708 267 682 q 385 746 340 733 q 476 758 429 758 m 365 842 q 317 910 347 874 q 253 983 286 947 q 194 1046 219 1019 l 194 1064 l 278 1064 q 353 1007 314 1040 q 426 936 392 974 q 503 1007 464 974 q 578 1064 542 1040 l 664 1064 l 664 1046 q 603 983 638 1019 q 538 910 569 947 q 490 842 507 874 l 365 842 z "},"ņ":{"ha":858,"x_min":118,"x_max":746,"o":"m 476 758 q 678 694 610 758 q 746 485 746 629 l 746 0 l 625 0 l 625 476 q 585 611 625 567 q 458 656 544 656 q 288 586 335 656 q 240 386 240 517 l 240 0 l 118 0 l 118 744 l 217 744 l 235 643 l 242 643 q 303 708 267 682 q 385 746 340 733 q 476 758 429 758 m 518 -97 q 495 -160 513 -122 q 455 -237 478 -199 q 407 -307 432 -276 l 340 -307 l 340 -290 q 363 -230 351 -267 q 385 -153 375 -193 q 397 -85 394 -114 l 518 -85 l 518 -97 z "},"ñ":{"ha":858,"x_min":118,"x_max":746,"o":"m 476 758 q 678 694 610 758 q 746 485 746 629 l 746 0 l 625 0 l 625 476 q 585 611 625 567 q 458 656 544 656 q 288 586 335 656 q 240 386 240 517 l 240 0 l 118 0 l 118 744 l 217 744 l 235 643 l 242 643 q 303 708 267 682 q 385 746 340 733 q 476 758 429 758 m 175 842 q 191 916 179 883 q 222 972 203 949 q 268 1007 242 994 q 328 1019 294 1019 q 387 1008 358 1019 q 442 980 415 996 q 492 952 468 964 q 539 940 517 940 q 588 960 571 940 q 615 1021 606 981 l 685 1021 q 638 892 676 940 q 533 843 599 843 q 476 855 504 843 q 422 883 449 867 q 370 910 394 899 q 322 922 346 922 q 272 902 289 922 q 246 842 256 882 l 175 842 z "},"o":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 741 209 765 281 q 672 88 717 138 q 562 12 626 38 q 418 -14 497 -14 q 282 12 344 -14 q 174 88 219 38 q 102 209 128 138 q 76 374 76 281 q 118 583 76 497 q 238 713 160 668 q 422 758 315 758 q 601 713 524 758 q 722 583 678 668 q 765 374 765 497 m 203 374 q 226 222 203 286 q 297 122 249 157 q 421 88 346 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 q 615 525 639 463 q 544 622 592 588 q 419 656 496 656 q 254 581 306 656 q 203 374 203 506 z "},"ó":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 741 209 765 281 q 672 88 717 138 q 562 12 626 38 q 418 -14 497 -14 q 282 12 344 -14 q 174 88 219 38 q 102 209 128 138 q 76 374 76 281 q 118 583 76 497 q 238 713 160 668 q 422 758 315 758 q 601 713 524 758 q 722 583 678 668 q 765 374 765 497 m 203 374 q 226 222 203 286 q 297 122 249 157 q 421 88 346 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 q 615 525 639 463 q 544 622 592 588 q 419 656 496 656 q 254 581 306 656 q 203 374 203 506 m 626 1050 q 590 1003 614 1031 q 538 945 567 975 q 481 888 510 915 q 428 842 453 861 l 347 842 l 347 858 q 392 921 368 885 q 440 995 417 957 q 479 1064 464 1033 l 626 1064 l 626 1050 z "},"ô":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 741 209 765 281 q 672 88 717 138 q 562 12 626 38 q 418 -14 497 -14 q 282 12 344 -14 q 174 88 219 38 q 102 209 128 138 q 76 374 76 281 q 118 583 76 497 q 238 713 160 668 q 422 758 315 758 q 601 713 524 758 q 722 583 678 668 q 765 374 765 497 m 203 374 q 226 222 203 286 q 297 122 249 157 q 421 88 346 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 q 615 525 639 463 q 544 622 592 588 q 419 656 496 656 q 254 581 306 656 q 203 374 203 506 m 482 1064 q 530 995 499 1033 q 595 920 561 957 q 656 857 629 883 l 656 842 l 569 842 q 494 897 533 864 q 418 967 456 929 q 343 897 381 929 q 269 842 306 865 l 186 842 l 186 857 q 245 921 213 885 q 308 995 278 957 q 357 1064 339 1033 l 482 1064 z "},"ö":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 741 209 765 281 q 672 88 717 138 q 562 12 626 38 q 418 -14 497 -14 q 282 12 344 -14 q 174 88 219 38 q 102 209 128 138 q 76 374 76 281 q 118 583 76 497 q 238 713 160 668 q 422 758 315 758 q 601 713 524 758 q 722 583 678 668 q 765 374 765 497 m 203 374 q 226 222 203 286 q 297 122 249 157 q 421 88 346 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 q 615 525 639 463 q 544 622 592 588 q 419 656 496 656 q 254 581 306 656 q 203 374 203 506 m 226 946 q 246 998 226 982 q 292 1014 265 1014 q 338 998 318 1014 q 357 946 357 982 q 338 894 357 911 q 292 876 318 876 q 246 894 265 876 q 226 946 226 911 m 488 946 q 506 998 488 982 q 551 1014 525 1014 q 597 998 578 1014 q 617 946 617 982 q 597 894 617 911 q 551 876 578 876 q 506 894 525 876 q 488 946 488 911 z "},"œ":{"ha":1314,"x_min":75,"x_max":1242,"o":"m 940 757 q 1102 715 1035 757 q 1206 599 1169 674 q 1242 422 1242 524 l 1242 349 l 747 349 q 808 153 750 215 q 972 90 865 90 q 1099 103 1046 90 q 1208 142 1153 117 l 1208 35 q 1099 -2 1153 10 q 971 -14 1044 -14 q 804 25 876 -14 q 688 140 732 64 q 574 25 644 64 q 411 -14 503 -14 q 238 31 314 -14 q 119 163 163 76 q 75 374 75 250 q 116 581 75 496 q 233 712 157 667 q 415 757 310 757 q 572 718 503 757 q 683 604 642 679 q 749 688 711 654 q 835 740 788 722 q 940 757 883 757 m 410 656 q 251 585 300 656 q 203 374 203 514 q 224 217 203 281 q 292 120 246 153 q 413 88 339 88 q 531 119 485 88 q 599 214 576 151 q 621 368 621 276 q 599 528 621 465 q 530 624 576 592 q 410 656 483 656 m 939 657 q 807 603 856 657 q 750 446 758 549 l 1113 446 q 1094 557 1113 510 q 1038 631 1076 604 q 939 657 1000 657 z "},"˛":{"ha":340,"x_min":56,"x_max":285,"o":"m 156 -161 q 172 -208 156 -192 q 218 -224 189 -224 q 258 -220 242 -224 q 285 -215 274 -217 l 285 -293 q 246 -302 265 -299 q 199 -306 226 -306 q 90 -271 125 -306 q 56 -175 56 -236 q 76 -97 56 -135 q 126 -29 96 -60 q 183 21 156 1 l 250 0 q 179 -81 203 -44 q 156 -161 156 -118 z "},"̨":{"ha":0,"x_min":-114,"x_max":115,"o":"m -14 -161 q 3 -208 -14 -192 q 49 -224 19 -224 q 88 -220 72 -224 q 115 -215 104 -217 l 115 -293 q 76 -302 96 -299 q 29 -306 57 -306 q -79 -271 -44 -306 q -114 -175 -114 -236 q -94 -97 -114 -135 q -44 -29 -74 -60 q 14 21 -14 1 l 81 0 q 10 -81 33 -44 q -14 -161 -14 -118 z "},"ò":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 741 209 765 281 q 672 88 717 138 q 562 12 626 38 q 418 -14 497 -14 q 282 12 344 -14 q 174 88 219 38 q 102 209 128 138 q 76 374 76 281 q 118 583 76 497 q 238 713 160 668 q 422 758 315 758 q 601 713 524 758 q 722 583 678 668 q 765 374 765 497 m 203 374 q 226 222 203 286 q 297 122 249 157 q 421 88 346 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 q 615 525 639 463 q 544 622 592 588 q 419 656 496 656 q 254 581 306 656 q 203 374 203 506 m 386 1064 q 424 995 401 1033 q 473 921 447 957 q 519 858 499 885 l 519 842 l 438 842 q 385 888 414 861 q 327 945 356 915 q 276 1003 299 975 q 240 1050 253 1031 l 240 1064 l 386 1064 z "},"ő":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 741 209 765 281 q 672 88 717 138 q 562 12 626 38 q 418 -14 497 -14 q 282 12 344 -14 q 174 88 219 38 q 102 209 128 138 q 76 374 76 281 q 118 583 76 497 q 238 713 160 668 q 422 758 315 758 q 601 713 524 758 q 722 583 678 668 q 765 374 765 497 m 203 374 q 226 222 203 286 q 297 122 249 157 q 421 88 346 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 q 615 525 639 463 q 544 622 592 588 q 419 656 496 656 q 254 581 306 656 q 203 374 203 506 m 669 1050 q 638 1004 658 1032 q 590 946 617 976 q 535 888 563 915 q 485 842 508 861 l 415 842 l 415 858 q 457 921 435 885 q 501 995 479 957 q 536 1064 522 1033 l 669 1064 l 669 1050 m 425 1050 q 393 1004 414 1032 q 345 946 372 976 q 291 888 318 915 q 240 842 264 861 l 171 842 l 171 858 q 213 921 190 885 q 256 995 235 957 q 292 1064 276 1033 l 425 1064 l 425 1050 z "},"ō":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 741 209 765 281 q 672 88 717 138 q 562 12 626 38 q 418 -14 497 -14 q 282 12 344 -14 q 174 88 219 38 q 102 209 128 138 q 76 374 76 281 q 118 583 76 497 q 238 713 160 668 q 422 758 315 758 q 601 713 524 758 q 722 583 678 668 q 765 374 765 497 m 203 374 q 226 222 203 286 q 297 122 249 157 q 421 88 346 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 q 615 525 639 463 q 544 622 592 588 q 419 656 496 656 q 254 581 306 656 q 203 374 203 506 m 626 940 l 626 842 l 214 842 l 214 940 l 626 940 z "},"ª":{"ha":496,"x_min":44,"x_max":428,"o":"m 246 1003 q 382 965 336 1003 q 428 846 428 928 l 428 540 l 363 540 l 346 599 q 279 551 318 569 q 188 532 240 532 q 112 547 144 532 q 62 593 79 563 q 44 669 44 624 q 68 748 44 717 q 141 796 92 779 q 264 815 190 813 l 342 818 l 342 849 q 313 913 342 894 q 243 931 283 931 q 169 920 204 931 q 103 894 135 910 l 72 963 q 153 992 108 981 q 246 1003 199 1003 m 275 753 q 163 728 192 750 q 133 669 133 707 q 153 619 133 635 q 208 603 174 603 q 310 635 279 603 q 342 724 342 668 l 342 756 l 275 753 z "},"º":{"ha":522,"x_min":44,"x_max":479,"o":"m 479 768 q 419 594 479 656 q 260 532 360 532 q 106 592 167 532 q 44 768 44 653 q 103 942 44 882 q 263 1003 161 1003 q 376 976 328 1003 q 452 897 425 949 q 479 768 479 844 m 132 768 q 163 647 132 688 q 261 606 193 606 q 360 647 329 606 q 390 768 390 688 q 360 890 390 850 q 261 929 329 929 q 163 890 193 929 q 132 768 132 850 z "},"ø":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 723 163 765 250 q 603 31 681 76 q 418 -14 525 -14 q 322 -2 367 -14 q 239 32 278 10 l 183 -46 l 103 8 l 165 94 q 99 215 122 144 q 76 374 76 285 q 169 658 76 558 q 422 758 263 758 q 519 745 474 758 q 604 708 565 732 l 658 786 l 740 733 l 678 646 q 742 528 718 597 q 765 374 765 460 m 203 374 q 210 276 203 321 q 236 196 218 231 l 542 621 q 487 647 518 638 q 419 656 456 656 q 254 581 306 656 q 203 374 203 506 m 639 374 q 631 468 639 425 q 607 544 622 511 l 301 119 q 356 96 325 104 q 421 88 386 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 z "},"õ":{"ha":840,"x_min":76,"x_max":765,"o":"m 765 374 q 741 209 765 281 q 672 88 717 138 q 562 12 626 38 q 418 -14 497 -14 q 282 12 344 -14 q 174 88 219 38 q 102 209 128 138 q 76 374 76 281 q 118 583 76 497 q 238 713 160 668 q 422 758 315 758 q 601 713 524 758 q 722 583 678 668 q 765 374 765 497 m 203 374 q 226 222 203 286 q 297 122 249 157 q 421 88 346 88 q 544 122 496 88 q 616 222 593 157 q 639 374 639 286 q 615 525 639 463 q 544 622 592 588 q 419 656 496 656 q 254 581 306 656 q 203 374 203 506 m 167 842 q 183 916 171 883 q 214 972 194 949 q 260 1007 233 994 q 319 1019 286 1019 q 378 1008 350 1019 q 433 980 407 996 q 484 952 460 964 q 531 940 508 940 q 580 960 563 940 q 607 1021 597 981 l 676 1021 q 629 892 668 940 q 525 843 590 843 q 468 855 496 843 q 413 883 440 867 q 362 910 386 899 q 314 922 338 922 q 264 902 281 922 q 238 842 247 882 l 167 842 z "},"¯":{"ha":694,"x_min":-4,"x_max":699,"o":"m 699 1056 l -4 1056 l -4 1147 l 699 1147 l 699 1056 z "},"p":{"ha":854,"x_min":118,"x_max":778,"o":"m 472 758 q 694 663 610 758 q 778 374 778 567 q 740 160 778 247 q 633 30 701 74 q 471 -14 564 -14 q 369 1 414 -14 q 294 41 325 17 q 240 94 263 65 l 232 94 q 238 35 235 71 q 240 -28 240 -1 l 240 -333 l 118 -333 l 118 744 l 218 744 l 235 643 l 240 643 q 294 701 263 675 q 369 743 325 728 q 472 758 413 758 m 450 656 q 329 627 375 656 q 263 542 283 599 q 240 397 242 485 l 240 374 q 260 218 240 282 q 326 121 279 154 q 453 88 372 88 q 565 125 521 88 q 630 227 608 163 q 651 375 651 292 q 602 579 651 503 q 450 656 553 656 z "},"¶":{"ha":910,"x_min":76,"x_max":763,"o":"m 763 -176 l 682 -176 l 682 978 l 540 978 l 540 -176 l 460 -176 l 460 379 q 412 370 439 374 q 361 367 385 367 q 211 399 275 367 q 112 506 147 431 q 76 707 76 581 q 115 916 76 840 q 222 1024 153 992 q 382 1056 292 1056 l 763 1056 l 763 -176 z "},"·":{"ha":372,"x_min":100,"x_max":272,"o":"m 100 490 q 125 563 100 542 q 185 583 150 583 q 247 563 221 583 q 272 490 272 542 q 247 418 272 440 q 185 396 221 396 q 125 418 150 396 q 100 490 100 440 z "},"q":{"ha":854,"x_min":76,"x_max":736,"o":"m 614 -15 q 615 43 614 10 q 621 100 617 76 l 613 100 q 524 19 581 53 q 379 -14 468 -14 q 160 83 244 -14 q 76 371 76 179 q 115 585 76 499 q 224 715 154 671 q 383 758 293 758 q 526 725 471 758 q 615 643 582 692 l 621 643 l 639 744 l 736 744 l 736 -333 l 614 -333 l 614 -15 m 403 88 q 526 115 479 88 q 593 201 572 143 q 615 344 614 258 l 615 369 q 568 584 615 511 q 400 657 521 657 q 251 578 300 657 q 203 368 203 500 q 252 162 203 236 q 403 88 301 88 z "},"¿":{"ha":603,"x_min":33,"x_max":583,"o":"m 406 422 q 395 332 406 371 q 360 259 385 293 q 289 186 335 225 q 206 110 236 142 q 163 50 175 79 q 150 -21 150 21 q 194 -124 150 -87 q 318 -160 238 -160 q 440 -142 388 -160 q 540 -101 493 -124 l 583 -199 q 460 -247 528 -228 q 310 -267 393 -267 q 106 -201 178 -267 q 33 -24 33 -136 q 53 83 33 39 q 110 163 74 126 q 197 242 147 200 q 268 310 244 282 q 300 368 292 339 q 308 436 308 397 l 308 460 l 406 460 l 406 422 m 438 664 q 413 592 438 613 q 351 571 389 571 q 292 592 317 571 q 267 664 267 613 q 292 736 267 714 q 351 758 317 758 q 413 736 389 758 q 438 664 438 714 z "},"„":{"ha":578,"x_min":43,"x_max":508,"o":"m 508 146 q 476 40 496 97 q 434 -73 457 -17 q 389 -179 411 -129 l 297 -179 q 324 -66 311 -126 q 349 53 338 -6 q 368 161 361 113 l 499 161 l 508 146 m 251 146 q 219 40 239 97 q 177 -73 200 -17 q 132 -179 154 -129 l 43 -179 q 63 -96 53 -140 q 81 -6 72 -51 q 98 82 90 39 q 111 161 106 125 l 242 161 l 251 146 z "},"‚":{"ha":347,"x_min":43,"x_max":253,"o":"m 253 146 q 221 40 240 97 q 178 -73 201 -17 q 133 -179 156 -129 l 43 -179 q 63 -96 53 -140 q 83 -6 74 -51 q 99 82 92 39 q 113 161 107 125 l 243 161 l 253 146 z "},"r":{"ha":574,"x_min":118,"x_max":553,"o":"m 465 758 q 510 756 486 758 q 553 750 535 754 l 538 638 q 498 644 519 642 q 457 647 476 647 q 375 629 414 647 q 306 578 336 611 q 258 500 275 546 q 240 397 240 454 l 240 0 l 118 0 l 118 744 l 218 744 l 232 608 l 238 608 q 294 684 261 650 q 371 738 328 718 q 465 758 414 758 z "},"ŕ":{"ha":574,"x_min":118,"x_max":553,"o":"m 465 758 q 510 756 486 758 q 553 750 535 754 l 538 638 q 498 644 519 642 q 457 647 476 647 q 375 629 414 647 q 306 578 336 611 q 258 500 275 546 q 240 397 240 454 l 240 0 l 118 0 l 118 744 l 218 744 l 232 608 l 238 608 q 294 684 261 650 q 371 738 328 718 q 465 758 414 758 m 539 1050 q 503 1003 526 1031 q 451 945 479 975 q 394 888 422 915 q 340 842 365 861 l 260 842 l 260 858 q 305 921 281 885 q 353 995 329 957 q 392 1064 376 1033 l 539 1064 l 539 1050 z "},"ř":{"ha":574,"x_min":99,"x_max":568,"o":"m 465 758 q 510 756 486 758 q 553 750 535 754 l 538 638 q 498 644 519 642 q 457 647 476 647 q 375 629 414 647 q 306 578 336 611 q 258 500 275 546 q 240 397 240 454 l 240 0 l 118 0 l 118 744 l 218 744 l 232 608 l 238 608 q 294 684 261 650 q 371 738 328 718 q 465 758 414 758 m 269 842 q 221 910 251 874 q 157 983 190 947 q 99 1046 124 1019 l 99 1064 l 182 1064 q 257 1007 218 1040 q 331 936 296 974 q 407 1007 368 974 q 482 1064 446 1040 l 568 1064 l 568 1046 q 508 983 542 1019 q 442 910 474 947 q 394 842 411 874 l 269 842 z "},"ŗ":{"ha":574,"x_min":86,"x_max":553,"o":"m 465 758 q 510 756 486 758 q 553 750 535 754 l 538 638 q 498 644 519 642 q 457 647 476 647 q 375 629 414 647 q 306 578 336 611 q 258 500 275 546 q 240 397 240 454 l 240 0 l 118 0 l 118 744 l 218 744 l 232 608 l 238 608 q 294 684 261 650 q 371 738 328 718 q 465 758 414 758 m 264 -97 q 241 -160 258 -122 q 201 -237 224 -199 q 153 -307 178 -276 l 86 -307 l 86 -290 q 109 -230 97 -267 q 131 -153 121 -193 q 143 -85 140 -114 l 264 -85 l 264 -97 z "},"®":{"ha":1156,"x_min":68,"x_max":1088,"o":"m 388 192 l 388 799 l 565 799 q 732 754 679 799 q 785 619 785 710 q 751 516 785 554 q 676 461 718 478 l 838 192 l 718 192 l 579 432 l 493 432 l 493 192 l 388 192 m 563 518 q 647 546 617 518 q 678 617 678 574 q 650 688 678 665 q 561 710 622 710 l 493 710 l 493 518 l 563 518 m 578 -14 q 374 24 467 -14 q 212 130 281 61 q 106 292 143 199 q 68 496 68 385 q 106 700 68 607 q 212 862 143 793 q 374 968 281 931 q 578 1006 467 1006 q 776 968 683 1006 q 938 862 868 931 q 1048 700 1008 793 q 1088 496 1088 607 q 1050 292 1088 385 q 944 130 1013 199 q 782 24 875 61 q 578 -14 689 -14 m 578 60 q 744 92 667 60 q 882 183 822 124 q 975 321 942 242 q 1008 496 1008 400 q 976 665 1008 586 q 887 804 944 744 q 751 898 829 864 q 578 932 672 932 q 404 900 483 932 q 267 809 325 868 q 178 671 210 750 q 146 496 146 592 q 178 326 146 406 q 267 188 210 247 q 404 94 325 128 q 578 60 483 60 z "},"˚":{"ha":417,"x_min":56,"x_max":361,"o":"m 207 842 q 97 881 139 842 q 56 989 56 919 q 97 1097 56 1058 q 207 1135 139 1135 q 317 1097 272 1135 q 361 990 361 1058 q 317 881 361 919 q 207 842 274 842 m 207 911 q 263 932 242 911 q 285 989 285 953 q 263 1046 285 1025 q 207 1067 240 1067 q 151 1046 174 1067 q 129 989 129 1025 q 149 932 129 953 q 207 911 169 911 z "},"̊":{"ha":0,"x_min":-150,"x_max":156,"o":"m 1 842 q -108 881 -67 842 q -150 989 -150 919 q -108 1097 -150 1058 q 1 1135 -67 1135 q 111 1097 67 1135 q 156 990 156 1058 q 112 881 156 919 q 1 842 68 842 m 1 911 q 58 932 36 911 q 79 989 79 953 q 57 1046 79 1025 q 1 1067 35 1067 q -54 1046 -32 1067 q -76 989 -76 1025 q -56 932 -76 953 q 1 911 -36 911 z "},"s":{"ha":665,"x_min":71,"x_max":603,"o":"m 603 206 q 567 85 603 133 q 464 11 531 36 q 306 -14 397 -14 q 172 -1 228 -14 q 72 33 115 11 l 72 144 q 180 103 117 122 q 308 85 243 85 q 443 115 401 85 q 485 194 485 144 q 469 244 485 222 q 415 289 454 267 q 301 339 375 311 q 178 394 229 367 q 99 461 126 422 q 71 561 71 500 q 148 707 71 656 q 350 758 225 758 q 477 745 418 758 q 588 708 536 732 l 546 611 q 447 644 499 631 q 342 658 396 658 q 227 634 267 658 q 188 568 188 610 q 206 516 188 538 q 266 474 224 494 q 379 426 308 454 q 500 372 450 400 q 576 305 550 344 q 603 206 603 265 z "},"ś":{"ha":665,"x_min":71,"x_max":603,"o":"m 603 206 q 567 85 603 133 q 464 11 531 36 q 306 -14 397 -14 q 172 -1 228 -14 q 72 33 115 11 l 72 144 q 180 103 117 122 q 308 85 243 85 q 443 115 401 85 q 485 194 485 144 q 469 244 485 222 q 415 289 454 267 q 301 339 375 311 q 178 394 229 367 q 99 461 126 422 q 71 561 71 500 q 148 707 71 656 q 350 758 225 758 q 477 745 418 758 q 588 708 536 732 l 546 611 q 447 644 499 631 q 342 658 396 658 q 227 634 267 658 q 188 568 188 610 q 206 516 188 538 q 266 474 224 494 q 379 426 308 454 q 500 372 450 400 q 576 305 550 344 q 603 206 603 265 m 539 1050 q 503 1003 526 1031 q 451 945 479 975 q 394 888 422 915 q 340 842 365 861 l 260 842 l 260 858 q 305 921 281 885 q 353 995 329 957 q 392 1064 376 1033 l 539 1064 l 539 1050 z "},"š":{"ha":665,"x_min":71,"x_max":603,"o":"m 603 206 q 567 85 603 133 q 464 11 531 36 q 306 -14 397 -14 q 172 -1 228 -14 q 72 33 115 11 l 72 144 q 180 103 117 122 q 308 85 243 85 q 443 115 401 85 q 485 194 485 144 q 469 244 485 222 q 415 289 454 267 q 301 339 375 311 q 178 394 229 367 q 99 461 126 422 q 71 561 71 500 q 148 707 71 656 q 350 758 225 758 q 477 745 418 758 q 588 708 536 732 l 546 611 q 447 644 499 631 q 342 658 396 658 q 227 634 267 658 q 188 568 188 610 q 206 516 188 538 q 266 474 224 494 q 379 426 308 454 q 500 372 450 400 q 576 305 550 344 q 603 206 603 265 m 269 842 q 221 910 251 874 q 157 983 190 947 q 99 1046 124 1019 l 99 1064 l 182 1064 q 257 1007 218 1040 q 331 936 296 974 q 407 1007 368 974 q 482 1064 446 1040 l 568 1064 l 568 1046 q 508 983 542 1019 q 442 910 474 947 q 394 842 411 874 l 269 842 z "},"ş":{"ha":665,"x_min":71,"x_max":603,"o":"m 603 206 q 567 85 603 133 q 464 11 531 36 q 306 -14 397 -14 q 172 -1 228 -14 q 72 33 115 11 l 72 144 q 180 103 117 122 q 308 85 243 85 q 443 115 401 85 q 485 194 485 144 q 469 244 485 222 q 415 289 454 267 q 301 339 375 311 q 178 394 229 367 q 99 461 126 422 q 71 561 71 500 q 148 707 71 656 q 350 758 225 758 q 477 745 418 758 q 588 708 536 732 l 546 611 q 447 644 499 631 q 342 658 396 658 q 227 634 267 658 q 188 568 188 610 q 206 516 188 538 q 266 474 224 494 q 379 426 308 454 q 500 372 450 400 q 576 305 550 344 q 603 206 603 265 m 471 -193 q 419 -297 471 -260 q 265 -333 368 -333 q 226 -331 244 -333 q 196 -326 207 -329 l 196 -250 q 229 -255 208 -253 q 269 -257 250 -257 q 346 -244 319 -257 q 372 -196 372 -231 q 335 -143 372 -160 q 246 -119 299 -126 l 306 0 l 386 0 l 350 -74 q 411 -95 383 -81 q 455 -133 439 -110 q 471 -193 471 -157 z "},"ș":{"ha":665,"x_min":71,"x_max":603,"o":"m 603 206 q 567 85 603 133 q 464 11 531 36 q 306 -14 397 -14 q 172 -1 228 -14 q 72 33 115 11 l 72 144 q 180 103 117 122 q 308 85 243 85 q 443 115 401 85 q 485 194 485 144 q 469 244 485 222 q 415 289 454 267 q 301 339 375 311 q 178 394 229 367 q 99 461 126 422 q 71 561 71 500 q 148 707 71 656 q 350 758 225 758 q 477 745 418 758 q 588 708 536 732 l 546 611 q 447 644 499 631 q 342 658 396 658 q 227 634 267 658 q 188 568 188 610 q 206 516 188 538 q 266 474 224 494 q 379 426 308 454 q 500 372 450 400 q 576 305 550 344 q 603 206 603 265 m 422 -97 q 399 -160 417 -122 q 359 -237 382 -199 q 311 -307 336 -276 l 244 -307 l 244 -290 q 267 -230 256 -267 q 289 -153 279 -193 q 301 -85 299 -114 l 422 -85 l 422 -97 z "},"§":{"ha":713,"x_min":82,"x_max":621,"o":"m 93 549 q 126 660 93 618 q 203 724 160 703 q 125 790 153 751 q 97 883 97 828 q 168 1015 97 967 q 371 1063 239 1063 q 503 1049 449 1063 q 608 1015 557 1036 l 571 922 q 476 955 524 942 q 363 968 429 968 q 245 947 279 968 q 211 886 211 925 q 228 841 211 861 q 284 801 244 821 q 394 754 324 781 q 517 697 467 728 q 594 627 567 667 q 621 532 621 588 q 589 416 621 461 q 517 347 557 371 q 592 284 565 321 q 619 194 619 247 q 540 46 619 99 q 317 -7 460 -7 q 183 5 240 -7 q 82 39 126 17 l 82 143 q 151 116 113 129 q 235 94 190 103 q 322 86 279 86 q 464 116 425 86 q 503 185 503 146 q 490 231 503 211 q 438 272 476 250 q 324 321 400 293 q 199 378 251 349 q 120 447 147 407 q 93 549 93 488 m 197 563 q 216 502 197 529 q 278 451 235 475 q 396 399 322 426 l 426 388 q 487 437 458 407 q 515 514 515 467 q 497 576 515 549 q 431 630 478 604 q 297 682 383 656 q 228 640 258 672 q 197 563 197 608 z "},"£":{"ha":794,"x_min":44,"x_max":743,"o":"m 464 1004 q 601 988 540 1004 q 710 947 663 971 l 667 850 q 574 886 625 869 q 467 903 524 903 q 346 862 388 903 q 304 729 304 821 l 304 536 l 588 536 l 588 444 l 304 444 l 304 300 q 291 208 304 244 q 256 149 278 171 q 210 111 235 126 l 743 111 l 743 0 l 44 0 l 44 103 q 115 135 85 113 q 164 198 146 158 q 182 299 182 238 l 182 444 l 49 444 l 49 536 l 182 536 l 182 742 q 217 883 182 825 q 315 973 251 942 q 464 1004 379 1004 z "},"t":{"ha":501,"x_min":22,"x_max":471,"o":"m 367 86 q 424 91 394 86 q 471 101 453 96 l 471 8 q 415 -8 451 -1 q 346 -14 379 -14 q 238 6 288 -14 q 158 76 189 26 q 128 217 128 126 l 128 650 l 22 650 l 22 708 l 129 757 l 178 915 l 250 915 l 250 744 l 465 744 l 465 650 l 250 650 l 250 219 q 283 119 250 151 q 367 86 315 86 z "},"ť":{"ha":501,"x_min":22,"x_max":653,"o":"m 367 86 q 424 91 394 86 q 471 101 453 96 l 471 8 q 415 -8 451 -1 q 346 -14 379 -14 q 238 6 288 -14 q 158 76 189 26 q 128 217 128 126 l 128 650 l 22 650 l 22 708 l 129 757 l 178 915 l 250 915 l 250 744 l 465 744 l 465 650 l 250 650 l 250 219 q 283 119 250 151 q 367 86 315 86 m 653 1043 q 631 981 647 1018 q 594 903 615 943 q 553 833 574 864 l 486 833 l 486 850 q 500 896 493 869 q 513 951 507 922 q 524 1006 519 979 q 532 1056 529 1033 l 653 1056 l 653 1043 z "},"ț":{"ha":501,"x_min":22,"x_max":471,"o":"m 367 86 q 424 91 394 86 q 471 101 453 96 l 471 8 q 415 -8 451 -1 q 346 -14 379 -14 q 238 6 288 -14 q 158 76 189 26 q 128 217 128 126 l 128 650 l 22 650 l 22 708 l 129 757 l 178 915 l 250 915 l 250 744 l 465 744 l 465 650 l 250 650 l 250 219 q 283 119 250 151 q 367 86 315 86 m 386 -97 q 363 -160 381 -122 q 323 -237 346 -199 q 275 -307 300 -276 l 208 -307 l 208 -290 q 231 -230 219 -267 q 253 -153 243 -193 q 265 -85 263 -114 l 386 -85 l 386 -97 z "},"þ":{"ha":854,"x_min":118,"x_max":778,"o":"m 778 374 q 740 160 778 247 q 633 30 701 74 q 472 -14 564 -14 q 370 1 414 -14 q 294 40 326 15 q 240 94 263 65 l 232 94 q 235 63 233 85 q 239 17 238 40 q 240 -22 240 -7 l 240 -333 l 118 -333 l 118 1056 l 240 1056 l 240 744 q 239 694 240 725 q 236 644 238 663 l 242 644 q 295 702 264 676 q 369 743 326 728 q 472 758 413 758 q 694 661 610 758 q 778 374 778 564 m 651 375 q 603 585 651 515 q 451 656 554 656 q 290 592 338 656 q 240 400 243 528 l 240 374 q 285 162 240 236 q 453 88 331 88 q 565 121 521 88 q 630 219 608 154 q 651 375 651 283 z "},"˜":{"ha":621,"x_min":56,"x_max":565,"o":"m 56 842 q 72 916 60 883 q 103 972 83 949 q 149 1007 122 994 q 208 1019 175 1019 q 267 1008 239 1019 q 322 980 296 996 q 373 952 349 964 q 419 940 397 940 q 469 960 451 940 q 496 1021 486 981 l 565 1021 q 518 892 557 940 q 414 843 479 843 q 357 855 385 843 q 302 883 329 867 q 251 910 275 899 q 203 922 226 922 q 153 902 169 922 q 126 842 136 882 l 56 842 z "},"̃":{"ha":0,"x_min":-682,"x_max":-172,"o":"m -682 842 q -666 916 -678 883 q -635 972 -654 949 q -589 1007 -615 994 q -529 1019 -562 1019 q -470 1008 -499 1019 q -415 980 -442 996 q -365 952 -389 964 q -318 940 -340 940 q -269 960 -286 940 q -242 1021 -251 981 l -172 1021 q -219 892 -181 940 q -324 843 -258 843 q -381 855 -353 843 q -435 883 -408 867 q -487 910 -462 899 q -535 922 -511 922 q -585 902 -568 922 q -611 842 -601 882 l -682 842 z "},"™":{"ha":1074,"x_min":24,"x_max":974,"o":"m 451 503 l 451 992 l 582 992 l 713 615 l 847 992 l 974 992 l 974 503 l 885 503 l 885 786 q 886 830 885 797 q 889 879 888 863 l 883 879 l 743 503 l 669 503 l 536 879 l 531 879 q 533 829 532 857 q 535 793 535 801 l 535 503 l 451 503 m 164 503 l 164 917 l 24 917 l 24 992 l 393 992 l 393 917 l 251 917 l 251 503 l 164 503 z "},"u":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 z "},"ú":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 635 1050 q 599 1003 622 1031 q 547 945 575 975 q 490 888 518 915 q 436 842 461 861 l 356 842 l 356 858 q 401 921 376 885 q 449 995 425 957 q 488 1064 472 1033 l 635 1064 l 635 1050 z "},"ŭ":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 644 1028 q 613 931 640 972 q 539 865 586 889 q 425 842 492 842 q 270 892 322 842 q 213 1028 218 943 l 288 1028 q 309 972 292 990 q 356 947 326 953 q 428 940 386 940 q 494 947 464 940 q 544 973 524 954 q 568 1028 564 992 l 644 1028 z "},"û":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 490 1064 q 538 995 507 1033 q 603 920 569 957 q 664 857 638 883 l 664 842 l 578 842 q 503 897 542 864 q 426 967 464 929 q 351 897 389 929 q 278 842 314 865 l 194 842 l 194 857 q 253 921 221 885 q 317 995 286 957 q 365 1064 347 1033 l 490 1064 z "},"ü":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 235 946 q 254 998 235 982 q 300 1014 274 1014 q 346 998 326 1014 q 365 946 365 982 q 346 894 365 911 q 300 876 326 876 q 254 894 274 876 q 235 946 235 911 m 496 946 q 515 998 496 982 q 560 1014 533 1014 q 606 998 586 1014 q 625 946 625 982 q 606 894 625 911 q 560 876 586 876 q 515 894 533 876 q 496 946 496 911 z "},"ù":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 394 1064 q 433 995 410 1033 q 481 921 456 957 q 528 858 507 885 l 528 842 l 446 842 q 393 888 422 861 q 335 945 364 915 q 284 1003 307 975 q 249 1050 261 1031 l 249 1064 l 394 1064 z "},"ű":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 678 1050 q 646 1004 667 1032 q 598 946 625 976 q 544 888 571 915 q 493 842 517 861 l 424 842 l 424 858 q 465 921 443 885 q 509 995 488 957 q 544 1064 531 1033 l 678 1064 l 678 1050 m 433 1050 q 401 1004 422 1032 q 353 946 381 976 q 299 888 326 915 q 249 842 272 861 l 179 842 l 179 858 q 221 921 199 885 q 264 995 243 957 q 300 1064 285 1033 l 433 1064 l 433 1050 z "},"ū":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 635 940 l 635 842 l 222 842 l 222 940 l 635 940 z "},"ų":{"ha":858,"x_min":110,"x_max":751,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 622 -161 q 639 -208 622 -192 q 685 -224 656 -224 q 724 -220 708 -224 q 751 -215 740 -217 l 751 -293 q 713 -302 732 -299 q 665 -306 693 -306 q 557 -271 592 -306 q 522 -175 522 -236 q 542 -97 522 -135 q 592 -29 563 -60 q 650 21 622 1 l 717 0 q 646 -81 669 -44 q 622 -161 622 -118 z "},"ů":{"ha":858,"x_min":110,"x_max":740,"o":"m 740 744 l 740 0 l 640 0 l 622 99 l 617 99 q 556 35 593 60 q 474 -2 518 10 q 381 -14 429 -14 q 231 15 292 -14 q 140 103 171 43 q 110 257 110 163 l 110 744 l 233 744 l 233 265 q 274 132 233 176 q 399 88 314 88 q 530 119 482 88 q 598 210 578 150 q 618 357 618 271 l 618 744 l 740 744 m 428 842 q 318 881 360 842 q 276 989 276 919 q 318 1097 276 1058 q 428 1135 360 1135 q 538 1097 493 1135 q 582 990 582 1058 q 538 881 582 919 q 428 842 494 842 m 428 911 q 484 932 463 911 q 506 989 506 953 q 483 1046 506 1025 q 428 1067 461 1067 q 372 1046 394 1067 q 350 989 350 1025 q 370 932 350 953 q 428 911 390 911 z "},"v":{"ha":706,"x_min":0,"x_max":706,"o":"m 282 0 l 0 744 l 131 744 l 289 306 q 313 238 300 275 q 335 166 325 200 q 349 108 344 132 l 354 108 q 370 167 360 132 q 394 239 381 201 q 417 306 407 276 l 575 744 l 706 744 l 422 0 l 282 0 z "},"w":{"ha":1092,"x_min":15,"x_max":1076,"o":"m 599 421 q 582 478 590 450 q 567 533 574 507 q 556 581 561 558 q 547 618 550 603 l 542 618 q 534 581 539 603 q 523 532 529 558 q 509 477 517 506 q 492 419 501 449 l 358 1 l 219 1 l 15 746 l 142 746 l 244 349 q 265 267 256 308 q 283 190 275 226 q 293 126 290 153 l 299 126 q 308 168 303 143 q 320 221 314 193 q 334 276 326 249 q 349 326 342 304 l 481 746 l 614 746 l 742 326 q 762 258 751 294 q 781 188 772 222 q 792 128 789 154 l 797 128 q 808 187 800 151 q 826 265 815 222 q 847 349 836 307 l 951 746 l 1076 746 l 869 1 l 726 1 l 599 421 z "},"ẃ":{"ha":1092,"x_min":15,"x_max":1076,"o":"m 599 421 q 582 478 590 450 q 567 533 574 507 q 556 581 561 558 q 547 618 550 603 l 542 618 q 534 581 539 603 q 523 532 529 558 q 509 477 517 506 q 492 419 501 449 l 358 1 l 219 1 l 15 746 l 142 746 l 244 349 q 265 267 256 308 q 283 190 275 226 q 293 126 290 153 l 299 126 q 308 168 303 143 q 320 221 314 193 q 334 276 326 249 q 349 326 342 304 l 481 746 l 614 746 l 742 326 q 762 258 751 294 q 781 188 772 222 q 792 128 789 154 l 797 128 q 808 187 800 151 q 826 265 815 222 q 847 349 836 307 l 951 746 l 1076 746 l 869 1 l 726 1 l 599 421 m 751 1050 q 715 1003 739 1031 q 663 945 692 975 q 606 888 635 915 q 553 842 578 861 l 472 842 l 472 858 q 517 921 493 885 q 565 995 542 957 q 604 1064 589 1033 l 751 1064 l 751 1050 z "},"ŵ":{"ha":1092,"x_min":15,"x_max":1076,"o":"m 599 421 q 582 478 590 450 q 567 533 574 507 q 556 581 561 558 q 547 618 550 603 l 542 618 q 534 581 539 603 q 523 532 529 558 q 509 477 517 506 q 492 419 501 449 l 358 1 l 219 1 l 15 746 l 142 746 l 244 349 q 265 267 256 308 q 283 190 275 226 q 293 126 290 153 l 299 126 q 308 168 303 143 q 320 221 314 193 q 334 276 326 249 q 349 326 342 304 l 481 746 l 614 746 l 742 326 q 762 258 751 294 q 781 188 772 222 q 792 128 789 154 l 797 128 q 808 187 800 151 q 826 265 815 222 q 847 349 836 307 l 951 746 l 1076 746 l 869 1 l 726 1 l 599 421 m 607 1064 q 655 995 624 1033 q 720 920 686 957 q 781 857 754 883 l 781 842 l 694 842 q 619 897 658 864 q 543 967 581 929 q 468 897 506 929 q 394 842 431 865 l 311 842 l 311 857 q 370 921 338 885 q 433 995 403 957 q 482 1064 464 1033 l 607 1064 z "},"ẅ":{"ha":1092,"x_min":15,"x_max":1076,"o":"m 599 421 q 582 478 590 450 q 567 533 574 507 q 556 581 561 558 q 547 618 550 603 l 542 618 q 534 581 539 603 q 523 532 529 558 q 509 477 517 506 q 492 419 501 449 l 358 1 l 219 1 l 15 746 l 142 746 l 244 349 q 265 267 256 308 q 283 190 275 226 q 293 126 290 153 l 299 126 q 308 168 303 143 q 320 221 314 193 q 334 276 326 249 q 349 326 342 304 l 481 746 l 614 746 l 742 326 q 762 258 751 294 q 781 188 772 222 q 792 128 789 154 l 797 128 q 808 187 800 151 q 826 265 815 222 q 847 349 836 307 l 951 746 l 1076 746 l 869 1 l 726 1 l 599 421 m 351 946 q 371 998 351 982 q 417 1014 390 1014 q 463 998 443 1014 q 482 946 482 982 q 463 894 482 911 q 417 876 443 876 q 371 894 390 876 q 351 946 351 911 m 613 946 q 631 998 613 982 q 676 1014 650 1014 q 722 998 703 1014 q 742 946 742 982 q 722 894 742 911 q 676 876 703 876 q 631 894 650 876 q 613 946 613 911 z "},"ẁ":{"ha":1092,"x_min":15,"x_max":1076,"o":"m 599 421 q 582 478 590 450 q 567 533 574 507 q 556 581 561 558 q 547 618 550 603 l 542 618 q 534 581 539 603 q 523 532 529 558 q 509 477 517 506 q 492 419 501 449 l 358 1 l 219 1 l 15 746 l 142 746 l 244 349 q 265 267 256 308 q 283 190 275 226 q 293 126 290 153 l 299 126 q 308 168 303 143 q 320 221 314 193 q 334 276 326 249 q 349 326 342 304 l 481 746 l 614 746 l 742 326 q 762 258 751 294 q 781 188 772 222 q 792 128 789 154 l 797 128 q 808 187 800 151 q 826 265 815 222 q 847 349 836 307 l 951 746 l 1076 746 l 869 1 l 726 1 l 599 421 m 511 1064 q 549 995 526 1033 q 598 921 572 957 q 644 858 624 885 l 644 842 l 563 842 q 510 888 539 861 q 452 945 481 915 q 401 1003 424 975 q 365 1050 378 1031 l 365 1064 l 511 1064 z "},"x":{"ha":735,"x_min":25,"x_max":710,"o":"m 294 381 l 38 744 l 176 744 l 368 464 l 558 744 l 696 744 l 439 381 l 710 0 l 571 0 l 368 297 l 163 0 l 25 0 l 294 381 z "},"y":{"ha":708,"x_min":1,"x_max":708,"o":"m 1 744 l 132 744 l 293 321 q 319 249 307 283 q 340 181 331 214 q 356 118 350 149 l 361 118 q 388 209 369 153 q 425 322 406 265 l 576 744 l 708 744 l 388 -103 q 326 -224 361 -172 q 240 -305 290 -276 q 117 -333 189 -333 q 58 -330 83 -333 q 15 -322 33 -326 l 15 -225 q 52 -231 31 -228 q 97 -233 74 -233 q 172 -217 140 -233 q 225 -172 203 -201 q 263 -101 247 -142 l 301 -3 l 1 744 z "},"ý":{"ha":708,"x_min":1,"x_max":708,"o":"m 1 744 l 132 744 l 293 321 q 319 249 307 283 q 340 181 331 214 q 356 118 350 149 l 361 118 q 388 209 369 153 q 425 322 406 265 l 576 744 l 708 744 l 388 -103 q 326 -224 361 -172 q 240 -305 290 -276 q 117 -333 189 -333 q 58 -330 83 -333 q 15 -322 33 -326 l 15 -225 q 52 -231 31 -228 q 97 -233 74 -233 q 172 -217 140 -233 q 225 -172 203 -201 q 263 -101 247 -142 l 301 -3 l 1 744 m 560 1050 q 524 1003 547 1031 q 472 945 500 975 q 415 888 443 915 q 361 842 386 861 l 281 842 l 281 858 q 326 921 301 885 q 374 995 350 957 q 413 1064 397 1033 l 560 1064 l 560 1050 z "},"ŷ":{"ha":708,"x_min":1,"x_max":708,"o":"m 1 744 l 132 744 l 293 321 q 319 249 307 283 q 340 181 331 214 q 356 118 350 149 l 361 118 q 388 209 369 153 q 425 322 406 265 l 576 744 l 708 744 l 388 -103 q 326 -224 361 -172 q 240 -305 290 -276 q 117 -333 189 -333 q 58 -330 83 -333 q 15 -322 33 -326 l 15 -225 q 52 -231 31 -228 q 97 -233 74 -233 q 172 -217 140 -233 q 225 -172 203 -201 q 263 -101 247 -142 l 301 -3 l 1 744 m 415 1064 q 463 995 432 1033 q 528 920 494 957 q 589 857 563 883 l 589 842 l 503 842 q 428 897 467 864 q 351 967 389 929 q 276 897 314 929 q 203 842 239 865 l 119 842 l 119 857 q 178 921 146 885 q 242 995 211 957 q 290 1064 272 1033 l 415 1064 z "},"ÿ":{"ha":708,"x_min":1,"x_max":708,"o":"m 1 744 l 132 744 l 293 321 q 319 249 307 283 q 340 181 331 214 q 356 118 350 149 l 361 118 q 388 209 369 153 q 425 322 406 265 l 576 744 l 708 744 l 388 -103 q 326 -224 361 -172 q 240 -305 290 -276 q 117 -333 189 -333 q 58 -330 83 -333 q 15 -322 33 -326 l 15 -225 q 52 -231 31 -228 q 97 -233 74 -233 q 172 -217 140 -233 q 225 -172 203 -201 q 263 -101 247 -142 l 301 -3 l 1 744 m 160 946 q 179 998 160 982 q 225 1014 199 1014 q 271 998 251 1014 q 290 946 290 982 q 271 894 290 911 q 225 876 251 876 q 179 894 199 876 q 160 946 160 911 m 421 946 q 440 998 421 982 q 485 1014 458 1014 q 531 998 511 1014 q 550 946 550 982 q 531 894 550 911 q 485 876 511 876 q 440 894 458 876 q 421 946 421 911 z "},"¥":{"ha":794,"x_min":19,"x_max":772,"o":"m 396 507 l 644 992 l 772 992 l 493 471 l 665 471 l 665 382 l 456 382 l 456 268 l 665 268 l 665 179 l 456 179 l 456 0 l 336 0 l 336 179 l 126 179 l 126 268 l 336 268 l 336 382 l 126 382 l 126 471 l 296 471 l 19 992 l 149 992 l 396 507 z "},"ỳ":{"ha":708,"x_min":1,"x_max":708,"o":"m 1 744 l 132 744 l 293 321 q 319 249 307 283 q 340 181 331 214 q 356 118 350 149 l 361 118 q 388 209 369 153 q 425 322 406 265 l 576 744 l 708 744 l 388 -103 q 326 -224 361 -172 q 240 -305 290 -276 q 117 -333 189 -333 q 58 -330 83 -333 q 15 -322 33 -326 l 15 -225 q 52 -231 31 -228 q 97 -233 74 -233 q 172 -217 140 -233 q 225 -172 203 -201 q 263 -101 247 -142 l 301 -3 l 1 744 m 319 1064 q 358 995 335 1033 q 406 921 381 957 q 453 858 432 885 l 453 842 l 371 842 q 318 888 347 861 q 260 945 289 915 q 209 1003 232 975 q 174 1050 186 1031 l 174 1064 l 319 1064 z "},"z":{"ha":653,"x_min":54,"x_max":599,"o":"m 599 0 l 54 0 l 54 81 l 454 650 l 78 650 l 78 744 l 589 744 l 589 653 l 194 94 l 599 94 l 599 0 z "},"ź":{"ha":653,"x_min":54,"x_max":599,"o":"m 599 0 l 54 0 l 54 81 l 454 650 l 78 650 l 78 744 l 589 744 l 589 653 l 194 94 l 599 94 l 599 0 m 532 1050 q 496 1003 519 1031 q 444 945 472 975 q 387 888 415 915 q 333 842 358 861 l 253 842 l 253 858 q 298 921 274 885 q 346 995 322 957 q 385 1064 369 1033 l 532 1064 l 532 1050 z "},"ž":{"ha":653,"x_min":54,"x_max":599,"o":"m 599 0 l 54 0 l 54 81 l 454 650 l 78 650 l 78 744 l 589 744 l 589 653 l 194 94 l 599 94 l 599 0 m 263 842 q 214 910 244 874 q 150 983 183 947 q 92 1046 117 1019 l 92 1064 l 175 1064 q 250 1007 211 1040 q 324 936 289 974 q 400 1007 361 974 q 475 1064 439 1040 l 561 1064 l 561 1046 q 501 983 535 1019 q 435 910 467 947 q 388 842 404 874 l 263 842 z "},"ż":{"ha":653,"x_min":54,"x_max":599,"o":"m 599 0 l 54 0 l 54 81 l 454 650 l 78 650 l 78 744 l 589 744 l 589 653 l 194 94 l 599 94 l 599 0 m 328 1024 q 377 1005 356 1024 q 399 946 399 986 q 377 888 399 907 q 328 868 356 868 q 276 888 297 868 q 256 946 256 907 q 276 1005 256 986 q 328 1024 297 1024 z "},"ˉ":{"ha":524,"x_min":56,"x_max":468,"o":"m 468 940 l 468 842 l 56 842 l 56 940 l 468 940 z "}},"familyName":"Noto Sans Kannada","ascender":1124,"descender":-750,"underlinePosition":-139,"underlineThickness":69,"boundingBox":{"yMin":-739,"xMin":-814,"yMax":1382,"xMax":2393},"resolution":1000,"original_font_information":{"format":0,"copyright":"Copyright 2022 The Noto Project Authors (https://github.com/notofonts/kannada)","fontFamily":"Noto Sans Kannada","fontSubfamily":"Regular","uniqueID":"2.005;GOOG;NotoSansKannada-Regular","fullName":"Noto Sans Kannada Regular","version":"Version 2.005","postScriptName":"NotoSansKannada-Regular","trademark":"Noto is a trademark of Google Inc.","manufacturer":"Monotype Imaging Inc.","designer":"Jelle Bosma - Monotype Design Team","description":"Designed by Monotype design team.","manufacturerURL":"http://www.google.com/get/noto/","designerURL":"http://www.monotype.com/studio","licence":"This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL","licenceURL":"https://scripts.sil.org/OFL","unknown1":"NotoSansKannada","unknown2":"florin symbol","unknown3":"Titling Alternates I and J for titling and all cap settings","unknown4":"Accented Greek SC","unknown5":"iota adscript","unknown6":"Weight","unknown7":"Width","unknown8":"Thin","unknown9":"ExtraLight","unknown10":"Light","unknown11":"Regular","unknown12":"Medium","unknown13":"SemiBold","unknown14":"Bold","unknown15":"ExtraBold","unknown16":"Black","unknown17":"ExtraCondensed","unknown18":"Condensed","unknown19":"SemiCondensed","unknown20":"Normal"},"cssFontWeight":"normal","cssFontStyle":"normal"}');var sC={};sC=new URL("earth_day_4096.4899a273.jpg",import.meta.url).toString();var sP={};sP=new URL("earth_night_4096.b5559c8d.jpg",import.meta.url).toString();var sL={};sL=new URL("earth_bump_roughness_clouds_4096.afec421f.jpg",import.meta.url).toString(),nM.enabled=!0;const sD={GLOBAL:{distance:700,scale:1,threshold:650},CITY:{distance:600,scale:.7,threshold:400},VENUE:{distance:400,scale:.5,threshold:300},NAMES:{distance:200,scale:.3,threshold:200}},sU=[{text:"San ABC",position:{x:0,y:100,z:0},size:35},{text:"Weds",position:{x:0,y:60,z:0},size:20},{text:"Ran XYZ",position:{x:0,y:20,z:0},size:35}];let sN=[],sI,sO,sz,sF=new class{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=nV(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){let t=nV();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}};function sB(e){sI&&(sI.visible=e>=sD.GLOBAL.threshold,sI.position.set(0,0,0)),sz&&(h.visible=e<sD.GLOBAL.threshold&&e>=sD.CITY.threshold,sz.material&&(sz.material.opacity=Math.min(1,(e-sD.VENUE.threshold)/(sD.CITY.threshold-sD.VENUE.threshold)))),sO&&(sO.visible=e<sD.CITY.threshold&&e>=sD.VENUE.threshold,sO.children[0].material&&(sO.children[0].material.opacity=Math.min(1,(sD.CITY.threshold-e)/(sD.CITY.threshold-sD.VENUE.threshold)))),sN.forEach(t=>{t.visible=e<sD.VENUE.threshold,t.visible&&(t.material.emissiveIntensity=.2+.1*Math.sin(sF.getElapsedTime()))})}function sH(e){document.querySelectorAll(".overlay-content").forEach(e=>e.classList.remove("visible"));let t=document.querySelectorAll(".schedule-item");e>=sD.GLOBAL.threshold?document.getElementById("global-view").classList.add("visible"):e<sD.GLOBAL.threshold&&e>=sD.CITY.threshold?document.getElementById("city-view").classList.add("visible"):e<sD.CITY.threshold&&e>=sD.VENUE.threshold?document.getElementById("venue-view").classList.add("visible"):(document.getElementById("details-view").classList.add("visible"),t.forEach((e,t)=>{setTimeout(()=>{e.classList.add("visible")},200*t)}))}function sV(){n.aspect=window.innerWidth/window.innerHeight,n.updateProjectionMatrix(),a.setSize(window.innerWidth,window.innerHeight)}if(!function(){var e;i=document.createElement("div"),document.body.appendChild(i),r=new t8;let q=new nB(0xffffff,1.4);r.add(q);let u=new nF(0xffffff,3);u.position.set(0,200,400),r.add(u);let d=new nR().load("bgImage");d.mapping=303,d.colorSpace=_,r.background=d,(a=new sn({antialias:!0,logarithmicDepthBuffer:!0})).setPixelRatio(window.devicePixelRatio),a.setSize(window.innerWidth,window.innerHeight),i.appendChild(a.domElement),(n=new t1(70,window.innerWidth/window.innerHeight,.1,1e4)).position.set(0,0,sD.GLOBAL.distance),(s=new sd(n,a.domElement)).enableDamping=!0,s.dampingFactor=.05,s.enableZoom=!0,s.minDistance=sD.NAMES.threshold,s.maxDistance=1.5*sD.GLOBAL.distance,s.target.set(0,0,0),s.update(),e=new sb().parse(c(sR)),function(){let e=new nR,i=e.load(c(sC));i.colorSpace=_,i.anisotropy=16;let n=e.load(c(sP));n.colorSpace=_,n.anisotropy=16;let a=e.load(c(sL));a.anisotropy=16;let s=new nh({map:i,bumpMap:a,bumpScale:.8,specularMap:a,transparent:!0,opacity:1});(sI=new tV(new nn(200,96,96),s)).position.set(0,0,0),sI.rotation.y=Math.PI,sI.rotation.x=-(.1*Math.PI),r.add(sI);let o=new tV(new nn(214,96,96),new nh({side:1,transparent:!0,opacity:.3,color:5092095}));sI.add(o);let l=Math.PI/180*77.7042,h=Math.PI/180*256.6394;(t=new tV(new nn(10,16,16),new nh({color:0xff0000,emissive:0xff0000,emissiveIntensity:.7}))).position.x=-(200*Math.sin(l)*Math.cos(h)),t.position.y=200*Math.cos(l),t.position.z=200*Math.sin(l)*Math.sin(h),t.visible=!0,sI.add(t),function(e,t){let i=new tV(new nn(8,16,16),new tp({color:0xff0000,transparent:!0,opacity:.4}));i.position.copy(t.position),e.add(i),function n(){i.scale.multiplyScalar(1.02),i.scale.x>2.5&&i.scale.set(1,1,1),t.visible?requestAnimationFrame(n):e.remove(i)}()}(sI,t),sI.visible=!0}(),function(e){sz=new tV(new iI(150,150,20,32),new nh({color:4886754,transparent:!0,opacity:.9}));let t=new sA("Bengaluru",{font:e,size:30,height:5,depth:10,curveSegments:12,bevelEnabled:!0,bevelThickness:2,bevelSize:1});t.center();let i=new tV(t,new nh({color:0xffd700}));i.position.set(0,30,0),(h=new t6).add(sz),h.add(i),h.position.set(0,-50,0),h.visible=!0,r.add(h)}(e),function(e){let t=new tV(new tG(80,40,80),new nh({color:0xd4af37,transparent:!0,opacity:.8})),i=new sA("Grand Wedding Hall",{font:e,size:20,height:5,depth:10,curveSegments:12,bevelEnabled:!0,bevelThickness:1,bevelSize:.5});i.center();let n=new tV(i,new nh({color:0xffd700}));n.position.set(0,50,0),(sO=new t6).add(t),sO.add(n),sO.position.set(0,-30,0),sO.visible=!1,r.add(sO)}(e),function(e){l=new t6;let t=window.innerWidth,i=new nl({color:0xffd700,metalness:.6,roughness:.2,emissive:5592320,emissiveIntensity:.2});sU.forEach(n=>{let r=t<900?.6*n.size:n.size,a=new sA(n.text,{font:e,size:r,height:8,depth:6,curveSegments:12,bevelEnabled:!0,bevelThickness:3,bevelSize:1.5,bevelSegments:8});a.center();var s=new tV(a,i);let o=t<600?.7*n.position.y:n.position.y;s.position.set(n.position.x,o,n.position.z),s.visible=!1,l.add(s),sN.push(s)}),r.add(l)}(e),function(){let e=new tC,t=new Float32Array(6e3);for(let e=0;e<6e3;e+=3)t[e]=(Math.random()-.5)*1e3,t[e+1]=(Math.random()-.5)*1e3,t[e+2]=(Math.random()-.5)*1e3;e.setAttribute("position",new tx(t,3));let i=new iq(e,new is({size:2,color:0xffffff,transparent:!0,opacity:.8,blending:2}));i.visible=!0,r.add(i)}(),sB(sD.GLOBAL.distance),sH(sD.GLOBAL.distance),s.addEventListener("change",()=>{console.log(o=n.position.distanceTo(r.position)),sB(o),sH(o)}),window.addEventListener("resize",sV),function e(){requestAnimationFrame(e);let t=sF.getElapsedTime();if(sN.some(e=>e.visible)){let e=30*Math.sin(.5*t),i=20*Math.sin(.3*t);sN.forEach(t=>{t.visible&&(t.position.z=e,t.position.x=i)})}sI&&sI.visible&&(sI.rotation.y+=.002),s.update(),a.render(r,n)}()}(),window.innerWidth<=768){let e=["global-view","city-view","venue-view","details-view"],t=0;document.getElementById(e[0]).classList.add("active");let i=0,n=0;function sk(t){e.forEach(e=>{document.getElementById(e).classList.remove("active")}),document.getElementById(e[t]).classList.add("active"),"details-view"===e[t]&&document.querySelectorAll(".schedule-item").forEach((e,t)=>{setTimeout(()=>{e.classList.add("active")},200*t)})}document.addEventListener("touchstart",e=>{i=e.touches[0].clientY},!1),document.addEventListener("touchend",r=>{n=r.changedTouches[0].clientY,function(){let r=i-n;Math.abs(r)>50&&(r>0&&t<e.length-1?sk(++t):r<0&&t>0&&sk(--t))}()},!1)}
//# sourceMappingURL=index.9a4cbe9f.js.map
